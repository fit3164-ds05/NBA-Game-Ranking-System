{"version":3,"file":"IdentityVersionConverter.js","sourceRoot":"","sources":["../../../src/versioning/IdentityVersionConverter.ts"],"names":[],"mappings":";;AAGA,wBAAwB;AAExB;;;GAGG;AACH;IAAA;IAeA,CAAC;IAdQ,qDAAkB,GAAzB,UAA0B,IAAS,EAAE,UAAe;QAClD,OAAO;YACL,IAAI,EAAE,IAAc;YACpB,UAAU,EAAE,UAA+B;SAC5C,CAAC;IACJ,CAAC;IAEM,yDAAsB,GAA7B,UAA8B,eAAgC;QAC5D,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,wDAAqB,GAA5B,UAA6B,YAA0B;QACrD,OAAO,YAAY,CAAC;IACtB,CAAC;IACH,+BAAC;AAAD,CAAC,AAfD,IAeC;AAfY,4DAAwB","sourcesContent":["import { ExecuteParameters, ExecuteResponse, Notification, VerbId } from '../JsApiInternalContract';\nimport { InternalContractVersionConverter } from './InternalContractVersionConverter';\n\n// tslint:disable:no-any\n\n/**\n * This version converter doesn't actually do anything but is useful for testing or when we have\n * a matching platform and internal version number\n */\nexport class IdentityVersionConverter implements InternalContractVersionConverter {\n  public upgradeExecuteCall(verb: any, parameters: any): { verb: VerbId; parameters: ExecuteParameters } {\n    return {\n      verb: verb as VerbId,\n      parameters: parameters as ExecuteParameters,\n    };\n  }\n\n  public downgradeExecuteReturn(executeResponse: ExecuteResponse): ExecuteResponse {\n    return executeResponse;\n  }\n\n  public downgradeNotification(notification: Notification): Notification {\n    return notification;\n  }\n}\n"]}