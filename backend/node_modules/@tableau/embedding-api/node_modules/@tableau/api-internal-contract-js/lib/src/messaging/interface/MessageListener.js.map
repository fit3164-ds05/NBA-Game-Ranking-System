{"version":3,"file":"MessageListener.js","sourceRoot":"","sources":["../../../../src/messaging/interface/MessageListener.ts"],"names":[],"mappings":"","sourcesContent":["import { CommandMessage, CommandResponseMessage, HandshakeMessage, InitializeMessage, NotificationMessage } from './MessageTypes';\nimport { PreparedMessage } from './PreparedMessage';\n\n/**\n * Message handler types\n */\nexport type InitializeMessageHandler = (msg: InitializeMessage, source: MessageEventSource | null) => void;\nexport type CommandResponseMessageHandler = (msg: CommandResponseMessage, source: MessageEventSource | null) => void;\nexport type CommandMessageHandler = (msg: CommandMessage, source: MessageEventSource | null) => void;\nexport type NotificationMessageHandler = (msg: NotificationMessage, source: MessageEventSource | null) => void;\nexport type HandshakeMessageHandler = (msg: HandshakeMessage, source: MessageEventSource | null) => void;\n\n/**\n * Interface to which defines a message listener. The Set*MessageHandler functions should be\n * called to handle specific message types. Nothing will happen until StartListening is called\n *\n * @interface MessageListener\n */\nexport interface MessageListener {\n  startListening(): void;\n  stopListening(): void;\n\n  setInitializeMessageHandler(handler?: InitializeMessageHandler): void;\n  setCommandResponseMessageHandler(handler?: CommandResponseMessageHandler): void;\n  setCommandMessageHandler(handler?: CommandMessageHandler): void;\n  setNotificationMessageHandler(handler?: NotificationMessageHandler): void;\n  setHandshakeMessageHandler(handler?: HandshakeMessageHandler): void;\n\n  setOtherWindow(otherWindow: Window): void;\n  setOtherWindowOrigin(origin: string): void;\n\n  prepareAckMessage(): PreparedMessage;\n}\n"]}