{"version":3,"file":"ExternalIdentityVersionConverter.js","sourceRoot":"","sources":["../../../../src/versioning/external/ExternalIdentityVersionConverter.ts"],"names":[],"mappings":";;AAGA,wBAAwB;AAExB;;;GAGG;AACH;IAAA;IAeA,CAAC;IAdQ,+DAAoB,GAA3B,UAA4B,IAAS,EAAE,UAAe;QACpD,OAAO;YACL,IAAI,EAAE,IAAc;YACpB,UAAU,EAAE,UAA+B;SAC5C,CAAC;IACJ,CAAC;IAEM,+DAAoB,GAA3B,UAA4B,eAAgC,EAAE,IAAY,EAAE,UAA6B;QACvG,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,8DAAmB,GAA1B,UAA2B,YAA0B;QACnD,OAAO,YAAY,CAAC;IACtB,CAAC;IACH,uCAAC;AAAD,CAAC,AAfD,IAeC;AAfY,4EAAgC","sourcesContent":["import { ExecuteParameters, ExecuteResponse, Notification, VerbId } from '../../JsApiInternalContract';\nimport { ExternalContractVersionConverter } from './ExternalContractVersionConverter';\n\n// tslint:disable:no-any\n\n/**\n * This version converter doesn't actually do anything but is useful for testing or when we have\n * a matching platform and external version number\n */\nexport class ExternalIdentityVersionConverter implements ExternalContractVersionConverter {\n  public downgradeExecuteCall(verb: any, parameters: any): { verb: VerbId; parameters: ExecuteParameters } {\n    return {\n      verb: verb as VerbId,\n      parameters: parameters as ExecuteParameters,\n    };\n  }\n\n  public upgradeExecuteReturn(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse {\n    return executeResponse;\n  }\n\n  public upgradeNotification(notification: Notification): Notification {\n    return notification;\n  }\n}\n"]}