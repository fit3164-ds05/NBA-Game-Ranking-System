{"version":3,"file":"MessageTypes.js","sourceRoot":"","sources":["../../../../src/messaging/interface/MessageTypes.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH,IAAY,WAOX;AAPD,WAAY,WAAW;IACrB,wCAAyB,CAAA;IACzB,4CAA6B,CAAA;IAC7B,kCAAmB,CAAA;IACnB,mDAAoC,CAAA;IACpC,wCAAyB,CAAA;IACzB,4BAAa,CAAA;AACf,CAAC,EAPW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAOtB","sourcesContent":["import { ExecuteParameters, Model, NotificationId, VerbId, VersionNumber } from '../../JsApiInternalContract';\nimport { InitializationOptions } from '../../interface/InitializationOptions';\n\n/**\n * Enum defining the 4 different types of messages we have defined\n */\nexport enum MessageType {\n  Initialize = 'initialize',\n  Notification = 'notification',\n  Command = 'command',\n  CommandResponse = 'command-response',\n  Handshake = 'v-handshake',\n  Ack = 'v-ack',\n}\n\n/**\n * The Message interface is the base interface for all the other\n * message type interfaces.\n */\nexport interface Message {\n  /**\n   * A unique id for this message\n   */\n  msgGuid: string;\n\n  /**\n   * The type of this message\n   */\n  msgType: MessageType;\n}\n\n/**\n * The initialize message is the first message which will be sent\n * from the javascript to set up communications\n */\nexport interface InitializeMessage extends Message {\n  /**\n   * The version of the api which the sender wants to use\n   */\n  apiVersion: VersionNumber;\n\n  /**\n   * The version of this messaging contract to be used. For now, there\n   * should only be a single version but sending this along should help\n   * if we need to add a new version in a future release\n   */\n  crossFrameVersion: VersionNumber;\n\n  /**\n   * Additional options that can be passed at the time of initialization\n   */\n  options?: InitializationOptions;\n}\n\n/**\n * This message is sent when a notification occurs from the preslayer\n */\nexport interface NotificationMessage extends Message {\n  /**\n   * The id for this type of notification\n   */\n  notificationId: NotificationId;\n\n  /**\n   * The data which came along with the notification\n   */\n  data: Model;\n}\n\n/**\n * Represents calling an internal contract command\n */\nexport interface CommandMessage extends Message {\n  /**\n   * The id of the command which should be executed\n   */\n  verbId: VerbId;\n\n  /**\n   * An object containing the parameters for the command\n   */\n  parameters: ExecuteParameters;\n}\n\n/**\n * This message is sent in response to a CommandMessage with the\n * result of that commands invocation\n */\nexport interface CommandResponseMessage extends Message {\n  /**\n   * Guid of the CommandMessage which this is in response to\n   */\n  commandGuid: string;\n\n  /**\n   * If there was an error returned from the command, this will be defined\n   * and contain the error\n   */\n  error?: Model;\n\n  /**\n   * If the command executed successfully, this will contain the command result\n   */\n  data?: Model;\n}\n\nexport interface HandshakeMessage extends Message {\n  /**\n   * Internal API contract version\n   */\n  platformVersion: VersionNumber;\n}\n"]}