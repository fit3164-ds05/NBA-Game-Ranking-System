import { ExecuteParameters, ExecuteResponse, Notification, VerbId, VersionNumber } from '../JsApiInternalContract';
import { InternalContractVersionConverter } from './InternalContractVersionConverter';
import * as Translations from './VersionTranslations';
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. The only
 * mode it supports is external's version <= platform's version. When executing
 * commands, it is used to upgrade the external representation to what platform knows on the way in
 * and downgrade the representations on the way out. Similarly for notifications, it can
 * downgrade those on the way from platform to external.
 */
export declare class StackingVersionConverter implements InternalContractVersionConverter {
    private _externalMajorVersion;
    private _platformMajorVersion;
    private _upgradeExecuteTranslations;
    private _downgradeExecuteTranslations;
    private _downgradeNotificationTranslations;
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    static fromData(externalVersion: VersionNumber, platformVersion: VersionNumber, upgradeExecuteTranslations: Array<Translations.UpgradeExecuteCall>, downgradeExecuteTranslations: Array<Translations.DowngradeExecuteReturn>, downgradeNotificationTranslations: Array<Translations.DowngradeNotification>): StackingVersionConverter;
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalMajorVersion The major version of the internal contract api-external-js is using
     * @param _platformMajorVersion The major version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    constructor(_externalMajorVersion: number, _platformMajorVersion: number, _upgradeExecuteTranslations: Array<Translations.UpgradeExecuteCall>, _downgradeExecuteTranslations: Array<Translations.DowngradeExecuteReturn>, _downgradeNotificationTranslations: Array<Translations.DowngradeNotification>);
    upgradeExecuteCall(verb: any, parameters: any): {
        verb: VerbId;
        parameters: ExecuteParameters;
    };
    downgradeExecuteReturn(executeResponse: ExecuteResponse): ExecuteResponse;
    downgradeNotification(notification: Notification): Notification;
}
//# sourceMappingURL=StackingVersionConverter.d.ts.map