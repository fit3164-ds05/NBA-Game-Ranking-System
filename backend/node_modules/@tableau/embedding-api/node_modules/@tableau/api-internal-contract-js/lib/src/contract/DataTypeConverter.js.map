{"version":3,"file":"DataTypeConverter.js","sourceRoot":"","sources":["../../../src/contract/DataTypeConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataType } from './Enums';\n\nexport class DataTypeConverter {\n  private static isSpecial(valueAsString: string): boolean {\n    // Prior to ShowDataTablePresModel, special values come to us as\n    // '%null%', '%all%', '%wildcard%', '%missing%'...\n    // While this function will never return true for ShowDataTablePresModel conversion,\n    // it is as cheap as passing around a version and checking that.\n    // (See DataValueFormatter.cpp)\n\n    if (valueAsString.length > 2 && valueAsString[0] === '%' && valueAsString[valueAsString.length - 1] === '%') {\n      return true;\n    }\n    return false;\n  }\n\n  private static specialValueIndicator = '%null%';\n\n  // tslint:disable-next-line:no-any\n  private static parseBoolean(booleanString: string): boolean | string {\n    // boolean values come to us as 'true'|'false'\n    const normalizedBoolean: string = booleanString.toLowerCase();\n    return normalizedBoolean !== 'true' && normalizedBoolean !== 'false' ? this.specialValueIndicator : normalizedBoolean === 'true';\n  }\n\n  // tslint:disable-next-line:no-any\n  private static parseNumber(valueAsString: string): number | string {\n    const value = Number(valueAsString);\n    return isNaN(value) ? this.specialValueIndicator : value;\n  }\n\n  private static parseDate(dateAsString: string): Date | null {\n    // Note that without a time, the date is assumed to be UTC\n    // Input of 2020-03-25 is printed as: Mar 24 2020 17:00:00 GMT-0700\n    // This matches style used in existing convertFilterValuePresModel\n    const value = new Date(dateAsString);\n    return Number.isNaN(value.getTime()) ? null : value;\n  }\n\n  private static parseDateTime(dateAsString: string): Date | null {\n    // With a time, the date is assumed to be UTC.\n    // Our date format is always: yyyy-mm-dd hh:mm:ss\n    // Unfortunately, IE11 can't parse that format so we add a T between the day and time.\n    // We also add a Z so that it is UTC. (Without the Z, some browsers assume local, and others UTC)\n    const formattedDateString: string = dateAsString.replace(' ', 'T').concat('Z');\n    const value = new Date(formattedDateString);\n    return Number.isNaN(value.getTime()) ? null : value;\n  }\n\n  // It would be nice to merge this and the method FilterConverter::convertFilterValuePresModel in api-platform-js\n  public static convertValueAsStringToValue(valueAsString: string, type: DataType): boolean | number | string | undefined {\n    // This is both DataDictionary and ShowDataTablePresModel compatible.\n    // In the DataDictionary, valueAsString can be '%null%' or '%missing%', while in\n    // ShowDataTablePresModel, we can get 'null' or 'missing', or '%null%' for string special values.\n    // For either of these cases, we return specialValueIndicator (or the original special string).\n    // To maintain backwards compatibilty, this converter:\n    // 1. returns a string for any special values\n    // 2. returns a string for any date\n\n    // Parameter min/max values can be undefined, so result is also undefined\n    if (valueAsString === undefined || valueAsString === null) {\n      return undefined;\n    }\n\n    if (this.isSpecial(valueAsString)) {\n      return valueAsString;\n    }\n\n    switch (type) {\n      case DataType.Bool:\n        return this.parseBoolean(valueAsString);\n\n      case DataType.Int:\n      case DataType.Float:\n        // Return special value '%null%' for any failure in parsing.\n        // We need to do that because ShowDataTablePresModel will give us strings like 'null'\n        // for special values.\n        return this.parseNumber(valueAsString);\n\n      case DataType.Date:\n        // For ShowDataTablePresModel, special values will be \"null\" which will fail to parse.\n        // In that case, we return '%null%'.\n        return this.parseDate(valueAsString) === null ? this.specialValueIndicator : valueAsString;\n\n      case DataType.DateTime:\n        // For ShowDataTablePresModel, special values will be \"null\" which will fail to parse.\n        // In that case, we return '%null%'\n        return this.parseDateTime(valueAsString) === null ? this.specialValueIndicator : valueAsString;\n\n      case DataType.Spatial:\n      case DataType.String:\n      default:\n        return valueAsString;\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  public static convertValueToNativeValue(value: any, type: DataType): boolean | number | Date | string | null {\n    // This converts from our 1.2 API that returns strings for specials, and dates as strings.\n    // It takes the special case of '%null%' and returns a null.\n    // For dates, it returns a Date object rather than a string.\n    // convertValueToNativeValue should be used to build a DataValue.nativeValue field.\n\n    // Parameter min/max can be undefined. If that is the case, nativeValue is treated like a special\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    switch (type) {\n      case DataType.Bool:\n        return typeof value === 'string' ? null : value;\n\n      case DataType.Int:\n      case DataType.Float:\n        return typeof value === 'string' ? null : value;\n\n      case DataType.Date:\n        // Convert the string to Date object (or null if parsing fails ... we assume special)\n        return this.parseDate(value);\n\n      case DataType.DateTime:\n        // Convert the string to Date object (or null if parsing fails ... we assume special)\n        return this.parseDateTime(value);\n\n      case DataType.String:\n        return this.isSpecial(value) ? null : value;\n\n      case DataType.Spatial:\n      default:\n        return value;\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  public static convertStringValueToNativeValue(value: string, type: DataType): boolean | number | Date | string | null {\n    // This handles the conversion from string directly to native value for all types\n    return this.convertValueToNativeValue(this.convertValueAsStringToValue(value, type), type);\n  }\n}\n"]}