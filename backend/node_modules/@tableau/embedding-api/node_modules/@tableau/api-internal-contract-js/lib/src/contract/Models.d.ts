import { VersionNumber } from '../JsApiInternalContract';
import * as Enums from './Enums';
export interface Model {
}
export interface FilterableModel extends Model {
    filterByLocator: boolean;
    locator: ExtensionLocator;
}
export interface SheetPath extends Model {
    sheetName: string;
    isDashboard: boolean;
    storyboard?: string;
    flipboardZoneID?: number;
    storyPointID?: number;
}
export interface VisualId extends Model {
    worksheet: string;
    dashboard?: string;
    storyboard?: string;
    flipboardZoneID?: number;
    storyPointID?: number;
}
export interface DashboardZone extends Model {
    name: string;
    zoneId: number;
    zoneType: Enums.DashboardObjectType;
    height: number;
    width: number;
    x: number;
    y: number;
    sheetInfo?: SheetInfo;
    isFloating?: boolean;
    isVisible?: boolean;
    fieldId?: string;
}
export interface SheetInfo extends Model {
    name: string;
    sheetType: Enums.SheetType;
    url?: string;
}
export interface EmbeddingSheetInfo extends SheetInfo {
    sizeConstraint: SizeConstraint;
}
export interface ContainedSheetInfoModel extends Model {
    name: string;
    sheetType: Enums.SheetType.Dashboard | Enums.SheetType.Worksheet;
    dashboardZones: Array<DashboardZone>;
    zoneId: number;
}
export interface ParameterInfo extends Model {
    name: string;
    fieldName: string;
    dataType: Enums.DataType;
    currentValue: DataValue;
    allowableValuesType: Enums.DomainRestrictionType;
    allowableValues?: Array<DataValue>;
    minValue?: DataValue;
    maxValue?: DataValue;
    stepSize?: number;
    dateStepPeriod?: Enums.DateStepPeriod;
}
export interface DashboardObjectPositionAndSizeUpdate extends Model {
    dashboardObjectID: number;
    x: number;
    y: number;
    width: number;
    height: number;
}
export interface FontNameAndInfo extends Model {
    fontName: string;
    fontBinaryInfo: Uint8Array;
}
export interface FirstVizSizeKnownEvent extends Model {
    sheetSize: SizeConstraint;
    chromeHeight: number;
}
export interface FirstPulseMetricSizeKnownEvent extends Model {
    width: number;
    height: number;
}
export interface FilterEvent extends Model {
    fieldName: string;
    visualId: VisualId;
    fieldId?: string;
}
export interface SummaryDataEvent extends Model {
    visualId: VisualId;
}
export interface CustomMarkClickedContextMenuEvent extends Model {
    visualId: VisualId;
    contextMenuId: string;
}
export interface DialogUpdateEvent extends Model {
    isCloseEvent: boolean;
    closePayload?: string;
}
export interface ContextMenuEvent extends FilterableModel {
    id: string;
}
export interface SettingsEvent extends FilterableModel {
    newSettings: {
        [key: string]: string;
    };
}
export interface DashboardLayoutEvent extends FilterableModel {
    zones: Array<DashboardZone>;
    activeZoneId?: number;
    activeDashboardName?: string;
}
export interface ToolbarStateEvent extends Model {
    toolbarState: ToolbarState;
}
export interface PulseFiltersChangedEvent extends Model {
    fieldNames: Array<string>;
}
export interface PulseInsightDiscoveredEvent extends Model {
    id: string;
    characterization: string;
    markup: string;
    question: string;
    score: number;
    type: string;
    version: number;
}
export interface PulseUrlChangedEvent extends Model {
    oldUrl: string;
    newUrl: string;
    context: string | undefined;
}
export interface PulseTimeDimensionChangedEvent extends Model {
    timeDimension: Enums.PulseTimeDimension;
}
export interface PulseErrorEvent extends Model {
    message: string;
    httpStatus: number;
    messageVisibility: Enums.PulseErrorMessageVisibility;
}
export interface DataValue {
    value?: any;
    formattedValue?: string;
    aliasedValue?: string;
    hasAlias?: boolean;
}
export interface DataTable {
    dataTable: Array<Array<DataValue>>;
    headers: Array<DataHeader>;
    marks?: Array<MarkInfo>;
}
export interface DataTableReader {
    id: string;
    totalRowCount: number;
}
export interface MarkInfo {
    type: Enums.MarkType;
    color: string;
    tupleId?: number;
}
export interface DataHeader {
    dataType: Enums.DataType;
    fieldName: string;
    isReferenced: boolean;
    index: number;
    fieldCaption: string;
}
export interface UnderlyingDataTable {
    data: DataTable;
    isSummary: boolean;
}
export interface SelectedMarksTable {
    data: Array<DataTable>;
}
export interface HighlightedMarksTable {
    data: Array<DataTable>;
}
export interface Annotation extends Model {
    annotateEnum: Enums.AnnotateEnum;
    annotationId: number;
    annotationPlainText: string;
    annotationText: string;
    tupleId?: number;
}
export interface DashboardExtensionLocator extends Model {
    instanceId: string;
    dashboardPath: SheetPath;
}
export interface WorksheetExtensionLocator extends Model {
    instanceId: string;
    visualId: VisualId;
}
export interface InvalidExtensionLocator extends Model {
    instanceId: string;
}
export declare type ExtensionLocator = DashboardExtensionLocator | WorksheetExtensionLocator | InvalidExtensionLocator;
export interface ExtensionInstance extends Model {
    url: string;
    locator: ExtensionLocator;
}
export interface ExtensionEnvironment extends Model {
    extensionContext: Enums.ExtensionContext;
    extensionMode: Enums.ExtensionMode;
    extensionLocale: string;
    extensionLanguage: string;
    extensionCountry: string | undefined;
    workbookFormatting?: WorkbookFormatting | undefined;
    tableauVersion: string;
    operatingSystem: string;
    apiVersion: string;
    userId?: string;
    siteId?: string;
    siteNamespace?: string;
    workbookId?: string;
    uniqueUserId: string | undefined;
    platformVersion: VersionNumber;
    featureFlags?: string[];
}
export interface ExtensionSettingsInfo extends Model {
    settingsValues: {
        [key: string]: string;
    };
}
export interface WorkbookFormatting extends Model {
    formattingSheets: Array<FormattingSheet>;
}
export interface WorkbookFormattingEvent extends FilterableModel {
    formattingSheets: Array<FormattingSheet>;
}
export interface WorksheetFormattingEvent extends Model {
    formattingSheets: Array<FormattingSheet>;
    visualId: VisualId;
}
export interface FormattingSheet extends Model {
    classNameKey: Enums.ClassNameKey;
    cssProperties: React.CSSProperties;
}
export interface ExtensionDashboardInfo extends Model {
    extensionZoneId: number;
    name: string;
    zones: Array<DashboardZone>;
    size: SizeInfo;
    activeDashboardObjectId: number;
}
export interface ExtensionWorksheetInfo extends Model {
    visualId: VisualId;
    size: SizeInfo;
    backgroundColor: string;
    formatting: WorkbookFormatting;
}
export interface ExtensionBootstrapInfo extends Model {
    extensionInstance: ExtensionInstance;
    extensionEnvironment: ExtensionEnvironment;
    extensionDashboardInfo?: ExtensionDashboardInfo;
    extensionWorksheetInfo?: ExtensionWorksheetInfo;
    extensionSettingsInfo: ExtensionSettingsInfo;
    extensionDialogPayload: string;
}
export interface SizeInfo extends Model {
    h: number;
    w: number;
}
export declare type DataSourceMap = {
    [key: string]: DataSource;
};
export declare type WorksheetDataSchemaMap = {
    [key: string]: WorksheetDataSourceInfo;
};
export interface DataSchema extends Model {
    dataSources: DataSourceMap;
    worksheetDataSchemaMap: WorksheetDataSchemaMap;
}
export interface DataSource extends Model {
    name: string;
    id: string;
    extractUpdateTime?: string;
    isExtract: boolean;
    fields: Array<Field>;
    isPublished?: boolean;
    publishedUrl?: string;
}
export interface FieldBase extends Model {
    name: string;
    description: string | undefined;
    dataType: Enums.DataType | undefined;
    aggregation: Enums.FieldAggregationType;
    role: Enums.FieldRoleType;
    columnType: Enums.ColumnType;
    isCalculatedField: boolean;
    isCombinedField: boolean;
    isGenerated: boolean;
    isGeospatial: boolean;
    isHidden: boolean;
    isPresentOnPublishedDatasource: boolean;
}
export interface FieldInstance extends FieldBase {
    fieldId: string;
}
export interface Field extends FieldBase {
    id: string;
}
export interface JoinDescription extends Model {
    tables: Array<TableInfo>;
}
export interface TableInfos extends Model {
    tables: Array<TableInfo>;
}
export interface TableInfo extends Model {
    name: string;
    id: string;
    customSQL: string | undefined;
    connectionClassName: string | undefined;
    connectionId: string;
}
export interface ConnectionDescriptionSummary extends Model {
    name: string;
    id: string;
    type: string;
    serverURI: string;
}
export declare type WorksheetField = Field;
export interface WorksheetDataSourceInfo extends Model {
    primaryDataSource: string;
    referencedDataSourceList: Array<string>;
}
export interface LogicalTableInfo extends Model {
    id: string;
    caption: string;
}
export interface InternalTableauError extends Error {
    errorCode: Enums.ErrorCodes;
}
export interface Filter extends Model {
    filterType: Enums.FilterType;
    fieldCaption: string;
    fieldName: string;
    visualId: VisualId;
}
export interface CategoricalFilter extends Filter {
    values: Array<DataValue>;
    isExclude: boolean;
    isAllSelected?: boolean;
}
export interface HierarchicalFilter extends Filter {
    dimensionName: string;
    hierarchyCaption: string;
    values: Array<HierarchicalDataValue>;
    levels: number;
    levelInfo: Array<HierarchicalLevelInfo>;
    isAllSelected: boolean;
}
export interface HierarchicalDataValue {
    value: DataValue;
    hierarchicalPath: string;
    level: number;
}
export interface HierarchicalLevelInfo {
    name: string;
    levelSelectionState: Enums.HierarchicalLevelSelectionState;
}
export interface RangeFilter extends Filter {
    min: DataValue;
    max: DataValue;
    includeNullValues: boolean;
}
export interface RelativeDateFilter extends Filter {
    anchorDate: DataValue;
    periodType: Enums.DateStepPeriod;
    rangeType: Enums.DateRangeType;
    rangeN: number;
}
export interface CategoricalDomain {
    values: Array<DataValue>;
}
export interface RangeDomain {
    min: DataValue;
    max: DataValue;
}
export interface TestConversionModel {
    value: number;
}
export interface EmbeddingBootstrapInfo {
    workbookName: string;
    currWorksheetName: string;
    oldSheetName?: string;
    publishedSheets: Array<EmbeddingSheetInfo>;
    dashboardZones: Array<DashboardZone>;
    platformVersion: VersionNumber;
    canDownloadWorkbook: boolean;
    story?: StoryModel;
}
export interface EmbeddingPulseBootstrapInfo {
    iframeTitle: string;
}
export interface SizeConstraint {
    minWidth: number;
    minHeight: number;
    maxWidth: number;
    maxHeight: number;
}
export interface WorkbookPublishedAsModel {
    newUrl: string;
}
export interface ToolbarState {
    canRedo: boolean;
    canUndo: boolean;
}
export interface UrlActionModel extends Model {
    url: string;
    target: string;
}
export interface SharedFilterWorksheetModel extends Model {
    worksheetName: string;
    isActive: boolean;
    isEnabled: boolean;
    isSelected: boolean;
}
export interface SharedFilterModel extends Model {
    worksheets: Array<SharedFilterWorksheetModel>;
}
export interface UserModel extends Model {
    userId: number;
    userName: string;
    userFriendlyName: string;
}
export interface CustomViewModel extends Model {
    id?: number;
    name: string;
    urlId: string;
    url: string;
    startViewId: string;
    shared: boolean;
    owner: UserModel;
    luid: string;
    isDefault: boolean;
}
export interface CustomViewInfoModel extends Model {
    currentView?: CustomViewModel;
    customViewsList: Array<CustomViewModel>;
}
export interface StoryModel extends Model {
    activeStoryPointIndex: number;
    storyPoints: Array<StoryPointModel>;
}
export interface StoryPointModel extends Model {
    caption: string;
    index: number;
    updated: boolean;
    storyPointId: number;
    containedSheetInfo?: ContainedSheetInfoModel;
}
export interface EmbeddingAbstractQuery {
    abstractQuery: string;
}
export declare type ExportCrosstabSheetMap = {
    [key: string]: string;
};
export declare type ScalingSelection = Enums.FitPages | Enums.PageScalingOption;
export interface ExportFile extends Model {
    resultKey: string;
    hasUserSpecificContent: boolean;
}
export interface ExportLayoutOptions extends Model {
    pageSizeOption: Enums.PageSizeOption;
    pageOrientationOption: Enums.PageOrientation;
    pageScaleMode: Enums.ScaleMode;
    pageScalePercent: number;
    pageFitHorizontal: number;
    pageFitVertical: number;
    imageHeight: number;
    imageWidth: number;
}
export interface SheetModel extends Model {
    sheet: string;
    isDashboard: boolean;
    isStory: boolean;
    namesOfSubsheets: string[];
}
export interface ServerSheetModel extends SheetModel {
    isPublished: boolean;
    baseViewThumbLink: string;
}
export interface PDFSheet extends ServerSheetModel {
    isSelected: boolean;
    exportLayoutOptions: ExportLayoutOptions;
}
export interface ExportPDFOptions extends Model {
    currentSheet: string;
    exportLayoutOptions: ExportLayoutOptions;
    sheetOptions: PDFSheet[];
}
export interface VisualSpecification {
    rowFields: FieldInstance[];
    columnFields: FieldInstance[];
    activeMarksSpecificationIndex: number;
    marksSpecifications: MarksSpecification[];
}
export interface MarksSpecification {
    primitiveType: Enums.MarkType;
    encodings: Encoding[];
}
export interface Encoding {
    id: string;
    fieldEncodingId: string;
    type: Enums.EncodingType;
    field: FieldInstance;
}
export interface TooltipTextRequest extends Model {
    visualIdPresModel: VisualId;
    tupleId: number;
}
export interface SelectTuplesInteraction extends Model {
    visualIdPresModel: VisualId;
    tupleIds: Array<number>;
    selectOptions: Enums.SelectOptions;
    tooltipContext?: TooltipContext;
}
export interface HoverTupleInteraction extends Model {
    visualIdPresModel: VisualId;
    tupleId: number;
    tooltipContext?: TooltipContext | null;
    allowHoverActions?: boolean;
}
export interface TooltipContext extends Model {
    tooltipAnchorPoint: Point;
}
export interface Point extends Model {
    x: number;
    y: number;
}
/**
 * A PulseFieldValueArray is an array that can contain strings, booleans, or nulls, but will never contain both strings and booleans at the same time.
 */
export declare type PulseFieldValueArray = Array<boolean | null> | Array<string | null>;
//# sourceMappingURL=Models.d.ts.map