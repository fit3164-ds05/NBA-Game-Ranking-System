{"version":3,"file":"StackingVersionConverter.js","sourceRoot":"","sources":["../../../src/versioning/StackingVersionConverter.ts"],"names":[],"mappings":";;AAIA,wBAAwB;AAExB;;;;;;;GAOG;AACH;IA0BE;;;;;;;;OAQG;IACH,kCACU,qBAA6B,EAC7B,qBAA6B,EAC7B,2BAAmE,EACnE,6BAAyE,EACzE,kCAA6E;QAJ7E,0BAAqB,GAArB,qBAAqB,CAAQ;QAC7B,0BAAqB,GAArB,qBAAqB,CAAQ;QAC7B,gCAA2B,GAA3B,2BAA2B,CAAwC;QACnE,kCAA6B,GAA7B,6BAA6B,CAA4C;QACzE,uCAAkC,GAAlC,kCAAkC,CAA2C;QAErF,IAAI,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,EAAE;YAC3D,MAAM,IAAI,KAAK,CAAC,6CAA2C,IAAI,CAAC,qBAAqB,aAAQ,IAAI,CAAC,qBAAuB,CAAC,CAAC;SAC5H;IACH,CAAC;IA5CD;;;;;;;;OAQG;IACW,iCAAQ,GAAtB,UACE,eAA8B,EAC9B,eAA8B,EAC9B,0BAAkE,EAClE,4BAAwE,EACxE,iCAA4E;QAE5E,OAAO,IAAI,IAAI,CACb,eAAe,CAAC,KAAK,EACrB,eAAe,CAAC,KAAK,EACrB,0BAA0B,EAC1B,4BAA4B,EAC5B,iCAAiC,CAClC,CAAC;IACJ,CAAC;IAuBM,qDAAkB,GAAzB,UAA0B,IAAS,EAAE,UAAe;QAClD,qFAAqF;QACrF,IAAI,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;QACtD,KAAiC,UAAgC,EAAhC,KAAA,IAAI,CAAC,2BAA2B,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;YAA9D,IAAM,kBAAkB,SAAA;YAC3B,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;SACnE;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,yDAAsB,GAA7B,UAA8B,eAAgC;QAC5D,kEAAkE;QAClE,IAAI,UAAU,GAAG,eAAe,CAAC;QACjC,KAAmC,UAAkC,EAAlC,KAAA,IAAI,CAAC,6BAA6B,EAAlC,cAAkC,EAAlC,IAAkC,EAAE;YAAlE,IAAM,oBAAoB,SAAA;YAC7B,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;SAC/C;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAEM,wDAAqB,GAA5B,UAA6B,YAA0B;QACrD,sEAAsE;QACtE,IAAI,UAAU,GAAG,YAAY,CAAC;QAC9B,KAAmC,UAAuC,EAAvC,KAAA,IAAI,CAAC,kCAAkC,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;YAAvE,IAAM,oBAAoB,SAAA;YAC7B,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;SAC/C;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IACH,+BAAC;AAAD,CAAC,AA5ED,IA4EC;AA5EY,4DAAwB","sourcesContent":["import { ExecuteParameters, ExecuteResponse, Notification, VerbId, VersionNumber } from '../JsApiInternalContract';\nimport { InternalContractVersionConverter } from './InternalContractVersionConverter';\nimport * as Translations from './VersionTranslations';\n\n// tslint:disable:no-any\n\n/**\n * The version converter is designed to allow the platform and external modules\n * to seemlessly communicate over two different versions of the internal API. The only\n * mode it supports is external's version <= platform's version. When executing\n * commands, it is used to upgrade the external representation to what platform knows on the way in\n * and downgrade the representations on the way out. Similarly for notifications, it can\n * downgrade those on the way from platform to external.\n */\nexport class StackingVersionConverter implements InternalContractVersionConverter {\n  /**\n   * Creates a new instance of the StackingVersionConverter\n   *\n   * @param _externalVersion The version of the internal contract api-external-js is using\n   * @param _platformVersion The version of the internal contract the api-platform-js is using\n   * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters\n   * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd\n   * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification\n   */\n  public static fromData(\n    externalVersion: VersionNumber,\n    platformVersion: VersionNumber,\n    upgradeExecuteTranslations: Array<Translations.UpgradeExecuteCall>,\n    downgradeExecuteTranslations: Array<Translations.DowngradeExecuteReturn>,\n    downgradeNotificationTranslations: Array<Translations.DowngradeNotification>,\n  ): StackingVersionConverter {\n    return new this(\n      externalVersion.major,\n      platformVersion.major,\n      upgradeExecuteTranslations,\n      downgradeExecuteTranslations,\n      downgradeNotificationTranslations,\n    );\n  }\n\n  /**\n   * Creates a new instance of the StackingVersionConverter\n   *\n   * @param _externalMajorVersion The major version of the internal contract api-external-js is using\n   * @param _platformMajorVersion The major version of the internal contract the api-platform-js is using\n   * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters\n   * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd\n   * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification\n   */\n  public constructor(\n    private _externalMajorVersion: number,\n    private _platformMajorVersion: number,\n    private _upgradeExecuteTranslations: Array<Translations.UpgradeExecuteCall>,\n    private _downgradeExecuteTranslations: Array<Translations.DowngradeExecuteReturn>,\n    private _downgradeNotificationTranslations: Array<Translations.DowngradeNotification>,\n  ) {\n    if (this._externalMajorVersion > this._platformMajorVersion) {\n      throw new Error(`Cannot convert between external version ${this._externalMajorVersion} and ${this._platformMajorVersion}`);\n    }\n  }\n\n  public upgradeExecuteCall(verb: any, parameters: any): { verb: VerbId; parameters: ExecuteParameters } {\n    // Perform the upgrade of the verb and parameters to the level that platform is using\n    let upgraded = { verb: verb, parameters: parameters };\n    for (const upgradeTranslation of this._upgradeExecuteTranslations) {\n      upgraded = upgradeTranslation(upgraded.verb, upgraded.parameters);\n    }\n\n    return upgraded;\n  }\n\n  public downgradeExecuteReturn(executeResponse: ExecuteResponse): ExecuteResponse {\n    // Downgrade the response to what the external module is expecting\n    let downgraded = executeResponse;\n    for (const downgradeTranslation of this._downgradeExecuteTranslations) {\n      downgraded = downgradeTranslation(downgraded);\n    }\n\n    return downgraded;\n  }\n\n  public downgradeNotification(notification: Notification): Notification {\n    // Downgrade the notification to what the external module is expecting\n    let downgraded = notification;\n    for (const downgradeTranslation of this._downgradeNotificationTranslations) {\n      downgraded = downgradeTranslation(downgraded);\n    }\n\n    return downgraded;\n  }\n}\n"]}