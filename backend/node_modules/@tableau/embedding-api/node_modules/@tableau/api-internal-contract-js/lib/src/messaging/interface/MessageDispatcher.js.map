{"version":3,"file":"MessageDispatcher.js","sourceRoot":"","sources":["../../../../src/messaging/interface/MessageDispatcher.ts"],"names":[],"mappings":"","sourcesContent":["import { ExecuteParameters, Model, NotificationId, VerbId, VersionNumber } from '../../JsApiInternalContract';\nimport { InitializationOptions } from '../../interface/InitializationOptions';\nimport { PreparedMessage } from './PreparedMessage';\n\n/**\n * This interface defines an object which can prepare different messages to send to a target.\n *\n * @interface MessageDispatcher\n */\nexport interface MessageDispatcher {\n  prepareInitializationMessage(\n    apiVersion: VersionNumber,\n    crossFrameVersion: VersionNumber,\n    options?: InitializationOptions,\n  ): PreparedMessage;\n  prepareCommandMessage(verbId: VerbId, parameters: ExecuteParameters): PreparedMessage;\n  prepareCommandResponseMessage(commandGuid: string, data: Model | undefined, error: Model | undefined): PreparedMessage;\n  prepareNotificationMessage(notificationId: NotificationId, data: Model): PreparedMessage;\n}\n"]}