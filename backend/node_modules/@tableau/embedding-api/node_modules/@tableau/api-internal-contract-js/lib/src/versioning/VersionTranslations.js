"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Notifications_1 = require("../contract/Notifications");
// This is where we will start to define some of these translations.
// When modifying existing models, add the requisite conversion functions here, then use them
// in the VersionConverterFactory implementation. Import old versions as you would any other module
// 0 <-> Translations
// Uncomment this line to import from the V0 definition of the API
// import * as V0 from '@tableau-api-internal-contract-js_v0';
// 1 <-> 2 Translations
// Uncomment this line to import from the V1 definition of the API
// import * as V1 from '@tableau-api-internal-contract-js_v1';
function DowngradeWorksheetNames(executeResponse) {
    // Fix the dashboard friendly name issue. The structures are compatible,
    // so we still return the original reply, but we copy the SheetInfo.name
    // into the DashboardZone.name, where v1 wants to find it.
    var bootstrapInfo = executeResponse.result;
    if (bootstrapInfo.extensionDashboardInfo !== undefined) {
        bootstrapInfo.extensionDashboardInfo.zones.forEach(function (zone) {
            if (zone.sheetInfo) {
                zone.name = zone.sheetInfo.name;
            }
        });
    }
    return executeResponse;
}
exports.DowngradeWorksheetNames = DowngradeWorksheetNames;
function DowngradeFlipboardZoneID(notification) {
    // Fix the FlipboardZoneId issue. Older external versions still check for flipboardZoneIDs.
    // When running against a newer server, if flipboardZoneId is absent, set it to default(0).
    if (notification.notificationId === Notifications_1.NotificationId.SelectedMarksChanged) {
        var visualModel = notification.data;
        if (visualModel.flipboardZoneID === undefined) {
            visualModel.flipboardZoneID = 0;
        }
    }
    return notification;
}
exports.DowngradeFlipboardZoneID = DowngradeFlipboardZoneID;
// Filter out formatting sheets that are specified in the classNames list
function DowngradeWorksheetFormatting(executeResponse, classNames) {
    var _a, _b;
    var bootstrapInfo = executeResponse.result;
    if ((_b = (_a = bootstrapInfo) === null || _a === void 0 ? void 0 : _a.extensionWorksheetInfo) === null || _b === void 0 ? void 0 : _b.formatting)
        bootstrapInfo.extensionWorksheetInfo.formatting.formattingSheets =
            bootstrapInfo.extensionWorksheetInfo.formatting.formattingSheets.filter(function (x) { return !classNames.includes(x.classNameKey); });
    return executeResponse;
}
// Filter out formatting sheets that are specified in the classNames list
// Filter out formatting sheets that are specified in the classNames list
function DowngradeWorksheetFormattingNotification(notification, classNames) {
    if (notification.notificationId === Notifications_1.NotificationId.WorksheetFormattingChanged) {
        var formatting = notification.data;
        notification.data = formatting.formattingSheets.filter(function (x) { return !classNames.includes(x.classNameKey); });
    }
    return notification;
}
// We added new enum values for ClassNameKeys enum in 176. Need to filter them out if the client version is <176
var ClassNameKeysToFilter175 = ["tableau-row-dividers" /* RowDividers */, "tableau-column-dividers" /* ColumnDividers */, "tableau-pane" /* Pane */];
exports.DowngradeWorksheetFomatting175 = function (response) {
    return DowngradeWorksheetFormatting(response, ClassNameKeysToFilter175);
};
exports.DowngradeWorksheetFomattingNotification175 = function (notification) {
    return DowngradeWorksheetFormattingNotification(notification, ClassNameKeysToFilter175);
};
//# sourceMappingURL=VersionTranslations.js.map