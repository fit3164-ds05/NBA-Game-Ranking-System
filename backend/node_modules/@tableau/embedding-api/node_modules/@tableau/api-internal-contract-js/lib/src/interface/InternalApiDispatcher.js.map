{"version":3,"file":"InternalApiDispatcher.js","sourceRoot":"","sources":["../../../src/interface/InternalApiDispatcher.ts"],"names":[],"mappings":"","sourcesContent":["import { Model } from '../contract/Models';\nimport { NotificationId } from '../contract/Notifications';\nimport { VerbId } from '../contract/Verbs';\nimport { VersionNumber } from './VersionNumber';\n\nexport type NotificationHandler = (notification: Notification) => void;\n\nexport interface ExecuteParameters {\n  [key: string]: Model;\n}\n\nexport interface ExecuteResponse {\n  result: Model;\n}\n\nexport interface Notification {\n  notificationId: NotificationId;\n  data: Model;\n}\n\nexport interface InternalApiDispatcher {\n  execute(verb: VerbId, parameters: ExecuteParameters): Promise<ExecuteResponse>;\n  registerNotificationHandler(handler: NotificationHandler): void;\n  unregisterNotificationHandler(handler: NotificationHandler): void;\n}\n\n// This factory function will get called from the external side of things to instantiate a properly\n// versioned API dispatcher which this particular version of external knows how to use\nexport type InternalApiDispatcherFactory = (internalContractVersion: VersionNumber) => InternalApiDispatcher;\n"]}