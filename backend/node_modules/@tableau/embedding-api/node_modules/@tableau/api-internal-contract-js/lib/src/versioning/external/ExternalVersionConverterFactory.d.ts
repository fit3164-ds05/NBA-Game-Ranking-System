import { VersionNumber } from '../../JsApiInternalContract';
import { MajorMinorTranslators } from '../VersionConverterFactory';
import { ExternalContractVersionConverter } from './ExternalContractVersionConverter';
import * as TranslationsExternal from './ExternalVersionTranslations';
export declare const ExecuteMinorDowngradeCallExternal: MajorMinorTranslators<TranslationsExternal.DowngradeExecuteCall>;
export declare const ExecuteMinorUpgradeReturnExternal: MajorMinorTranslators<TranslationsExternal.UpgradeExecuteReturn>;
export declare const ExecuteMinorUpgradeNotification: MajorMinorTranslators<TranslationsExternal.UpgradeNotification>;
/**
 * Creates a new ExternalContractVersionConverter which has the ability to upgrade and downgrade
 * the contract between the two versions which are specified. If externalMajorVersion is less than
 * platformMajorVersion, an ExternalIdentityVersionConverter will be returned.
 * Handles upgrade/downgrade for both major and minor updates.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
export declare function CreateExternalCompatibleVersionConverter(externalVersion: VersionNumber, platformVersion: VersionNumber): ExternalContractVersionConverter;
/**
 * Implementation of CreateExternalCompatibleVersionConverterWithTranslators.
 * This function takes the upgrade, downgrade arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal contract which the external module is using
 * @param platformVersion VersionNumber of the internal contract which the platform is using
 * @param upgrades MajorMinorTranslators for response upgrades
 * @param downgrades MajorMinorTranslators for execute call downgrades
 */
export declare function CreateExternalCompatibleVersionConverterWithTranslators(externalVersion: VersionNumber, platformVersion: VersionNumber, downgrades: MajorMinorTranslators<TranslationsExternal.DowngradeExecuteCall>, upgrades: MajorMinorTranslators<TranslationsExternal.UpgradeExecuteReturn>, upgradeNotifications: MajorMinorTranslators<TranslationsExternal.UpgradeNotification>): ExternalContractVersionConverter;
//# sourceMappingURL=ExternalVersionConverterFactory.d.ts.map