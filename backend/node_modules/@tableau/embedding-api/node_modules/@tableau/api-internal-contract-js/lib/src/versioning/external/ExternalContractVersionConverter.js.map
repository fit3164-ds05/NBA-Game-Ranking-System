{"version":3,"file":"ExternalContractVersionConverter.js","sourceRoot":"","sources":["../../../../src/versioning/external/ExternalContractVersionConverter.ts"],"names":[],"mappings":"","sourcesContent":["import { ExecuteParameters, ExecuteResponse, Notification, VerbId } from '../../JsApiInternalContract';\n\n// We need to disable any because these methods need to be generic\n// tslint:disable:no-any\n\nexport interface ExternalContractVersionConverter {\n  /**\n   * This function is called when we receive a newer verb and parameters from external\n   * and need to downgrade it for an older platform\n   */\n  downgradeExecuteCall(verb: any, parameters: any): { verb: VerbId; parameters: ExecuteParameters };\n\n  /**\n   * This function is called when we receive a response back from an older platform and we need\n   * to upgrade it to a newer external. The verb and parameters provide context to be able to make\n   * decisions on what we need to do.\n   */\n  upgradeExecuteReturn(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse;\n\n  /** This function is called when we receive a notification from platform and we need to upgrade it to external's version */\n  upgradeNotification(notification: Notification): Notification;\n}\n"]}