{"version":3,"file":"ExternalStackingVersionConverter.js","sourceRoot":"","sources":["../../../../src/versioning/external/ExternalStackingVersionConverter.ts"],"names":[],"mappings":";;AAIA,wBAAwB;AACxB;;;;;;GAMG;AACH;IACE;;;;;;;;OAQG;IACH,0CACU,gBAA+B,EAC/B,gBAA+B,EAC/B,iCAA2E,EAC3E,iCAA2E,EAC3E,gCAAyE;QAJzE,qBAAgB,GAAhB,gBAAgB,CAAe;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAe;QAC/B,sCAAiC,GAAjC,iCAAiC,CAA0C;QAC3E,sCAAiC,GAAjC,iCAAiC,CAA0C;QAC3E,qCAAgC,GAAhC,gCAAgC,CAAyC;QAEjF,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,6CAA2C,IAAI,CAAC,gBAAgB,CAAC,KAAK,oBAChF,IAAI,CAAC,gBAAgB,CAAC,KAAO,CAAC,CAAC;SACtC;IACH,CAAC;IAEM,+DAAoB,GAA3B,UAA4B,IAAS,EAAE,UAAe;QACpD,uFAAuF;QACvF,IAAI,UAAU,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;QACxD,KAAmC,UAAsC,EAAtC,KAAA,IAAI,CAAC,iCAAiC,EAAtC,cAAsC,EAAtC,IAAsC,EAAE;YAAtE,IAAM,oBAAoB,SAAA;YAC7B,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;SAC3E;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAEM,+DAAoB,GAA3B,UAA4B,eAAgC,EAAE,IAAY,EAAE,UAA6B;QACvG,+EAA+E;QAC/E,IAAI,QAAQ,GAAG,eAAe,CAAC;QAC/B,KAAiC,UAAsC,EAAtC,KAAA,IAAI,CAAC,iCAAiC,EAAtC,cAAsC,EAAtC,IAAsC,EAAE;YAApE,IAAM,kBAAkB,SAAA;YAC3B,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;SAC3D;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,8DAAmB,GAA1B,UAA2B,YAA0B;QACnD,+EAA+E;QAC/E,IAAI,QAAQ,GAAG,YAAY,CAAC;QAC5B,KAAkC,UAAqC,EAArC,KAAA,IAAI,CAAC,gCAAgC,EAArC,cAAqC,EAArC,IAAqC,EAAE;YAApE,IAAM,mBAAmB,SAAA;YAC5B,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;SAC1C;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IACH,uCAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,4EAAgC","sourcesContent":["import { ExecuteParameters, ExecuteResponse, Notification, VerbId, VersionNumber } from '../../JsApiInternalContract';\nimport { ExternalContractVersionConverter } from './ExternalContractVersionConverter';\nimport * as Translations from './ExternalVersionTranslations';\n\n// tslint:disable:no-any\n/**\n * The version converter is designed to allow the platform and external modules\n * to seemlessly communicate over two different versions of the internal API. This converter\n * supports external's version(minor) >= platform's version(minor). When executing\n * commands, it is used to downgrade the external representation to what platform knows on the way in\n * and upgrade the representations on the way out.\n */\nexport class ExternalStackingVersionConverter implements ExternalContractVersionConverter {\n  /**\n   * Creates a new instance of the StackingVersionConverter\n   *\n   * @param _externalVersion The version of the internal contract api-external-js is using\n   * @param _platformVersion The version of the internal contract the api-platform-js is using\n   * @param _downgradeExecuteCallTranslations Ordered list of the translations to perform when downgrading cmd parameters\n   * @param _upgradeExecuteReturnTranslations Ordered list of upgrade translations to perform after a cmd is executed\n   * @param _upgradeNotificationTranslations Ordered list of upgrade notfications to perform on events\n   */\n  public constructor(\n    private _externalVersion: VersionNumber,\n    private _platformVersion: VersionNumber,\n    private _downgradeExecuteCallTranslations: Array<Translations.DowngradeExecuteCall>,\n    private _upgradeExecuteReturnTranslations: Array<Translations.UpgradeExecuteReturn>,\n    private _upgradeNotificationTranslations: Array<Translations.UpgradeNotification>,\n  ) {\n    if (this._externalVersion.major > this._platformVersion.major) {\n      throw new Error(`Cannot convert between external version ${this._externalVersion.major}\n      and ${this._platformVersion.major}`);\n    }\n  }\n\n  public downgradeExecuteCall(verb: any, parameters: any): { verb: VerbId; parameters: ExecuteParameters } {\n    // Perform the downgrade of the verb and parameters to the level that platform is using\n    let downgraded = { verb: verb, parameters: parameters };\n    for (const downgradeTranslation of this._downgradeExecuteCallTranslations) {\n      downgraded = downgradeTranslation(downgraded.verb, downgraded.parameters);\n    }\n\n    return downgraded;\n  }\n\n  public upgradeExecuteReturn(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse {\n    // Perform the upgrade of the response to what the external module is expecting\n    let upgraded = executeResponse;\n    for (const upgradeTranslation of this._upgradeExecuteReturnTranslations) {\n      upgraded = upgradeTranslation(upgraded, verb, parameters);\n    }\n\n    return upgraded;\n  }\n\n  public upgradeNotification(notification: Notification): Notification {\n    // Perform the upgrade of notification to what the external module is expecting\n    let upgraded = notification;\n    for (const upgradeNotification of this._upgradeNotificationTranslations) {\n      upgraded = upgradeNotification(upgraded);\n    }\n\n    return upgraded;\n  }\n}\n"]}