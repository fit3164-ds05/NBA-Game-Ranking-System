import { ExecuteParameters, Model, NotificationId, VerbId, VersionNumber } from '../../JsApiInternalContract';
import { InitializationOptions } from '../../interface/InitializationOptions';
import { PreparedMessage } from './PreparedMessage';
/**
 * This interface defines an object which can prepare different messages to send to a target.
 *
 * @interface MessageDispatcher
 */
export interface MessageDispatcher {
    prepareInitializationMessage(apiVersion: VersionNumber, crossFrameVersion: VersionNumber, options?: InitializationOptions): PreparedMessage;
    prepareCommandMessage(verbId: VerbId, parameters: ExecuteParameters): PreparedMessage;
    prepareCommandResponseMessage(commandGuid: string, data: Model | undefined, error: Model | undefined): PreparedMessage;
    prepareNotificationMessage(notificationId: NotificationId, data: Model): PreparedMessage;
}
//# sourceMappingURL=MessageDispatcher.d.ts.map