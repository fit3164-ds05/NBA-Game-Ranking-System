{"version":3,"file":"ExternalVersionConverterFactory.js","sourceRoot":"","sources":["../../../../src/versioning/external/ExternalVersionConverterFactory.ts"],"names":[],"mappings":";;AACA,sEAAyG;AAEzG,uFAAsF;AACtF,uFAAsF;AAEtF,6EAAsG;AAEtG,+GAA+G;AAC/G,2EAA2E;AAC3E,4GAA4G;AAC5G,wBAAwB;AACxB,oHAAoH;AACpH,mGAAmG;AACtF,QAAA,iCAAiC,GAAqE;IACjH,CAAC,EAAE;QACD,CAAC,EAAE,EAAE;KACN;CACF,CAAC;AAEW,QAAA,iCAAiC,GAAqE;IACjH,CAAC,EAAE;QACD,CAAC,EAAE,CAAC,mDAAqB,CAAC;QAC1B,EAAE,EAAE,CAAC,4DAA8B,CAAC;KACrC;CACF,CAAC;AAEW,QAAA,+BAA+B,GAAoE;IAC9G,CAAC,EAAE;QACD,CAAC,EAAE,EAAE;KACN;CACF,CAAC;AAEF;;;;;;;;GAQG;AACH,SAAgB,wCAAwC,CACtD,eAA8B,EAC9B,eAA8B;IAE9B,OAAO,uDAAuD,CAC5D,eAAe,EACf,eAAe,EACf,yCAAiC,EACjC,yCAAiC,EACjC,uCAA+B,CAChC,CAAC;AACJ,CAAC;AAXD,4FAWC;AAED;;;;;;;;GAQG;AACH,SAAgB,uDAAuD,CACrE,eAA8B,EAC9B,eAA8B,EAC9B,UAA4E,EAC5E,QAA0E,EAC1E,oBAAqF;IAErF,IAAM,oBAAoB,GAAW,eAAe,CAAC,KAAK,CAAC;IAC3D,IAAM,oBAAoB,GAAW,eAAe,CAAC,KAAK,CAAC;IAC3D,IAAM,oBAAoB,GAAW,eAAe,CAAC,KAAK,CAAC;IAE3D,0FAA0F;IAC1F,mEAAmE;IACnE,IAAI,oBAAoB,GAAG,oBAAoB,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAC,gGACO,oBAAoB,8BAAyB,oBAAsB,CAAC,CAAC;KAC7F;IAED,IAAI,oBAAoB,GAAG,oBAAoB,IAAI,wCAAc,CAAC,eAAe,EAAE,eAAe,CAAC,EAAE;QACnG,OAAO,IAAI,mEAAgC,EAAE,CAAC;KAC/C;IAED,mGAAmG;IACnG,IAAM,0BAA0B,GAAqD,6BAA6B,CAChH,oBAAoB,EACpB,oBAAoB,EACpB,UAAU,CACX,CAAC;IAEF,IAAM,2BAA2B,GAAqD,6BAA6B,CACjH,oBAAoB,EACpB,oBAAoB,EACpB,QAAQ,CACT,CAAC;IAEF,IAAM,0BAA0B,GAAoD,6BAA6B,CAC/G,oBAAoB,EACpB,oBAAoB,EACpB,oBAAoB,CACrB,CAAC;IAEF,gHAAgH;IAChH,0BAA0B,CAAC,OAAO,EAAE,CAAC;IACrC,OAAO,IAAI,mEAAgC,CACzC,eAAe,EACf,eAAe,EACf,0BAA0B,EAC1B,2BAA2B,EAC3B,0BAA0B,CAC3B,CAAC;AACJ,CAAC;AAlDD,0HAkDC;AAED,SAAS,6BAA6B,CACpC,oBAA4B,EAC5B,oBAA4B,EAC5B,qBAA+C;IAE/C,IAAM,kBAAkB,GAAa,EAAE,CAAC;IAExC,IAAI,oBAAoB,IAAI,qBAAqB,EAAE;QACjD,IAAM,KAAK,GAAG,oBAAoB,CAAC;QACnC,IAAM,mBAAmB,GAAG,8CAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC3G,KAAK,IAAI,KAAK,GAAG,KAAK,EAAE,KAAK,IAAI,mBAAmB,EAAE,KAAK,EAAE,EAAE;YAC7D,IAAI,KAAK,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,EAAE;gBACxD,kBAAkB,CAAC,IAAI,OAAvB,kBAAkB,EAAS,qBAAqB,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,EAAE;aAChF;SACF;KACF;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["import { VersionNumber } from '../../JsApiInternalContract';\nimport { GetMaximumMinorIndex, MajorMinorTranslators, VersionEqualTo } from '../VersionConverterFactory';\nimport { ExternalContractVersionConverter } from './ExternalContractVersionConverter';\nimport { ExternalIdentityVersionConverter } from './ExternalIdentityVersionConverter';\nimport { ExternalStackingVersionConverter } from './ExternalStackingVersionConverter';\nimport * as TranslationsExternal from './ExternalVersionTranslations';\nimport { UpgradeDataTableRowsAndColumns, UpgradeDataTableTypes } from './ExternalVersionTranslations';\n\n// A mapping from the current client version of internal-contract to an older platform version of the contract.\n// Each version bump can have an array of translations to perform in order.\n// These translations handle downgradeExecuteCall and upgradeExecuteReturn and are meant to be called on the\n// client/external side.\n// When updating the major or minor version of our internal-contract, you will need to update these data structures.\n// * If there are translations to add, add them to the version to 'upgrade from' or 'downgrade to'.\nexport const ExecuteMinorDowngradeCallExternal: MajorMinorTranslators<TranslationsExternal.DowngradeExecuteCall> = {\n  1: {\n    9: [], // Note that we put downgrades from 1.10 to 1.9 in the [1][9] bucket\n  },\n};\n\nexport const ExecuteMinorUpgradeReturnExternal: MajorMinorTranslators<TranslationsExternal.UpgradeExecuteReturn> = {\n  1: {\n    9: [UpgradeDataTableTypes], // Note that we put upgrades from 1.9 to 1.10 in the [1][9] bucket\n    29: [UpgradeDataTableRowsAndColumns], // 2021.1 was released with 1.29. Upgrade from 1.29 in the [1][29] bucket\n  },\n};\n\nexport const ExecuteMinorUpgradeNotification: MajorMinorTranslators<TranslationsExternal.UpgradeNotification> = {\n  1: {\n    9: [], // Note that we put upgrades from 1.9 to 1.10 in the [1][9] bucket\n  },\n};\n\n/**\n * Creates a new ExternalContractVersionConverter which has the ability to upgrade and downgrade\n * the contract between the two versions which are specified. If externalMajorVersion is less than\n * platformMajorVersion, an ExternalIdentityVersionConverter will be returned.\n * Handles upgrade/downgrade for both major and minor updates.\n *\n * @param externalVersion VersionNumber of the internal api which the external module is using\n * @param platformVersion VersionNumber of the internal api which the platform is using\n */\nexport function CreateExternalCompatibleVersionConverter(\n  externalVersion: VersionNumber,\n  platformVersion: VersionNumber,\n): ExternalContractVersionConverter {\n  return CreateExternalCompatibleVersionConverterWithTranslators(\n    externalVersion,\n    platformVersion,\n    ExecuteMinorDowngradeCallExternal,\n    ExecuteMinorUpgradeReturnExternal,\n    ExecuteMinorUpgradeNotification,\n  );\n}\n\n/**\n * Implementation of CreateExternalCompatibleVersionConverterWithTranslators.\n * This function takes the upgrade, downgrade arrays so that all the logic can be tested.\n *\n * @param externalVersion VersionNumber of the internal contract which the external module is using\n * @param platformVersion VersionNumber of the internal contract which the platform is using\n * @param upgrades MajorMinorTranslators for response upgrades\n * @param downgrades MajorMinorTranslators for execute call downgrades\n */\nexport function CreateExternalCompatibleVersionConverterWithTranslators(\n  externalVersion: VersionNumber,\n  platformVersion: VersionNumber,\n  downgrades: MajorMinorTranslators<TranslationsExternal.DowngradeExecuteCall>,\n  upgrades: MajorMinorTranslators<TranslationsExternal.UpgradeExecuteReturn>,\n  upgradeNotifications: MajorMinorTranslators<TranslationsExternal.UpgradeNotification>,\n): ExternalContractVersionConverter {\n  const externalMajorVersion: number = externalVersion.major;\n  const platformMajorVersion: number = platformVersion.major;\n  const platformMinorVersion: number = platformVersion.minor;\n\n  // This check is present in VersionConverterFactory. We throw the same error here as well.\n  // Hence we only need to check the minor versions for translations.\n  if (externalMajorVersion > platformMajorVersion) {\n    throw new Error(`External version must be less than or equal to platform version.\n    externalMajorVersion=${externalMajorVersion} platformMajorVersion=${platformMajorVersion}`);\n  }\n\n  if (externalMajorVersion < platformMajorVersion || VersionEqualTo(externalVersion, platformVersion)) {\n    return new ExternalIdentityVersionConverter();\n  }\n\n  // Walk the span between the versions we have here and collect the upgrade and downgrades necessary\n  const neededExecuteCallDowngrade: Array<TranslationsExternal.DowngradeExecuteCall> = GetNeededExternalTranslations(\n    platformMajorVersion,\n    platformMinorVersion,\n    downgrades,\n  );\n\n  const neededExecuteReturnUpgrades: Array<TranslationsExternal.UpgradeExecuteReturn> = GetNeededExternalTranslations(\n    platformMajorVersion,\n    platformMinorVersion,\n    upgrades,\n  );\n\n  const neededNotificationUpgrades: Array<TranslationsExternal.UpgradeNotification> = GetNeededExternalTranslations(\n    platformMajorVersion,\n    platformMinorVersion,\n    upgradeNotifications,\n  );\n\n  // Reverse the downgrade calls, so that we start the downgrade from the external version to the platform version\n  neededExecuteCallDowngrade.reverse();\n  return new ExternalStackingVersionConverter(\n    externalVersion,\n    platformVersion,\n    neededExecuteCallDowngrade,\n    neededExecuteReturnUpgrades,\n    neededNotificationUpgrades,\n  );\n}\n\nfunction GetNeededExternalTranslations<T>(\n  platformMajorVersion: number,\n  platformMinorVersion: number,\n  majorMinorTranslators: MajorMinorTranslators<T>,\n): Array<T> {\n  const neededTranslations: Array<T> = [];\n\n  if (platformMajorVersion in majorMinorTranslators) {\n    const start = platformMinorVersion;\n    const maximumMinorVersion = GetMaximumMinorIndex(Object.keys(majorMinorTranslators[platformMajorVersion]));\n    for (let minor = start; minor <= maximumMinorVersion; minor++) {\n      if (minor in majorMinorTranslators[platformMajorVersion]) {\n        neededTranslations.push(...majorMinorTranslators[platformMajorVersion][minor]);\n      }\n    }\n  }\n\n  return neededTranslations;\n}\n"]}