import { VersionNumber } from '../JsApiInternalContract';
import { InternalContractVersionConverter } from './InternalContractVersionConverter';
import * as Translations from './VersionTranslations';
/**
 * @returns true if lhs < rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
export declare function VersionLessThan(lhs: VersionNumber, rhs: VersionNumber): boolean;
/**
 * @returns true if lhs == rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
export declare function VersionEqualTo(lhs: VersionNumber, rhs: VersionNumber): boolean;
export interface MajorMinorTranslators<T> {
    [major: number]: {
        [minor: number]: Array<T>;
    };
}
export declare const ExecuteMinorUpgrades: MajorMinorTranslators<Translations.UpgradeExecuteCall>;
export declare const ExecuteMinorDowngrades: MajorMinorTranslators<Translations.DowngradeExecuteReturn>;
export declare const NotificationMinorDowngrades: MajorMinorTranslators<Translations.DowngradeNotification>;
/**
 * Creates a new InternalContractVersionConverter which has the ability to upgrade and downgrade the contract
 * between the two versions, which are specified. If externalMajorVersion is greater than platformMajorVersion,
 * an error will be thrown because we won't know how to do those conversions.
 * This converter can handle both major and minor updates when the platform version is greater than external version.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
export declare function CreateVersionConverter(externalVersion: VersionNumber, platformVersion: VersionNumber): InternalContractVersionConverter;
/**
 * Implementation of CreateVersionConverter. This function takes the upgrade, downgrade, and
 * notification arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 * @param upgrades MajorMinorTranslators for upgrades
 * @param downgrades MajorMinorTranslators for downgrades
 * @param notificationDowngrades MajorMinorTranslators for notification downgrades
 */
export declare function CreateVersionConverterWithTranslators(externalVersion: VersionNumber, platformVersion: VersionNumber, upgrades: MajorMinorTranslators<Translations.UpgradeExecuteCall>, downgrades: MajorMinorTranslators<Translations.DowngradeExecuteReturn>, notificationDowngrades: MajorMinorTranslators<Translations.DowngradeNotification>): InternalContractVersionConverter;
export declare function GetMaximumMinorIndex(minorVersions: Array<string>): number;
//# sourceMappingURL=VersionConverterFactory.d.ts.map