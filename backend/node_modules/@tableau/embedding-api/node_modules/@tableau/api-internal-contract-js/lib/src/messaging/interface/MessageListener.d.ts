import { CommandMessage, CommandResponseMessage, HandshakeMessage, InitializeMessage, NotificationMessage } from './MessageTypes';
import { PreparedMessage } from './PreparedMessage';
/**
 * Message handler types
 */
export declare type InitializeMessageHandler = (msg: InitializeMessage, source: MessageEventSource | null) => void;
export declare type CommandResponseMessageHandler = (msg: CommandResponseMessage, source: MessageEventSource | null) => void;
export declare type CommandMessageHandler = (msg: CommandMessage, source: MessageEventSource | null) => void;
export declare type NotificationMessageHandler = (msg: NotificationMessage, source: MessageEventSource | null) => void;
export declare type HandshakeMessageHandler = (msg: HandshakeMessage, source: MessageEventSource | null) => void;
/**
 * Interface to which defines a message listener. The Set*MessageHandler functions should be
 * called to handle specific message types. Nothing will happen until StartListening is called
 *
 * @interface MessageListener
 */
export interface MessageListener {
    startListening(): void;
    stopListening(): void;
    setInitializeMessageHandler(handler?: InitializeMessageHandler): void;
    setCommandResponseMessageHandler(handler?: CommandResponseMessageHandler): void;
    setCommandMessageHandler(handler?: CommandMessageHandler): void;
    setNotificationMessageHandler(handler?: NotificationMessageHandler): void;
    setHandshakeMessageHandler(handler?: HandshakeMessageHandler): void;
    setOtherWindow(otherWindow: Window): void;
    setOtherWindowOrigin(origin: string): void;
    prepareAckMessage(): PreparedMessage;
}
//# sourceMappingURL=MessageListener.d.ts.map