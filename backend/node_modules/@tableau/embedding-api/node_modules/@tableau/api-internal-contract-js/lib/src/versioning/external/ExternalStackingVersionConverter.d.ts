import { ExecuteParameters, ExecuteResponse, Notification, VerbId, VersionNumber } from '../../JsApiInternalContract';
import { ExternalContractVersionConverter } from './ExternalContractVersionConverter';
import * as Translations from './ExternalVersionTranslations';
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. This converter
 * supports external's version(minor) >= platform's version(minor). When executing
 * commands, it is used to downgrade the external representation to what platform knows on the way in
 * and upgrade the representations on the way out.
 */
export declare class ExternalStackingVersionConverter implements ExternalContractVersionConverter {
    private _externalVersion;
    private _platformVersion;
    private _downgradeExecuteCallTranslations;
    private _upgradeExecuteReturnTranslations;
    private _upgradeNotificationTranslations;
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _downgradeExecuteCallTranslations Ordered list of the translations to perform when downgrading cmd parameters
     * @param _upgradeExecuteReturnTranslations Ordered list of upgrade translations to perform after a cmd is executed
     * @param _upgradeNotificationTranslations Ordered list of upgrade notfications to perform on events
     */
    constructor(_externalVersion: VersionNumber, _platformVersion: VersionNumber, _downgradeExecuteCallTranslations: Array<Translations.DowngradeExecuteCall>, _upgradeExecuteReturnTranslations: Array<Translations.UpgradeExecuteReturn>, _upgradeNotificationTranslations: Array<Translations.UpgradeNotification>);
    downgradeExecuteCall(verb: any, parameters: any): {
        verb: VerbId;
        parameters: ExecuteParameters;
    };
    upgradeExecuteReturn(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse;
    upgradeNotification(notification: Notification): Notification;
}
//# sourceMappingURL=ExternalStackingVersionConverter.d.ts.map