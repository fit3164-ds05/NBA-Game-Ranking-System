import { ExecuteParameters, Model, NotificationId, VerbId, VersionNumber } from '../JsApiInternalContract';
import { InitializationOptions } from '../interface/InitializationOptions';
import { CommandMessageHandler, CommandResponseMessageHandler, HandshakeMessageHandler, InitializeMessageHandler, NotificationMessageHandler } from './interface/MessageListener';
import { Messenger } from './interface/Messenger';
import { PreparedMessage } from './interface/PreparedMessage';
/**
 * The CrossFrameMessenger is the primary export from the api-messaging module. An instance of
 * this class can be instantiated on both sides of a frame boundary to facilitate communication
 * in both directions between the frames. This class implements both the dispatcher and the listener
 * portions, but doesn't require callers to care about both.
 */
export declare class CrossFrameMessenger implements Messenger {
    private thisWindow;
    private otherWindow?;
    private otherWindowOrigin?;
    private unregisterFunction?;
    private initializeMessageHandler?;
    private commandResponseMessageHandler?;
    private commandMessageHandler?;
    private notificationMessageHandler?;
    private handshakeMessageHandler?;
    /**
     * Creates an instance of CrossFrameMessenger. If you would like to use the CrossFrameMessenger as a MessageListener,
     * be sure to call StartListening and register message handlers.
     * @param thisWindow The window object which the CrossFrameMessenger lives. An onMessage listener will be added here.
     * @param [otherWindow] Optional otherWindow which messages will be posted to.
     *                      If defined, incoming messages must originate from otherWindow to be passed on
     * @param [otherWindowOrigin] The target origin which otherWindow must have in order to receive dispatched messages.
     *                            This value will be sent as the targetOrigin of a postMessage
     *                            (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
     */
    constructor(thisWindow: Window, otherWindow?: Window | undefined, otherWindowOrigin?: string | undefined);
    startListening(): void;
    stopListening(): void;
    setInitializeMessageHandler(handler?: InitializeMessageHandler): void;
    setCommandResponseMessageHandler(handler?: CommandResponseMessageHandler): void;
    setCommandMessageHandler(handler?: CommandMessageHandler): void;
    setNotificationMessageHandler(handler?: NotificationMessageHandler): void;
    setHandshakeMessageHandler(handler?: HandshakeMessageHandler): void;
    /**
     * @param apiVersion api-internal-contract-js version (exported in JsApiInternalConntract)
     * @param crossFrameVersion crossframe messaging version (exported in JsApiInternalConntract)
     * @param options additional options that can be passed at initialization (information about the version of
     *                external being used for example)
     */
    prepareInitializationMessage(apiVersion: VersionNumber, crossFrameVersion: VersionNumber, options?: InitializationOptions): PreparedMessage;
    prepareCommandMessage(verbId: VerbId, parameters: ExecuteParameters): PreparedMessage;
    prepareCommandResponseMessage(commandGuid: string, data: Model | undefined, error: Model | undefined): PreparedMessage;
    prepareNotificationMessage(notificationId: NotificationId, data: Model): PreparedMessage;
    prepareAckMessage(): PreparedMessage;
    /**
     * Prepares a pending message for sending and returns the prepared message
     *
     * @param msg The message to be sent to this.otherWindow
     * @returns The prepared message
     */
    private prepareMessage;
    /**
     * Called when a message is received. Does some validation of the message, and then
     * calls an appropriate message handler if one is defined
     *
     * @param event The incoming MessageEvent
     */
    private onMessageReceived;
    setOtherWindow(otherWindow: Window): void;
    setOtherWindowOrigin(origin: string): void;
}
//# sourceMappingURL=CrossFrameMessenger.d.ts.map