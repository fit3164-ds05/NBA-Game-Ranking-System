import { ExecuteParameters, ExecuteResponse, Notification, VerbId } from '../../JsApiInternalContract';
/** This function is called when we receive newer version and parameters from the external before we send it to platform */
export declare type DowngradeExecuteCall = (verb: VerbId, parameters: ExecuteParameters) => {
    verb: VerbId;
    parameters: ExecuteParameters;
};
/** This function is called when we receive a response back from platform and we need to upgrade it to external's version
 *  The verb and parameters provide a context to decide how to handle the response.
 */
export declare type UpgradeExecuteReturn = (executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters) => ExecuteResponse;
/** This function is called when we receive a notification from platform and we need to upgrade it to external's version */
export declare type UpgradeNotification = (notification: Notification) => Notification;
/**
 * Prior to 2019.2 (internal-contract v1.9), DataValue.value were all strings.
 * Go through all DataValue objects. If we have a string, but the type should not be a string,
 * convert it to the correct type. The type of DataValue.value is 'any' in the contract, so
 * this change doesn't need any updates to classes or types.
 */
export declare function UpgradeDataTableTypes(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse;
/**
 * Prior to 2021.2 (internal-contract v1.29 and below), getSummaryDataAsync did not support maxRows,
 * and any get...DataAsync did not support columnsToIncludeById.
 * Trim result to maxRows if it is included in the parameters for getSummaryDataAsync
 * Trim columns to columnsToInclude if included in the parameters for any get...DataAsync
 */
export declare function UpgradeDataTableRowsAndColumns(executeResponse: ExecuteResponse, verb: VerbId, parameters: ExecuteParameters): ExecuteResponse;
//# sourceMappingURL=ExternalVersionTranslations.d.ts.map