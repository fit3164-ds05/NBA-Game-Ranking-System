{"version":3,"file":"ExportServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/ExportServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ExecuteParameters,\n  ExportCrosstabSheetMap,\n  ExportFile,\n  ExportPDFOptions as InternalExportPDFOptions,\n  ParameterId,\n  VerbId,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport {\n  CrosstabFileFormat,\n  ExportDataOptions,\n  ExportPDFOptions as ExternalExportPDFOptions,\n  ExportScenariosForPDFAndPowerPoint,\n  SharedErrorCodes,\n  SheetType as ExternalSheetType,\n} from '@tableau/api-external-contract-js';\nimport { ExternalToInternalEnumMappings } from '../../EnumMappings/ExternalToInternalEnumMappings';\nimport { ExportHelpers } from '../../Utils/ExportHelpers';\nimport { ExportService } from '../ExportService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ErrorHelpers } from '../../Utils/ErrorHelpers';\nimport { TableauError } from '../../TableauError';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class ExportServiceImpl extends ServiceImplBase implements ExportService {\n  public get serviceName(): string {\n    return ServiceNames.Export;\n  }\n\n  public getExportCrosstabSheetMapAsync(currentSheetType: ExternalSheetType): Promise<ExportCrosstabSheetMap> {\n    const verb = VerbId.GetExportCrosstabSheetMap;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getExportCrosstabSheetMapAsync',\n      [ParameterId.CurrentSheetType]: ExternalToInternalEnumMappings.sheetType.convert(currentSheetType),\n    };\n    return this.execute(verb, parameters).then<ExportCrosstabSheetMap>((response) => {\n      const result = response.result as ExportCrosstabSheetMap;\n      return result;\n    });\n  }\n\n  public async exportCrosstabAsync(\n    sheetName: string,\n    format: CrosstabFileFormat,\n    exportableWorksheetNames: Array<string>,\n    currentSheetType: ExternalSheetType,\n  ): Promise<ExportFile> {\n    ErrorHelpers.verifySheetName(exportableWorksheetNames, sheetName);\n    ErrorHelpers.verifyEnumValue<CrosstabFileFormat>(format, CrosstabFileFormat, 'CrosstabFileFormat');\n\n    // The pres layer command for exporting Crosstab uses SimpleSheetIdentifiers instead of sheet names.\n    // The extensions-and-embedding-api current does not store references to the SimpleSheetIdentifiers of its sheets\n    // so we call a pres layer command that gives us the SimpleSheetIdentifier for each sheet name that appears in the\n    // export Crosstab dialog popup.\n    const sheetNameToIdMap = await this.getExportCrosstabSheetMapAsync(currentSheetType);\n    if (!sheetNameToIdMap[sheetName]) {\n      throw new TableauError(SharedErrorCodes.InternalError, 'missing sheet doc id from sheetMap');\n    }\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'exportCrosstabAsync',\n      [ParameterId.SheetIdentifier]: sheetNameToIdMap[sheetName],\n      [ParameterId.SendNotifications]: true, // send notification on pres layer that triggers file download\n    };\n\n    // pres layer command invoked depends on the crosstab file format\n    let verb;\n    switch (format) {\n      case CrosstabFileFormat.CSV:\n        verb = VerbId.ExportCrosstabCsvDownload;\n        // CSV only parameter: see browser-clients/export-crosstab-options-dialog repo\n        parameters[ParameterId.UseTabDelimiters] = true;\n        break;\n      case CrosstabFileFormat.Excel:\n        verb = VerbId.ExportCrosstabExcelDownload;\n        break;\n      default:\n        throw new TableauError(SharedErrorCodes.InternalError, 'unsupported Crosstab file format.');\n    }\n\n    return this.execute(verb, parameters)\n      .then<ExportFile>((response) => {\n        const result = response.result as ExportFile;\n        return result;\n      })\n      .catch(() => {\n        throw new TableauError(SharedErrorCodes.CrosstabCreationError, 'An unexpected error occurred while generating the document.');\n      });\n  }\n\n  public exportDataAsync(visualId: VisualId, options: ExportDataOptions): Promise<void> {\n    ErrorHelpers.verifyExportDataOptions(options);\n\n    // Remove any duplicates from the input array\n    const columnsAsSet: Set<string> = new Set(options.columnsToIncludeById);\n    const columnsToIncludeById = Array.from(columnsAsSet);\n\n    const verb = VerbId.ExportDataDownload;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'exportDataAsync',\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.IgnoreAliases]: options.ignoreAliases ?? false,\n      [ParameterId.ColumnsToIncludeById]: columnsToIncludeById,\n    };\n\n    return this.execute(verb, parameters)\n      .then<void>(() => {})\n      .catch(() => {\n        throw new TableauError(SharedErrorCodes.DataCreationError, 'An unexpected error occurred while generating the document.');\n      });\n  }\n\n  public exportPowerPointAsync(sheetNames: Array<string>, exportScenarios: ExportScenariosForPDFAndPowerPoint): Promise<ExportFile> {\n    ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);\n\n    // Note: the ExportOriginUrl param is listed as optional for the pres layer command we are invoking; however,\n    // recent changes were made that enforced the use of the empty string when invoking this command with no ExportOriginUrl.\n    // see browser-clients/export-powerpoint-options-dialog repo.\n    const verb = VerbId.ExportPowerpointDownload;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'exportPowerPointAsync',\n      [ParameterId.ExportOriginUrl]: '',\n      [ParameterId.SelectedSheetNames]: sheetNames,\n    };\n\n    return this.execute(verb, parameters)\n      .then<ExportFile>((response) => {\n        const result = response.result as ExportFile;\n        return result;\n      })\n      .catch(() => {\n        throw new TableauError(\n          SharedErrorCodes.PowerPointCreationError,\n          'An error occured while attempting to generate the PowerPoint file.',\n        );\n      });\n  }\n\n  public async exportPDFAsync(\n    sheetNames: Array<string>,\n    externalExportPdfOptions: ExternalExportPDFOptions,\n    exportScenarios: ExportScenariosForPDFAndPowerPoint,\n  ): Promise<ExportFile> {\n    ErrorHelpers.verifyExportPDFOptions(externalExportPdfOptions);\n    ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);\n\n    const internalExportPdfOptions: InternalExportPDFOptions = await this.getExportPDFOptionsAsync();\n    ExportHelpers.updateInternalExportPDFOptions(internalExportPdfOptions, externalExportPdfOptions, sheetNames);\n\n    const verb = VerbId.ExportPdfDownload;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'exportPDFAsync',\n      [ParameterId.ExportPdfOptions]: internalExportPdfOptions,\n    };\n\n    return this.execute(verb, parameters)\n      .then<ExportFile>((response) => {\n        const result = response.result as ExportFile;\n        return result;\n      })\n      .catch(() => {\n        throw new TableauError(SharedErrorCodes.PDFCreationError, 'Unable to create PDF because something went wrong. Try again.');\n      });\n  }\n\n  public getExportPDFOptionsAsync(): Promise<InternalExportPDFOptions> {\n    const verb = VerbId.GetExportPdfOptions;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getExportPdfOptionsAsync',\n    };\n    return this.execute(verb, parameters).then<InternalExportPDFOptions>((response) => {\n      const result = response.result as InternalExportPDFOptions;\n      return result;\n    });\n  }\n}\n"]}