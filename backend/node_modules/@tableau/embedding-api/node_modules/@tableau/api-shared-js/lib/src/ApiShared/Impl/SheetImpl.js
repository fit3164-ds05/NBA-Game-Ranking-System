"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var ServiceRegistry_1 = require("../Services/ServiceRegistry");
var TableauError_1 = require("../TableauError");
var ErrorHelpers_1 = require("../Utils/ErrorHelpers");
var Param_1 = require("../Utils/Param");
var SheetUtils_1 = require("../Utils/SheetUtils");
var SheetImpl = /** @class */ (function () {
    function SheetImpl(_sheetInfoImpl, _registryId) {
        this._sheetInfoImpl = _sheetInfoImpl;
        this._registryId = _registryId;
    }
    Object.defineProperty(SheetImpl.prototype, "name", {
        get: function () {
            return this._sheetInfoImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetType", {
        get: function () {
            return this._sheetInfoImpl.sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetPath", {
        get: function () {
            return this._sheetInfoImpl.sheetPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "size", {
        get: function () {
            return this._sheetInfoImpl.sheetSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "hidden", {
        get: function () {
            if (this._sheetInfoImpl.isHidden !== undefined) {
                return this._sheetInfoImpl.isHidden;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "isHidden not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "active", {
        get: function () {
            if (this._sheetInfoImpl.isActive !== undefined) {
                return this._sheetInfoImpl.isActive;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "active not implemented");
        },
        set: function (active) {
            if (this._sheetInfoImpl.isActive !== undefined) {
                this._sheetInfoImpl.active = active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "index", {
        get: function () {
            if (this._sheetInfoImpl.index !== undefined) {
                return this._sheetInfoImpl.index;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "index not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "url", {
        get: function () {
            if (this._sheetInfoImpl.url !== undefined) {
                return this._sheetInfoImpl.url;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "url not implemented");
        },
        enumerable: true,
        configurable: true
    });
    SheetImpl.prototype.getSheetSize = function () {
        if (!SheetUtils_1.SheetUtils.isValidSheetSize(this.size)) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'size is not of type SheetSize');
        }
        return this.size;
    };
    SheetImpl.prototype.findParameterAsync = function (parameterName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(parameterName, 'parameterName');
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.findParameterByNameAsync(parameterName);
    };
    SheetImpl.prototype.getParametersAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.getParametersForSheetAsync(this.sheetPath);
    };
    SheetImpl.prototype.changeSizeAsync = function (newSize) {
        var _this = this;
        var invalidSizeError = new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
        if (!newSize || !newSize.behavior) {
            throw invalidSizeError;
        }
        var partialSheetSize = this.normalizeSheetSize(newSize);
        var isAutomatic = partialSheetSize.behavior === Contract.SheetSizeBehavior.Automatic;
        if (!isAutomatic && !partialSheetSize.minSize && !partialSheetSize.maxSize) {
            throw invalidSizeError;
        }
        if (!isAutomatic && this.sheetType === Contract.SheetType.Worksheet) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSizeBehaviorOnWorksheet, 'Only SheetSizeBehavior.Automatic is allowed on Worksheets');
        }
        if (isAutomatic && this.getSheetSize().behavior === partialSheetSize.behavior) {
            return Promise.resolve(newSize);
        }
        var processedNewSize = this.processNewSize(partialSheetSize);
        var sizeService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("size-service" /* Size */);
        return sizeService.changeSizeAsync(this.name, processedNewSize).then(function () {
            var clientInfoService = ServiceRegistry_1.ApiServiceRegistry.get(_this._registryId).getService("client-info-service" /* ClientInfo */);
            return clientInfoService.getClientInfoAsync().then(function (bootstrapInfo) {
                var sheet = bootstrapInfo.publishedSheets.find(function (s) { return s.name === _this.name; });
                if (!sheet) {
                    throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Can't find sheet with name " + _this.name);
                }
                var sheetSize = SheetUtils_1.SheetUtils.getSheetSizeFromSizeConstraints(sheet.sizeConstraint);
                _this._sheetInfoImpl.sheetSize = sheetSize;
                return sheetSize;
            });
        });
    };
    SheetImpl.prototype.normalizeSheetSize = function (newSize) {
        var behavior = newSize.behavior;
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(behavior, Contract.SheetSizeBehavior, 'SheetSizeBehavior');
        var minSize = SheetImpl.parseDimensions(newSize.minSize);
        var maxSize = SheetImpl.parseDimensions(newSize.maxSize);
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetImpl.prototype.processNewSize = function (newSize) {
        var _a, _b, _c, _d;
        var behavior = newSize.behavior, minSizeMaybe = newSize.minSize, maxSizeMaybe = newSize.maxSize;
        var hasMinWidth = !Param_1.Param.isNullOrUndefined((_a = minSizeMaybe) === null || _a === void 0 ? void 0 : _a.width);
        var hasMinHeight = !Param_1.Param.isNullOrUndefined((_b = minSizeMaybe) === null || _b === void 0 ? void 0 : _b.height);
        var hasMaxWidth = !Param_1.Param.isNullOrUndefined((_c = maxSizeMaybe) === null || _c === void 0 ? void 0 : _c.width);
        var hasMaxHeight = !Param_1.Param.isNullOrUndefined((_d = maxSizeMaybe) === null || _d === void 0 ? void 0 : _d.height);
        var hasValidMinSize = hasMinWidth && hasMinHeight;
        var hasValidMaxSize = hasMaxWidth && hasMaxHeight;
        switch (behavior) {
            case Contract.SheetSizeBehavior.Automatic: {
                return { behavior: behavior };
            }
            case Contract.SheetSizeBehavior.AtMost: {
                if (!maxSizeMaybe || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMaxSize, 'Missing maxSize for SheetSizeBehavior.AtMost');
                }
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (maxSize.width < 0 || maxSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.AtLeast: {
                if (!minSizeMaybe || !hasValidMinSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinSize, 'Missing minSize for SheetSizeBehavior.AtLeast');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                if (minSize.width < 0 || minSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, minSize: minSize };
            }
            case Contract.SheetSizeBehavior.Range: {
                if (!minSizeMaybe || !maxSizeMaybe || !hasValidMinSize || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinMaxSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (minSize.width < 0 ||
                    minSize.height < 0 ||
                    maxSize.width < 0 ||
                    maxSize.height < 0 ||
                    minSize.width > maxSize.width ||
                    minSize.height > maxSize.height) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                return { behavior: behavior, minSize: minSize, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.Exactly: {
                if (minSizeMaybe && maxSizeMaybe) {
                    if (hasValidMinSize && hasValidMaxSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        if (minSize.width !== maxSize.width || minSize.height !== maxSize.height) {
                            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Conflicting size values for SheetSizeBehavior.Exactly');
                        }
                        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
                    }
                    if (hasValidMinSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        return { behavior: behavior, minSize: minSize, maxSize: minSize };
                    }
                    if (hasValidMaxSize) {
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        return { behavior: behavior, minSize: maxSize, maxSize: maxSize };
                    }
                }
                throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Unsupported sheet size behavior: " + behavior);
            }
        }
    };
    SheetImpl.parseDimensions = function (size) {
        var empty = { width: undefined, height: undefined };
        if (!size) {
            return empty;
        }
        var _a = Param_1.Param.tryParseNumber(size.width), widthParsed = _a.success, parsedWidth = _a.parsed;
        var _b = Param_1.Param.tryParseNumber(size.height), heightParsed = _b.success, parsedHeight = _b.parsed;
        if (widthParsed && heightParsed) {
            return { width: parsedWidth, height: parsedHeight };
        }
        if (widthParsed) {
            return { width: parsedWidth };
        }
        if (heightParsed) {
            return { height: parsedHeight };
        }
        return empty;
    };
    return SheetImpl;
}());
exports.SheetImpl = SheetImpl;
//# sourceMappingURL=SheetImpl.js.map