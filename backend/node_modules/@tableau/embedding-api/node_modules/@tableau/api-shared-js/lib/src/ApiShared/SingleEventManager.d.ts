import * as Contract from '@tableau/api-external-contract-js';
import { TableauEventType } from '@tableau/api-external-contract-js';
/**
 * Manages registering and unregistering event handlers for a specific type of Tableau event.
 */
export interface SingleEventManager {
    /**
     * The type of event this manager is in charge of
     */
    readonly eventType: TableauEventType;
    /**
     * Adds a new event listener to this manager.
     *
     * @param {(eventObj: TableauEvent) => void} handler The handler to add
     * @returns {TableauEventUnregisterFn} A function which can be called to unregister this handler
     */
    addEventListener(handler: (eventObj: Contract.TableauEvent) => void): Contract.TableauEventUnregisterFn;
    /**
     * Removes all event handler which match the provided handler
     *
     * @param {(eventObj: TableauEvent) => void} handler The handler to remove
     * @returns {boolean} Whether or not any instances were removed
     */
    removeEventListener(handler: (eventObj: Contract.TableauEvent) => void): boolean;
    /**
     * Trigger an event and notifies all handlers which have been registered via AddEventListener
     *
     * @param {() => TableauEvent} eventGenerator A function which generates the Tableau event.
     */
    triggerEvent(eventGenerator: () => Contract.TableauEvent): void;
}
//# sourceMappingURL=SingleEventManager.d.ts.map