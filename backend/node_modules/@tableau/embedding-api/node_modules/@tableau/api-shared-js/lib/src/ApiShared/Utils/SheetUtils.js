"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
var TableauError_1 = require("../TableauError");
var SheetUtils = /** @class */ (function () {
    function SheetUtils() {
    }
    // This is a direct port from SheetSize.cs - SheetSizeFactory
    SheetUtils.getSheetSizeFromSizeConstraints = function (sizeConstraint) {
        var minWidth = sizeConstraint.minWidth, minHeight = sizeConstraint.minHeight, maxWidth = sizeConstraint.maxWidth, maxHeight = sizeConstraint.maxHeight;
        if (minHeight === 0 && minWidth === 0) {
            if (maxHeight === 0 && maxWidth === 0) {
                return {
                    behavior: Contract.SheetSizeBehavior.Automatic,
                };
            }
            return {
                behavior: Contract.SheetSizeBehavior.AtMost,
                maxSize: { width: maxWidth, height: maxHeight },
            };
        }
        if (maxHeight === 0 && maxWidth === 0) {
            return {
                behavior: Contract.SheetSizeBehavior.AtLeast,
                minSize: { width: minWidth, height: minHeight },
            };
        }
        if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
            return {
                behavior: Contract.SheetSizeBehavior.Exactly,
                minSize: { width: minWidth, height: minHeight },
                maxSize: { width: minWidth, height: minHeight },
            };
        }
        // 'Fit Width' for a DSD layout
        var isDsdLayout = minWidth === 0 && maxWidth === 0;
        return {
            behavior: Contract.SheetSizeBehavior.Range,
            minSize: { width: minWidth, height: minHeight },
            maxSize: { width: isDsdLayout ? 2147483647 : maxWidth, height: maxHeight },
        };
    };
    SheetUtils.createAutomaticSize = function () {
        var behavior = Contract.SheetSizeBehavior.Automatic;
        var minSize = { width: 0, height: 0 };
        var maxSize = { width: 0, height: 0 };
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetUtils.getPublishedSheetInfoByName = function (name, sheetInfos) {
        var sheetInfo = sheetInfos.find(function (sheet) { return sheet.name === name; });
        return sheetInfo;
    };
    SheetUtils.getSheetTypeEnum = function (internalSheetType) {
        var sheetType;
        switch (internalSheetType) {
            case api_internal_contract_js_1.SheetType.Worksheet: {
                sheetType = Contract.SheetType.Worksheet;
                break;
            }
            case api_internal_contract_js_1.SheetType.Dashboard: {
                sheetType = Contract.SheetType.Dashboard;
                break;
            }
            case api_internal_contract_js_1.SheetType.Story: {
                sheetType = Contract.SheetType.Story;
                break;
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
            }
        }
        return sheetType;
    };
    SheetUtils.isValidSheetSize = function (sizeObject) {
        return sizeObject.behavior !== undefined;
    };
    return SheetUtils;
}());
exports.SheetUtils = SheetUtils;
//# sourceMappingURL=SheetUtils.js.map