{"version":3,"file":"ErrorHelpers.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/ErrorHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DashboardObjectPositionAndSizeUpdate,\n  ExportDataOptions,\n  ExportScenariosForPDFAndPowerPoint,\n  ExportPDFOptions as ExternalExportPDFOptions,\n  PrintOrientation,\n  PrintPageSize,\n  PrintScaling,\n  RangeFilterOptions,\n  SharedErrorCodes,\n} from '@tableau/api-external-contract-js';\nimport { DashboardObjectImpl } from '../Impl/DashboardObjectImpl';\nimport { TableauError } from '../TableauError';\nimport { Param } from './Param';\n\ninterface EnumLike {\n  toString(): string;\n}\n\n/**\n * This class is used to construct common errors throughout the external\n * projects (api-shared, extensions-api, etc.).  It has some duplication with\n * the ErrorHelpers class in api-core, but is separate due to the need to throw\n * an external TableauError vs. an InternalTableauError.\n */\nexport class ErrorHelpers {\n  /**\n   * Throws with code InternalError.\n   *\n   * @param apiName name of api that was called.\n   */\n  public static apiNotImplemented(apiName: string): TableauError {\n    return new TableauError(SharedErrorCodes.InternalError, `${apiName} API not yet implemented.`);\n  }\n\n  /**\n   * Throws an internal error if argument is null or undefined.\n   *\n   * @param argumentValue value to verify\n   * @param argumentName name of argument to verify\n   */\n  /*tslint:disable-next-line */\n  public static verifyInternalValue(argumentValue: any, argumentName: string) {\n    if (argumentValue === null || argumentValue === undefined) {\n      throw new TableauError(SharedErrorCodes.InternalError, `${argumentValue} is invalid value for: ${argumentName}`);\n    }\n  }\n\n  /**\n   * Throws an InvalidParameter error if argument is null or undefined.\n   *\n   * @param argumentValue value to verify\n   * @param argumentName name of argument to verify\n   */\n  /*tslint:disable-next-line */\n  public static verifyParameter(argumentValue: any, argumentName: string) {\n    if (argumentValue === null || argumentValue === undefined) {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, `${argumentValue} is invalid value for parameter: ${argumentName}`);\n    }\n  }\n\n  /**\n   * Throws an InvalidParameter error if argument is not the specified type.\n   * For objects, it just tests that it is an object\n   *\n   * @param argumentValue value to verify\n   * @param expectedType expected result of typeof\n   * @param argumentName name of argument to verify\n   */\n  /*tslint:disable-next-line */\n  public static verifyParameterType(argumentValue: any, expectedType: string, argumentName: string) {\n    if (typeof argumentValue !== expectedType) {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, `${argumentValue} has invalid type for parameter: ${argumentName}.`);\n    }\n  }\n\n  /**\n   * Throws an InvalidParameter error if argument is empty string, null or undefined.\n   *\n   * @param argumentValue value to verify\n   * @param argumentName name of argument to verify\n   */\n  /*tslint:disable-next-line */\n  public static verifyStringParameter(argumentValue: string, argumentName: string) {\n    if (argumentValue === null || argumentValue === undefined || argumentValue === '') {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, `${argumentValue} is invalid value for paramter: ${argumentName}`);\n    }\n  }\n\n  /**\n   * Verifies passed value is a valid value for that enum.\n   *\n   * String enums are {string : string} dictionaries which are not reverse mappable\n   * This is an ugly workaround\n   *\n   * @param enumValue value to verify\n   * @param enumType enum to verify against\n   */\n  /*tslint:disable-next-line */\n  public static isValidEnumValue<EnumType extends EnumLike>(enumValue: EnumType, enumType: any): boolean {\n    let isValid = false;\n    Object.keys(enumType).forEach((enumKey) => {\n      if (enumType[enumKey] === enumValue.toString()) {\n        isValid = true;\n      }\n    });\n\n    return isValid;\n  }\n\n  /**\n   * Verifies passed value is a valid value for that enum.\n   * Throws an InvalidParameter error if the enum value is not valid.\n   *\n   * String enums are {string : string} dictionaries which are not reverse mappable\n   * This is an ugly workaround\n   *\n   * @param enumValue value to verify\n   * @param enumType enum to verify against\n   * @param enumName enum name for clear error message\n   */\n  /*tslint:disable-next-line */\n  public static verifyEnumValue<EnumType extends EnumLike>(enumValue: EnumType, enumType: any, enumName: string) {\n    if (!ErrorHelpers.isValidEnumValue(enumValue, enumType)) {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, `${enumValue} is invalid value for enum: ${enumName}.`);\n    }\n  }\n\n  /**\n   * Verifies passed value is between [min, max) ... min <= value < max\n   * Throws an InvalidParameter error if the value is not valid.\n   *\n   *\n   * @param value value to verify\n   * @param min   value must be >= min\n   * @param max   value must be < max\n   */\n  public static verifyRange(value: number, min: number, max: number) {\n    let isValid = min <= value && value < max;\n\n    if (!isValid) {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, `${value} is invalid value for range: [${min}..${max})`);\n    }\n  }\n\n  /**\n   * Verifies the params min and max for applying range filter.\n   * Throws with error code InvalidParameter if range is invalid.\n   *\n   * @param min range min\n   * @param max range max\n   */\n  public static verifyRangeParamType(min: RangeFilterOptions['min'], max: RangeFilterOptions['max']): void {\n    const isMinDefined = min !== undefined;\n    const isMaxDefined = max !== undefined;\n\n    if (!isMinDefined && !isMaxDefined) {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, at least one of min or max is required.');\n    }\n\n    if (isMinDefined && !Param.isTypeNumber(min) && !Param.isTypeDate(min)) {\n      throw new TableauError(\n        SharedErrorCodes.InvalidParameter,\n        'Unexpected invalid param value, only Date and number are allowed for parameter min.',\n      );\n    }\n\n    if (isMaxDefined && !Param.isTypeNumber(max) && !Param.isTypeDate(max)) {\n      throw new TableauError(\n        SharedErrorCodes.InvalidParameter,\n        'Unexpected invalid param value, only Date and number are allowed for parameter max.',\n      );\n    }\n\n    if (isMinDefined && isMaxDefined && typeof min !== typeof max) {\n      throw new TableauError(\n        SharedErrorCodes.InvalidParameter,\n        'Unexpected invalid param value, parameters min and max should be of the same type.',\n      );\n    }\n  }\n\n  /**\n   * Verifies that the zoneId is present in the current dashboard.\n   * Throws with error code InvalidParameter if either condition is false.\n   *\n   * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.\n   * @param zoneID ZoneId to be validated\n   */\n  public static verifyZoneIsValid(dashboardZoneMap: Map<number, DashboardObjectImpl>, zoneID: number): void {\n    if (dashboardZoneMap.has(zoneID)) {\n      return;\n    }\n\n    throw new TableauError(\n      SharedErrorCodes.InvalidParameter,\n      `Unexpected invalid param value, Dashboard Object Id: ${zoneID} is not present in dashboard.`,\n    );\n  }\n\n  /**\n   * Verifies that the zone is present and floating in the current dashboard.\n   * Throws with error code InvalidParameter if either condition is false.\n   *\n   * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.\n   * @param zoneID ZoneId to be validated\n   */\n  public static verifyZoneIsValidAndFloating(dashboardZoneMap: Map<number, DashboardObjectImpl>, zoneID: number): void {\n    if (dashboardZoneMap.has(zoneID) && dashboardZoneMap.get(zoneID)!.isFloating) {\n      return;\n    }\n\n    throw new TableauError(\n      SharedErrorCodes.InvalidParameter,\n      `Unexpected invalid param value, Dashboard Object Id: ${zoneID} is not present or is a fixed zone in the dashboard.`,\n    );\n  }\n\n  /**\n   * Verifies that width and height are > 0 for each DashboardObjectPositionAndSizeUpdate object.\n   * Throws with error code InvalidParameter if either condition is false.\n   *\n   * @param dashboardObjectPositionAndSizeUpdate DashboardObjectPositionAndSizeUpdate object for which width and height will be validated\n   */\n  public static verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate(\n    dashboardObjectPositionAndSizeUpdate: DashboardObjectPositionAndSizeUpdate,\n  ): void {\n    if (dashboardObjectPositionAndSizeUpdate.width < 0 || dashboardObjectPositionAndSizeUpdate.height < 0) {\n      throw new TableauError(\n        SharedErrorCodes.InvalidParameter,\n        `Unexpected invalid param value for dashboard object ID ${dashboardObjectPositionAndSizeUpdate.dashboardObjectID}:` +\n          ` negative widths and heights are not allowed.`,\n      );\n    }\n  }\n\n  /**\n   * Verifies is the given sheet name is in the list of sheets names allowed for exporting.\n   * Throws with error code InvalidParameter if the condition above is false.\n   *\n   * @param exportableSheetNames A list of sheet names allowed for exporting\n   * @param sheetName the name of the sheet selected for export\n   */\n  public static verifySheetName(exportableSheetNames: Array<string>, sheetName: string) {\n    if (!exportableSheetNames.includes(sheetName)) {\n      throw new TableauError(\n        SharedErrorCodes.InvalidSelectionSheet,\n        'sheetName parameter must belong to a worksheet within the current view',\n      );\n    }\n  }\n\n  /**\n   * Verifies the ExportDataOptions object\n   * Throws with error code InvalidParameter if the parameter is not of ExportDataOptions type.\n   *\n   * @param options The ExportDataOptions object used to configure the output CSV file for exportDataAsync.\n   */\n  public static verifyExportDataOptions(options: ExportDataOptions): void {\n    if (\n      (!Param.isNullOrUndefined(options.ignoreAliases) && !Param.isTypeBool(options.ignoreAliases)) ||\n      (!Param.isNullOrUndefined(options.columnsToIncludeById) && !Array.isArray(options.columnsToIncludeById))\n    )\n      throw new TableauError(SharedErrorCodes.InvalidParameter, 'options paramater must be of type ExportDataOptions');\n  }\n\n  /**\n   * Verifies if the sheet names are included in any of the export scenarios.\n   * Throws with error code InvalidParameter if the parameter is not an array.\n   * Throws with error code InvalidSelectionSheet if there are array entries that dont exist or if there is mixing between sheets from the dashboard and sheet from the workbook.\n   *\n   * @param sheetNames List of sheet names selected for exporting.\n   * @param exportScenarios an object containing the current sheet name, exportable sheets from the dashboard, and exportable sheets from the workbook.\n   */\n  public static verifySheetNamesForPDFAndPPT(sheetNames: Array<string>, exportScenarios: ExportScenariosForPDFAndPowerPoint): void {\n    if (!Array.isArray(sheetNames)) throw new TableauError(SharedErrorCodes.InvalidParameter, 'sheetNames parameter must be an array');\n    if (sheetNames.length === 0) throw new TableauError(SharedErrorCodes.InternalError, 'sheetNames should not be empty');\n\n    const isIncludedInDashboard = sheetNames.every((sheetName: string) =>\n      exportScenarios.exportableSheetNamesFromDashboard.includes(sheetName),\n    );\n    if (isIncludedInDashboard) {\n      return;\n    }\n    const isIncludedInWorkbook = sheetNames.every((sheetName: string) =>\n      exportScenarios.exportableSheetNamesFromWorkbook.includes(sheetName),\n    );\n    if (isIncludedInWorkbook) {\n      return;\n    }\n    const isCurrentSheet = sheetNames.length === 1 && sheetNames[0] === exportScenarios.currentSheetName;\n    if (isCurrentSheet) {\n      return;\n    }\n\n    // Export requirement: all sheet names must be included in the list of exportable sheets in the dashboard or\n    // all sheet names must be included in the list of exportable sheets in the workbook, or the sheet name is the current sheet\n    throw new TableauError(\n      SharedErrorCodes.InvalidSelectionSheet,\n      'sheetNames parameter must have all its entries be exportable sheet names from the dashboard or all its entries be exportable sheet names from the workbook',\n    );\n  }\n\n  /**\n   * Verifies the external ExportPDFOptions object's properties.\n   * Throws with error code InvalidParameter if the parameter is not of external ExportPDFOptions type.\n   *\n   * @param options The external user-facing ExportPDFOptions object used to configure the output PDF file for exportPDFAsync.\n   */\n  public static verifyExportPDFOptions(options: ExternalExportPDFOptions) {\n    try {\n      this.verifyEnumValue<PrintOrientation>(options.orientation, PrintOrientation, 'PrintOrientation');\n      this.verifyEnumValue<PrintPageSize>(options.pageSize, PrintPageSize, 'PrintPageSize');\n      this.verifyEnumValue<PrintScaling>(options.scaling, PrintScaling, 'PrintScaling');\n    } catch {\n      throw new TableauError(SharedErrorCodes.InvalidParameter, 'options parameter must be of type ExportPDFOptions');\n    }\n  }\n}\n"]}