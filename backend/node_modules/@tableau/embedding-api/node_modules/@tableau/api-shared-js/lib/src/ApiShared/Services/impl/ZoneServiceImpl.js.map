{"version":3,"file":"ZoneServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/ZoneServiceImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,8EAAkF;AAClF,8EAAwE;AACxE,oGAA4H;AAE5H,yDAAwD;AACxD,2CAA0C;AAG1C,qDAAoD;AAEpD;IAAqC,mCAAe;IAApD;;IAiDA,CAAC;IAhDC,sBAAW,wCAAW;aAAtB;YACE,iCAAyB;QAC3B,CAAC;;;OAAA;IAEM,4CAAkB,GAAzB,UACE,SAAiB,EACjB,gBAAkD,EAClD,iBAA6C;;QAE7C,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,oBAAoB;YAChD,GAAC,sCAAW,CAAC,SAAS,IAAG,SAAS;YAClC,GAAC,sCAAW,CAAC,oBAAoB,IAAG,EAAE;eACvC,CAAC;QAEF,2EAA2E;QAC3E,IAAM,cAAc,GAAG,aAAK,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;QAE3F,cAAc,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;YAChC,2BAAY,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;YAC3E,2BAAY,CAAC,eAAe,CAAgC,KAAK,EAAE,wDAA6B,EAAE,+BAA+B,CAAC,CAAC;YACnI,UAAU,CAAC,sCAAW,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,GAAG,+DAAqB,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YAC5E,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4CAAkB,GAAzB,UACE,SAAiB,EACjB,gBAAkD,EAClD,yCAA6F;;QAE7F,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,SAAS,IAAG,SAAS;YAClC,GAAC,sCAAW,CAAC,wCAAwC,IAAG,yCAAyC;eAClG,CAAC;QAEF,yCAAyC,CAAC,OAAO,CAAC,UAAC,eAA8D;YAC/G,2BAAY,CAAC,4BAA4B,CAAC,gBAAgB,EAAE,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAC/F,2BAAY,CAAC,0DAA0D,CAAC,eAAe,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YAC7E,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AAjDD,CAAqC,iCAAe,GAiDnD;AAjDY,0CAAe","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { DashboardObjectVisibilityType } from '@tableau/api-external-contract-js';\nimport { ParameterId, VerbId } from '@tableau/api-internal-contract-js';\nimport { ExternalToInternalEnumMappings as ExternalEnumConverter } from '../../EnumMappings/ExternalToInternalEnumMappings';\nimport { DashboardObjectImpl } from '../../Impl/DashboardObjectImpl';\nimport { ErrorHelpers } from '../../Utils/ErrorHelpers';\nimport { Param } from '../../Utils/Param';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ZoneService } from '../ZoneService';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class ZoneServiceImpl extends ServiceImplBase implements ZoneService {\n  public get serviceName(): string {\n    return ServiceNames.Zone;\n  }\n\n  public setVisibilityAsync(\n    dashboard: string,\n    dashboardZoneMap: Map<number, DashboardObjectImpl>,\n    zoneVisibilityMap: Contract.ZoneVisibilityMap,\n  ): Promise<void> {\n    const parameters = {\n      [ParameterId.FunctionName]: 'setVisibilityAsync',\n      [ParameterId.Dashboard]: dashboard,\n      [ParameterId.ZoneIdsVisibilityMap]: {},\n    };\n\n    // zoneVisibilityMap can be either an object or a Map - convert it to a Map\n    const parameterAsMap = Param.convertParameterToMap(zoneVisibilityMap, 'zoneVisibilityMap');\n\n    parameterAsMap.forEach((value, key) => {\n      ErrorHelpers.verifyZoneIsValid(dashboardZoneMap, Number.parseInt(key, 10));\n      ErrorHelpers.verifyEnumValue<DashboardObjectVisibilityType>(value, DashboardObjectVisibilityType, 'DashboardObjectVisibilityType');\n      parameters[ParameterId.ZoneIdsVisibilityMap][key] = ExternalEnumConverter.setVisibilityType.convert(value);\n    });\n\n    return this.execute(VerbId.SetZoneVisibility, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public moveAndResizeAsync(\n    dashboard: string,\n    dashboardZoneMap: Map<number, DashboardObjectImpl>,\n    dashboardObjectPositionAndSizeUpdateArray: Contract.DashboardObjectPositionAndSizeUpdateArray,\n  ): Promise<void> {\n    const parameters = {\n      [ParameterId.Dashboard]: dashboard,\n      [ParameterId.DashboardObjectPositionAndSizeUpdateList]: dashboardObjectPositionAndSizeUpdateArray,\n    };\n\n    dashboardObjectPositionAndSizeUpdateArray.forEach((dashboardObject: Contract.DashboardObjectPositionAndSizeUpdate) => {\n      ErrorHelpers.verifyZoneIsValidAndFloating(dashboardZoneMap, dashboardObject.dashboardObjectID);\n      ErrorHelpers.verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate(dashboardObject);\n    });\n\n    return this.execute(VerbId.MoveAndResizeZones, parameters).then<void>((response) => {\n      return;\n    });\n  }\n}\n"]}