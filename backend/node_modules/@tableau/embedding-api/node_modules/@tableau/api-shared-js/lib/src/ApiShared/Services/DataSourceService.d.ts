import * as Contract from '@tableau/api-external-contract-js';
import { ConnectionDescriptionSummary, DataSchema, LogicalTableInfo, TableInfo, VisualId } from '@tableau/api-internal-contract-js';
import { ApiService } from './ServiceRegistry';
export interface DataSourceService extends ApiService {
    /**
     * Refreshes a live datasource given a datasource Id.
     * This does not function with Google Sheets or extract only datasources.
     *
     * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).
     *                               Extensions: The command is invoked from a datasource. The datasource id is always present.
     *                               Embedding: The command can be invoked from a Viz without the datasource id.
     *
     * @return  Empty promise once datasource has been refreshed.
     */
    refreshAsync(dataSourceId?: string): Promise<void>;
    /**
     * Gets all of the tables that are used in the datasource's current connections.
     *
     * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).
     *
     * @return  List of all tables active in this datasource's current connection..
     */
    getActiveTablesAsync(dataSourceId: string): Promise<Array<TableInfo>>;
    /**
     * Gets all datasources used in a worksheet.
     *
     * @return  DataSchema object that contains info on all datasources in a worksheet.
     */
    getDataSourcesAsync(visualId: VisualId): Promise<DataSchema>;
    /**
     * Gets all datasources used in the workbook.
     *
     * @return  DataSchema object that contains info on all datasources in the workbook.
     */
    getAllDataSourcesAsync(): Promise<DataSchema>;
    /**
     * Gets a list of summary objects for each connection in a datasource.
     *
     * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).
     *
     * @return  List of summary objects for each connection in a datasource.
     */
    getConnectionSummariesAsync(dataSourceId: string): Promise<ConnectionDescriptionSummary[]>;
    /**
     * Gets the field with the provided global field name
     *
     * @param {string} fieldName The global field name
     */
    getFieldAsync(fieldName: string): Promise<Contract.Field>;
    /**
     * Get all the logical tables aka objects in the Object Model world
     * @param {string} dataSourceId  The unique id of the datasource (referred to as datasource name in Tableau platform code).
     */
    getLogicalTablesAsync(dataSourceId: string): Promise<Array<LogicalTableInfo>>;
    /**
     * Get all the logical tables aka objects in the Object Model world used by the visual spec
     * @param visualId
     */
    getUnderlyingTablesAsync(visualId: VisualId): Promise<Array<LogicalTableInfo>>;
}
//# sourceMappingURL=DataSourceService.d.ts.map