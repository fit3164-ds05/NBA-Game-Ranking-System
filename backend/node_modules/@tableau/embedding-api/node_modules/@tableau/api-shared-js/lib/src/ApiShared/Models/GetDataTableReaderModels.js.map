{"version":3,"file":"GetDataTableReaderModels.js","sourceRoot":"","sources":["../../../../src/ApiShared/Models/GetDataTableReaderModels.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,+DAA+E;AAC/E,sDAAqD;AAErD;IACE,yBAA6B,GAAW,EAAY,cAAsB,EAAY,aAAa,EAAU,WAAmB;QAAnG,QAAG,GAAH,GAAG,CAAQ;QAAY,mBAAc,GAAd,cAAc,CAAQ;QAAY,kBAAa,GAAb,aAAa,CAAA;QAAU,gBAAW,GAAX,WAAW,CAAQ;QAC9H,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,CAAC;IAC9D,CAAC;IAGD,sBAAW,0CAAa;aAAxB;YACE,OAAO,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IAED,sBAAW,sCAAS;aAApB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;;;OAAA;IAEM,sCAAY,GAAnB,UAAoB,UAAkB;QACpC,2BAAY,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,IAAM,OAAO,GAAG,oCAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,kCAAsC,CAAC;QAC1G,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACxE,CAAC;IAEY,0CAAgB,GAA7B,UAA8B,OAAgB;;;;;;4BACN,qBAAM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAA;;wBAA1D,SAAS,GAAuB,SAA0B;wBAChE,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,aAAa,CAAC;wBAClC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;wBACtD,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;wBAG/D,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;wBAC7C,aAAa,GAAG,YAAY,GAAG,cAAc,CAAC;wBAChD,aAAa,GAA4C,EAAE,CAAC;wBACvD,CAAC,GAAG,CAAC;;;6BAAE,CAAA,CAAC,GAAG,YAAY,CAAA;wBACjB,qBAAM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAA;;wBAAjC,IAAI,GAAG,SAA0B;wBACvC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;wBAFE,CAAC,EAAE,CAAA;;;wBAKjC,QAAQ,GAAG,CAAA,KAAA,SAAS,CAAC,IAAI,CAAA,CAAC,MAAM,WAAI,aAAa,CAAC,CAAC;wBACvD,oFAAoF;wBACpF,QAAQ,CAAC,MAAM,GAAG,aAAa,CAAC;wBAEhC,sBAAO;gCACL,IAAI,EAAE,SAAS,CAAC,IAAI;gCACpB,IAAI,EAAE,QAAQ;gCACd,OAAO,EAAE,SAAS,CAAC,OAAO;gCAC1B,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa;gCAChF,sBAAsB,EAAE,aAAa;gCACrC,aAAa,EAAE,SAAS,CAAC,aAAa;6BACvC,EAAC;;;;KACH;IAEM,sCAAY,GAAnB;QACE,IAAM,OAAO,GAAG,oCAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,kCAAsC,CAAC;QAC1G,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IACH,sBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,0CAAe","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { GetDataService } from '../Services/GetDataService';\nimport { ApiServiceRegistry, ServiceNames } from '../Services/ServiceRegistry';\nimport { ErrorHelpers } from '../Utils/ErrorHelpers';\n\nexport class DataTableReader implements Contract.DataTableReader {\n  public constructor(protected _id: string, protected _totalRowCount: number, protected _pageRowCount, private _registryId: number) {\n    this._pageCount = Math.ceil(_totalRowCount / _pageRowCount);\n  }\n  protected _pageCount: number;\n\n  public get totalRowCount(): number {\n    return this._totalRowCount;\n  }\n\n  public get pageCount(): number {\n    return this._pageCount;\n  }\n\n  public getPageAsync(pageNumber: number): Promise<Contract.DataTable> {\n    ErrorHelpers.verifyRange(pageNumber, 0, this._pageCount);\n    const service = ApiServiceRegistry.get(this._registryId).getService<GetDataService>(ServiceNames.GetData);\n    return service.getPageAsync(this._id, pageNumber, this._pageRowCount);\n  }\n\n  public async getAllPagesAsync(maxRows?: number): Promise<Contract.DataTable> {\n    const firstPage: Contract.DataTable = await this.getPageAsync(0);\n    maxRows = maxRows || this.totalRowCount;\n    const rowsRequested = Math.min(maxRows, this.totalRowCount);\n    const pagesRequested = Math.ceil(rowsRequested / this._pageRowCount);\n\n    // Fetch up to 400 pages, with a default of 10,000 pageRowCount that gives us 4,000,000 rows\n    const pagesToFetch = Math.min(pagesRequested, 400);\n    const isDataLimited = pagesToFetch < pagesRequested;\n    let remainingData: Array<Array<Array<Contract.DataValue>>> = [];\n    for (let i = 1; i < pagesToFetch; i++) {\n      const page = await this.getPageAsync(i);\n      remainingData.push(page.data);\n    }\n\n    let fullData = firstPage.data.concat(...remainingData);\n    // This slices the array only if maxRows has been set and is less than totalRowCount\n    fullData.length = rowsRequested;\n\n    return {\n      name: firstPage.name,\n      data: fullData,\n      columns: firstPage.columns,\n      totalRowCount: isDataLimited ? pagesToFetch * this._pageRowCount : rowsRequested,\n      isTotalRowCountLimited: isDataLimited,\n      isSummaryData: firstPage.isSummaryData,\n    };\n  }\n\n  public releaseAsync(): Promise<void> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<GetDataService>(ServiceNames.GetData);\n    return service.releaseAsync(this._id);\n  }\n}\n"]}