{"version":3,"file":"VersionedExternalApiDispatcher.js","sourceRoot":"","sources":["../../src/VersionedExternalApiDispatcher.ts"],"names":[],"mappings":";;AAAA,8EAY2C;AAE3C;;;;;;GAMG;AACH;IAIE;;;;;;;;;;;;OAYG;IACH,wCAA2B,sBAA6C,EAAE,qBAAoC;QAA9G,iBAaC;QAb0B,2BAAsB,GAAtB,sBAAsB,CAAuB;QACtE,IAAI,CAAC,iBAAiB,GAAG,mEAAwC,CAAC,oDAAyB,EAAE,qBAAqB,CAAC,CAAC;QAEpH,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,sBAAsB,CAAC,2BAA2B,CAAC,UAAC,YAA0B;YAC5E,IAAI,KAAI,CAAC,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3C,OAAO;aACR;YACD,IAAM,oBAAoB,GAAG,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YACtF,KAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAC,OAAO;gBACzC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEa,oDAAqB,GAAnC,UAAoC,eAA8B;QAChE,kFAAkF;QAClF,OAAO,0CAAe,CAAC,eAAe,EAAE,oDAAyB,CAAC,CAAC;IACrE,CAAC;IAEM,gDAAO,GAAd,UAAe,IAAY,EAAE,UAA6B;QAA1D,iBAUC;QATC,IAAI;YACF,IAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC1F,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;gBACjH,IAAM,eAAe,GAAG,KAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBAChG,OAAO,eAAe,CAAC;YACzB,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;IAEM,oEAA2B,GAAlC,UAAmC,OAA4B;QAC7D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAEM,sEAA6B,GAApC,UAAqC,OAA4B;QAC/D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,OAAO,EAAb,CAAa,CAAC,CAAC;IACvF,CAAC;IACH,qCAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,wEAA8B","sourcesContent":["import {\n  CreateExternalCompatibleVersionConverter,\n  ExecuteParameters,\n  ExecuteResponse,\n  ExternalContractVersionConverter,\n  InternalApiDispatcher,\n  INTERNAL_CONTRACT_VERSION,\n  Notification,\n  NotificationHandler,\n  VerbId,\n  VersionLessThan,\n  VersionNumber,\n} from '@tableau/api-internal-contract-js';\n\n/**\n * Implementation of the InternalApiDispatcher which supports upgrading and downgrading the input\n * internal contract to the version that this module is built against\n *\n * @class VersionedExternalApiDispatcher\n * @implements {InternalApiDispatcher}\n */\nexport class VersionedExternalApiDispatcher implements InternalApiDispatcher {\n  private _versionConverter: ExternalContractVersionConverter;\n  private _notificationHandlers: Array<NotificationHandler>;\n\n  /**\n   * Creates a new instance of the VersionedExternalApiDispatcher\n   * We have multiple version converting dispatchers that work together.\n   * If needed, the VersionedExternalApiDispatcher wraps either the InternalApiDispatcher (desktop)\n   * or the CrossFrameDispatcher (server).\n   * The Internal/CrossFrame dispatchers handle an updated platform with an older external library.\n   * (The CrossFrameDispatcher sends messages across the frame, and it is handled by the PresLayerHandler.)\n   * Meanwhile, the VersionedExternalApiDispatcher handles an updated external library with an older platform.\n\n   * @param _apiDelegateDispatcher The delegate that does the actual work.\n   * @param platformVersionNumber The version of the internal contract which the platform module is using.\n   * This number will be used to figure out how to downgrade incoming commands and upgrade the results\n   */\n  public constructor(private _apiDelegateDispatcher: InternalApiDispatcher, platformVersionNumber: VersionNumber) {\n    this._versionConverter = CreateExternalCompatibleVersionConverter(INTERNAL_CONTRACT_VERSION, platformVersionNumber);\n\n    this._notificationHandlers = [];\n    _apiDelegateDispatcher.registerNotificationHandler((notification: Notification): void => {\n      if (this._notificationHandlers.length === 0) {\n        return;\n      }\n      const upgradedNotification = this._versionConverter.upgradeNotification(notification);\n      this._notificationHandlers.forEach((handler) => {\n        handler(upgradedNotification);\n      });\n    });\n  }\n\n  public static needsVersionConverter(platformVersion: VersionNumber): boolean {\n    // If our platform is less than external library version, then we need a converter\n    return VersionLessThan(platformVersion, INTERNAL_CONTRACT_VERSION);\n  }\n\n  public execute(verb: VerbId, parameters: ExecuteParameters): Promise<ExecuteResponse> {\n    try {\n      const downgradeParameters = this._versionConverter.downgradeExecuteCall(verb, parameters);\n      return this._apiDelegateDispatcher.execute(downgradeParameters.verb, downgradeParameters.parameters).then((response) => {\n        const upgradeResponse = this._versionConverter.upgradeExecuteReturn(response, verb, parameters);\n        return upgradeResponse;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  public registerNotificationHandler(handler: NotificationHandler): void {\n    this._notificationHandlers.push(handler);\n  }\n\n  public unregisterNotificationHandler(handler: NotificationHandler): void {\n    this._notificationHandlers = this._notificationHandlers.filter((h) => h !== handler);\n  }\n}\n"]}