"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var api_external_contract_js_1 = require("@tableau/api-external-contract-js");
var api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
var InternalToExternalEnumMappings_1 = require("../EnumMappings/InternalToExternalEnumMappings");
var Point_1 = require("../Point");
var ServiceRegistry_1 = require("../Services/ServiceRegistry");
var TableauError_1 = require("../TableauError");
var ErrorHelpers_1 = require("../Utils/ErrorHelpers");
var DashboardObjectImpl_1 = require("./DashboardObjectImpl");
var SheetImpl_1 = require("./SheetImpl");
var SheetInfoImpl_1 = require("./SheetInfoImpl");
var WorksheetImpl_1 = require("./WorksheetImpl");
var DashboardImpl = /** @class */ (function (_super) {
    __extends(DashboardImpl, _super);
    function DashboardImpl(_sheetInfo, _zones, _sheetPath, _registryId, _parentStoryPointImpl, _activeDashboardObjectId) {
        if (_activeDashboardObjectId === void 0) { _activeDashboardObjectId = 0; }
        var _this = _super.call(this, _sheetInfo, _registryId) || this;
        _this._zones = _zones;
        _this._sheetPath = _sheetPath;
        _this._parentStoryPointImpl = _parentStoryPointImpl;
        _this._activeDashboardObjectId = _activeDashboardObjectId;
        return _this;
    }
    Object.defineProperty(DashboardImpl.prototype, "worksheetsImpl", {
        get: function () {
            return this._worksheetsImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "objects", {
        get: function () {
            return this._objects;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "parentStoryPoint", {
        get: function () {
            return this._parentStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "activeDashboardObjectId", {
        get: function () {
            return this._activeDashboardObjectId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "activeDashboardName", {
        get: function () {
            return this._sheetPath.sheetName;
        },
        enumerable: true,
        configurable: true
    });
    DashboardImpl.prototype.initializeWithPublicInterfaces = function () {
        this._worksheetsImpl = new Array();
        this._objects = new Array();
        this.zoneMap = new Map();
        // Process all the zones which are contained in this dashboard
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            var worksheetImpl = undefined;
            var zoneSize = { width: zone.width, height: zone.height };
            // As the dashboard is active, all other zones in the dashboard are inactive.
            var isActive = false;
            if (zone.zoneType === api_internal_contract_js_1.DashboardObjectType.Worksheet || zone.zoneType === api_internal_contract_js_1.DashboardObjectType.QuickFilter) {
                var worksheetName = '';
                var worksheetUrl = '';
                var isHidden = false;
                if (zone.sheetInfo) {
                    // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
                    worksheetName = zone.sheetInfo.name;
                    // worksheetUrl & isHidden is for Embedding only
                    worksheetUrl = zone.sheetInfo.url || '';
                    // If there's a url, then it's not hidden
                    isHidden = worksheetUrl === '';
                }
                else {
                    worksheetName = zone.name;
                }
                // Indexes, isActive and some more properties in sheetInfoImpl are embedding specific.
                // But we init them for both extensions and embedding as the Models will only use what is relevant.
                var sheetInfoImpl = new SheetInfoImpl_1.SheetInfoImpl(worksheetName, api_external_contract_js_1.SheetType.Worksheet, zoneSize, this._worksheetsImpl.length, isActive, isHidden, worksheetUrl);
                var vizId = {
                    worksheet: worksheetName,
                    dashboard: this._sheetInfoImpl.name,
                    storyboard: this._sheetPath.storyboard,
                    flipboardZoneID: this._sheetPath.flipboardZoneID,
                    storyPointID: this._sheetPath.storyPointID,
                };
                worksheetImpl = new WorksheetImpl_1.WorksheetImpl(sheetInfoImpl, this._registryId, vizId, this, this._parentStoryPointImpl);
                if (zone.zoneType === api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                    this._worksheetsImpl.push(worksheetImpl);
                }
            }
            var zonePoint = new Point_1.Point(zone.x, zone.y);
            var dashboardObjectImpl = new DashboardObjectImpl_1.DashboardObjectImpl(this, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dashboardObjectType.convert(zone.zoneType), zonePoint, zoneSize, worksheetImpl, zone.name, zone.isFloating !== undefined ? zone.isFloating : false, // before 1.6.0 we didn't have isFloating, so we assume false
            zone.isVisible !== undefined ? zone.isVisible : true, // before 1.6.0 we didn't have isVisible, so we assume true
            zone.zoneId, zone.fieldId);
            this._objects.push(dashboardObjectImpl);
            this.zoneMap.set(zone.zoneId, dashboardObjectImpl);
        }
    };
    DashboardImpl.prototype.setDashboardObjectVisibilityAsync = function (dashboardObjectVisibilityMap) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.setVisibilityAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectVisibilityMap);
    };
    DashboardImpl.prototype.getDashboardObjectById = function (dashboardObjectId) {
        return this.zoneMap.get(dashboardObjectId);
    };
    DashboardImpl.prototype.updateZones = function (newZones, newActiveZoneId, newActiveDashboardName) {
        var _this = this;
        if (newActiveZoneId === void 0) { newActiveZoneId = 0; }
        if (newActiveDashboardName === void 0) { newActiveDashboardName = ''; }
        // getting previous dashboard objects, active zone ID and active dashboard name
        var oldDashboardObjects = this._objects;
        var oldZoneMap = this.zoneMap;
        var oldActiveZoneId = this._activeDashboardObjectId;
        var oldActiveDashboardName = this._sheetPath.sheetName;
        // updating zones and reinitializing instance variables
        this._zones = newZones;
        this._activeDashboardObjectId = newActiveZoneId;
        if (newActiveDashboardName) {
            this._sheetPath.sheetName = newActiveDashboardName;
            this._sheetInfoImpl.name = newActiveDashboardName;
        }
        this.initializeWithPublicInterfaces();
        // getting new dashboard objects
        var newDashboardObjects = this._objects;
        var newZoneMap = this.zoneMap;
        // initializing map for changes
        var zoneChanges = new Map();
        // comparing old dashboard objects with new ones
        oldDashboardObjects.forEach(function (oldObject) {
            var oldId = oldObject.id;
            // checking if zone was removed
            if (!newZoneMap.has(oldId)) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Removed);
                return;
            }
            var newObject = newZoneMap.get(oldId);
            if (oldObject.isFloating !== newObject.isFloating) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsFloatingChanged);
            }
            if (oldObject.isVisible !== newObject.isVisible) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsVisibleChanged);
            }
            if (oldObject.name !== newObject.name) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.NameChanged);
            }
            if (oldObject.position.x !== newObject.position.x || oldObject.position.y !== newObject.position.y) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.PositionChanged);
            }
            if (oldObject.size.width !== newObject.size.width || oldObject.size.height !== newObject.size.height) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.SizeChanged);
            }
        });
        // Checking for any added zones
        newDashboardObjects.forEach(function (newObject) {
            if (!oldZoneMap.has(newObject.id)) {
                _this.addChange(newObject.id, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Added);
            }
        });
        // Checking if zone selection has changed
        if (oldActiveZoneId !== newActiveZoneId) {
            if (newActiveZoneId !== 0) {
                this.addChange(newActiveZoneId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Selected);
            }
            if (oldActiveZoneId !== 0) {
                this.addChange(oldActiveZoneId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Deselected);
            }
        }
        // Checking if switched to another dashboard
        if (newActiveDashboardName && oldActiveDashboardName !== newActiveDashboardName) {
            this.addChange(0, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.DashboardChanged);
        }
        return zoneChanges;
    };
    DashboardImpl.prototype.addChange = function (zoneId, zoneChanges, change) {
        if (!zoneChanges.has(zoneId)) {
            zoneChanges.set(zoneId, []);
        }
        zoneChanges.get(zoneId).push(change);
    };
    DashboardImpl.prototype.moveAndResizeDashboardObjectsAsync = function (dashboardObjectPositionAndSizeUpdateArray) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.moveAndResizeAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectPositionAndSizeUpdateArray);
    };
    DashboardImpl.prototype.replayAnimationAsync = function (replaySpeed) {
        var animationService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("animation-service" /* Animation */);
        return animationService.replayAsync(replaySpeed);
    };
    DashboardImpl.prototype.getFiltersAsync = function () {
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getDashboardFiltersAsync();
    };
    DashboardImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'FilterUpdateType');
        ErrorHelpers_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        if (!Array.isArray(values)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyDashboardFilterAsync must be an array');
        }
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyDashboardFilterAsync(fieldName, values, updateType, options);
    };
    // @W-12986439: remove once initializeWithPublicInterfaces is moved to the constructor for this class
    // This method only exists since worksheetsImpl can be undefined, but we need the worksheet names in the Export APIs
    DashboardImpl.prototype.getWorksheetNamesFromZones = function () {
        var worksheetNames = [];
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            if (zone.zoneType !== api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                continue;
            }
            // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
            var worksheetName = zone.sheetInfo ? zone.sheetInfo.name : zone.name;
            worksheetNames.push(worksheetName);
        }
        return worksheetNames;
    };
    DashboardImpl.prototype.verifyActiveSheetOrEmbeddedInActiveStoryPoint = function () {
        var isRootAndActiveDashboard = this.active;
        var isWithinActiveStoryPoint = this.parentStoryPoint != null && this.parentStoryPoint.active;
        if (!isRootAndActiveDashboard && !isWithinActiveStoryPoint) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');
        }
    };
    return DashboardImpl;
}(SheetImpl_1.SheetImpl));
exports.DashboardImpl = DashboardImpl;
//# sourceMappingURL=DashboardImpl.js.map