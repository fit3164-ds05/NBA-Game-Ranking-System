{"version":3,"file":"ExportService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/ExportService.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ExportCrosstabSheetMap,\n  ExportFile,\n  ExportPDFOptions as InternalExportPDFOptions,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport {\n  CrosstabFileFormat,\n  ExportDataOptions,\n  ExportPDFOptions as ExternalExportPDFOptions,\n  ExportScenariosForPDFAndPowerPoint,\n  SheetType as ExternalSheetType,\n} from '@tableau/api-external-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * Service for exporting sheets to a file.\n *\n * @interface ExportService\n * @extends {ApiService}\n */\nexport interface ExportService extends ApiService {\n  /**\n   * Gets an internal ExportCrosstabSheetMap model which is a map of sheet names to their sheet identifiers.\n   */\n  getExportCrosstabSheetMapAsync(currentSheetType: ExternalSheetType): Promise<ExportCrosstabSheetMap>;\n\n  /**\n   * Exports the crosstab of any given worksheet within the current view to a\n   * specified format (CrosstabFileFormat.Excel, CrosstabFileFormat.CSV).\n   * Throws an error if the sheet name does not match any worksheets within the active sheet.\n   * Throws an error if the crosstab file failed to be created.\n   * Note: exportCrosstabAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   */\n  exportCrosstabAsync(\n    sheetName: string,\n    format: CrosstabFileFormat,\n    exportableWorksheetNames: Array<string>,\n    currentSheetType: ExternalSheetType,\n  ): Promise<ExportFile>;\n\n  /**\n   * Exports the summary data shown in the View Data window\n   * (shown when you click Download > Data from the toolbar for any given worksheet within the current view).\n   * The current file format is CSV. There is no limitation on the amount of summary data you can export.\n   * Throws an error if the sheet name does not match any worksheets within the active sheet.\n   * Throws an error if the CSV file failed to be created.\n   * Note: exportDataAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   */\n  exportDataAsync(visualId: VisualId, options: ExportDataOptions): Promise<void>;\n\n  /**\n   * Gets an internal ExportPDFOptions model which is used by the pres layer to configure a PDF export.\n   */\n  getExportPDFOptionsAsync(): Promise<InternalExportPDFOptions>;\n\n  /**\n   * Exports the list of sheets with the given {@link ExportPDFOptions} options. If no sheets are specified, the current sheet is exported.\n   * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.\n   * If no ExportPDFOptions are specified, the default settings are: Scaling = Automatic, PageSize = Letter, and Orientation = Portrait.\n   *\n   * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.\n   * Throws an error if the PDF file fails to be created.\n   *\n   * Note: exportPDFAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   */\n  exportPDFAsync(\n    sheetNames: Array<string>,\n    externalExportPdfOptions: ExternalExportPDFOptions,\n    exportScenarios: ExportScenariosForPDFAndPowerPoint,\n  ): Promise<ExportFile>;\n\n  /**\n   * Exports the list of sheets to a PowerPoint file. If no sheets are specified, the current sheet is exported.\n   * The order the sheets appear in the list is the order the sheets appear in the PowerPoint file.\n   * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.\n   *\n   * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.\n   * Throws an error if the PowerPoint file fails to be created.\n   *\n   * Note: exportPowerPointAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   */\n  exportPowerPointAsync(sheetNames: Array<string>, exportScenarios: ExportScenariosForPDFAndPowerPoint): Promise<ExportFile>;\n}\n"]}