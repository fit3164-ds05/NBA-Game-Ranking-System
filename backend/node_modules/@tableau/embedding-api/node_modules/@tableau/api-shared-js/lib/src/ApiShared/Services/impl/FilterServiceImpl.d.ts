import * as Contract from '@tableau/api-external-contract-js';
import { FilterDomainType } from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { FilterService } from '../FilterService';
import { ServiceImplBase } from './ServiceImplBase';
export declare class FilterServiceImpl extends ServiceImplBase implements FilterService {
    get serviceName(): string;
    applyFilterAsync(visualId: VisualId, fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    applyRangeFilterAsync(visualId: VisualId, fieldName: string, filterOptions: Contract.RangeFilterOptions): Promise<string>;
    applyHierarchicalFilterAsync(visualId: VisualId, fieldName: string, values: Array<string> | Contract.HierarchicalLevels, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    clearFilterAsync(visualId: VisualId, fieldName: string): Promise<string>;
    applyRelativeDateFilterAsync(visualId: VisualId, fieldName: string, options: Contract.RelativeDateFilterOptions): Promise<string>;
    getFiltersAsync(visualId: VisualId): Promise<Array<Contract.Filter>>;
    getCategoricalDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.CategoricalDomain>;
    getRangeDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.RangeDomain>;
    getDashboardFiltersAsync(): Promise<Array<Contract.Filter>>;
    applyDashboardFilterAsync(fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    getAppliedWorksheetsAsync(worksheetName: string, fieldId: string): Promise<Array<string>>;
    setAppliedWorksheetsAsync(worksheetName: string, fieldName: string, fieldId: string, applyToWorksheets: Array<string>): Promise<Array<string>>;
    private executeGetAppliedWorksheets;
    private convertDomainFilters;
    private convertCategoricalFilter;
    private convertHierarchicalFilter;
    private convertRangeFilter;
    private convertRelativeDateFilter;
    private convertCategoricalDomain;
    private convertRangeDomain;
    private convertAnchorDate;
    private apiFilterHandlerCheckForCommandError;
}
//# sourceMappingURL=FilterServiceImpl.d.ts.map