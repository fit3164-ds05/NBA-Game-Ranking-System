import { DashboardObjectPositionAndSizeUpdate, ExportDataOptions, ExportScenariosForPDFAndPowerPoint, ExportPDFOptions as ExternalExportPDFOptions, RangeFilterOptions } from '@tableau/api-external-contract-js';
import { DashboardObjectImpl } from '../Impl/DashboardObjectImpl';
import { TableauError } from '../TableauError';
interface EnumLike {
    toString(): string;
}
/**
 * This class is used to construct common errors throughout the external
 * projects (api-shared, extensions-api, etc.).  It has some duplication with
 * the ErrorHelpers class in api-core, but is separate due to the need to throw
 * an external TableauError vs. an InternalTableauError.
 */
export declare class ErrorHelpers {
    /**
     * Throws with code InternalError.
     *
     * @param apiName name of api that was called.
     */
    static apiNotImplemented(apiName: string): TableauError;
    /**
     * Throws an internal error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    static verifyInternalValue(argumentValue: any, argumentName: string): void;
    /**
     * Throws an InvalidParameter error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    static verifyParameter(argumentValue: any, argumentName: string): void;
    /**
     * Throws an InvalidParameter error if argument is not the specified type.
     * For objects, it just tests that it is an object
     *
     * @param argumentValue value to verify
     * @param expectedType expected result of typeof
     * @param argumentName name of argument to verify
     */
    static verifyParameterType(argumentValue: any, expectedType: string, argumentName: string): void;
    /**
     * Throws an InvalidParameter error if argument is empty string, null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    static verifyStringParameter(argumentValue: string, argumentName: string): void;
    /**
     * Verifies passed value is a valid value for that enum.
     *
     * String enums are {string : string} dictionaries which are not reverse mappable
     * This is an ugly workaround
     *
     * @param enumValue value to verify
     * @param enumType enum to verify against
     */
    static isValidEnumValue<EnumType extends EnumLike>(enumValue: EnumType, enumType: any): boolean;
    /**
     * Verifies passed value is a valid value for that enum.
     * Throws an InvalidParameter error if the enum value is not valid.
     *
     * String enums are {string : string} dictionaries which are not reverse mappable
     * This is an ugly workaround
     *
     * @param enumValue value to verify
     * @param enumType enum to verify against
     * @param enumName enum name for clear error message
     */
    static verifyEnumValue<EnumType extends EnumLike>(enumValue: EnumType, enumType: any, enumName: string): void;
    /**
     * Verifies passed value is between [min, max) ... min <= value < max
     * Throws an InvalidParameter error if the value is not valid.
     *
     *
     * @param value value to verify
     * @param min   value must be >= min
     * @param max   value must be < max
     */
    static verifyRange(value: number, min: number, max: number): void;
    /**
     * Verifies the params min and max for applying range filter.
     * Throws with error code InvalidParameter if range is invalid.
     *
     * @param min range min
     * @param max range max
     */
    static verifyRangeParamType(min: RangeFilterOptions['min'], max: RangeFilterOptions['max']): void;
    /**
     * Verifies that the zoneId is present in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    static verifyZoneIsValid(dashboardZoneMap: Map<number, DashboardObjectImpl>, zoneID: number): void;
    /**
     * Verifies that the zone is present and floating in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    static verifyZoneIsValidAndFloating(dashboardZoneMap: Map<number, DashboardObjectImpl>, zoneID: number): void;
    /**
     * Verifies that width and height are > 0 for each DashboardObjectPositionAndSizeUpdate object.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardObjectPositionAndSizeUpdate DashboardObjectPositionAndSizeUpdate object for which width and height will be validated
     */
    static verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate(dashboardObjectPositionAndSizeUpdate: DashboardObjectPositionAndSizeUpdate): void;
    /**
     * Verifies is the given sheet name is in the list of sheets names allowed for exporting.
     * Throws with error code InvalidParameter if the condition above is false.
     *
     * @param exportableSheetNames A list of sheet names allowed for exporting
     * @param sheetName the name of the sheet selected for export
     */
    static verifySheetName(exportableSheetNames: Array<string>, sheetName: string): void;
    /**
     * Verifies the ExportDataOptions object
     * Throws with error code InvalidParameter if the parameter is not of ExportDataOptions type.
     *
     * @param options The ExportDataOptions object used to configure the output CSV file for exportDataAsync.
     */
    static verifyExportDataOptions(options: ExportDataOptions): void;
    /**
     * Verifies if the sheet names are included in any of the export scenarios.
     * Throws with error code InvalidParameter if the parameter is not an array.
     * Throws with error code InvalidSelectionSheet if there are array entries that dont exist or if there is mixing between sheets from the dashboard and sheet from the workbook.
     *
     * @param sheetNames List of sheet names selected for exporting.
     * @param exportScenarios an object containing the current sheet name, exportable sheets from the dashboard, and exportable sheets from the workbook.
     */
    static verifySheetNamesForPDFAndPPT(sheetNames: Array<string>, exportScenarios: ExportScenariosForPDFAndPowerPoint): void;
    /**
     * Verifies the external ExportPDFOptions object's properties.
     * Throws with error code InvalidParameter if the parameter is not of external ExportPDFOptions type.
     *
     * @param options The external user-facing ExportPDFOptions object used to configure the output PDF file for exportPDFAsync.
     */
    static verifyExportPDFOptions(options: ExternalExportPDFOptions): void;
}
export {};
//# sourceMappingURL=ErrorHelpers.d.ts.map