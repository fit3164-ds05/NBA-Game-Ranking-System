{"version":3,"file":"DataValueFactory.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/DataValueFactory.ts"],"names":[],"mappings":";;AAAA,oEAAsE;AACtE,yDAAoD;AAEpD;;;GAGG;AACH;IAAA;IA8BA,CAAC;IA7Be,uCAAsB,GAApC,UAAqC,iBAA6C,EAAE,QAAmC;QACrH,iEAAiE;QACjE,OAAO,IAAI,yBAAS,CAClB,iBAAiB,CAAC,KAAK,EACvB,gBAAgB,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,EACrG,iBAAiB,CAAC,cAAc,EAChC,iBAAiB,CAAC,YAAY,EAC9B,iBAAiB,CAAC,QAAQ,CAC3B,CAAC;IACJ,CAAC;IAEa,oCAAmB,GAAjC,UAAkC,iBAA6C;QAC7E,gFAAgF;QAChF,OAAO,IAAI,yBAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC,cAAc,CAAC,CAAC;IAC3G,CAAC;IAEa,mCAAkB,GAAhC,UAAiC,iBAA6C,EAAE,QAAmC;QACjH,0EAA0E;QAC1E,uFAAuF;QACvF,iDAAiD;QACjD,0GAA0G;QAC1G,OAAO,IAAI,yBAAS,CAClB,iBAAiB,CAAC,KAAK,EACvB,iBAAiB,CAAC,KAAK,KAAK,SAAS;YACnC,CAAC,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC;YACjG,CAAC,CAAC,SAAS,EACb,iBAAiB,CAAC,cAAc,CACjC,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,4CAAgB","sourcesContent":["import * as InternalContract from '@tableau/api-internal-contract-js';\nimport { DataValue } from '../Models/GetDataModels';\n\n/**\n * In version 2 of the interface, we should collapse value into nativeValue, and do all this work over\n * in the platform.\n */\nexport class DataValueFactory {\n  public static MakeParameterDataValue(internalDataValue: InternalContract.DataValue, dataType: InternalContract.DataType): DataValue {\n    // Parameter values are all strings, convert from string to value\n    return new DataValue(\n      internalDataValue.value,\n      InternalContract.DataTypeConverter.convertStringValueToNativeValue(internalDataValue.value, dataType),\n      internalDataValue.formattedValue,\n      internalDataValue.aliasedValue,\n      internalDataValue.hasAlias,\n    );\n  }\n\n  public static MakeFilterDataValue(internalDataValue: InternalContract.DataValue): DataValue {\n    // Filters already have native type in value, just use that for nativeValue also\n    return new DataValue(internalDataValue.value, internalDataValue.value, internalDataValue.formattedValue);\n  }\n\n  public static MakeTableDataValue(internalDataValue: InternalContract.DataValue, dataType: InternalContract.DataType): DataValue {\n    // DataTables contain boolean | number | string | date as string | '%null%\n    // convertValueToNativeValue converts dates as string to dates, and any special to null\n    // (boolean, numbers, strings are passed through)\n    // Because of IncludeDataValuesOption - we can have undefined values, which are different than any special\n    return new DataValue(\n      internalDataValue.value,\n      internalDataValue.value !== undefined\n        ? InternalContract.DataTypeConverter.convertValueToNativeValue(internalDataValue.value, dataType)\n        : undefined,\n      internalDataValue.formattedValue,\n    );\n  }\n}\n"]}