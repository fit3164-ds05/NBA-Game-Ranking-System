import { CustomViewImpl } from '../Impl/CustomViewImpl';
import { ApiService } from './ServiceRegistry';
/**
 * API Service for interacting with Viz images
 */
export interface VizService extends ApiService {
    /**
     * @param inputSpec the input json containing the embedded data and visual spec details
     *
     * @since 1.6.0
     */
    createVizImageAsync(inputSpec: object): Promise<string>;
    /**
     * @param name The name of the sheet to activae
     *
     * @since 3.2.0
     *
     * For embedding only
     */
    activateSheetAsync(name: string): Promise<void>;
    /**
     *
     * @since 3.3.0
     * Gets the collection of CustomView objects associated with the workbook.
     *
     * For embedding only
     */
    getCustomViewsAsync(): Promise<Array<CustomViewImpl>>;
    /**
     *
     * @since 3.3.0
     * Changes the visualization to show the named saved state.
     * ```workbook.showCustomViewAsync("Awesome" ).then(function() { // do something });```
     * To reset a custom view to the original view, do not provide the customViewName parameter.
     * ```workbook.showCustomViewAsync().then(function() { // do something });```
     *
     * For embedding only
     */
    showCustomViewAsync(customViewName?: string | null): Promise<CustomViewImpl | undefined>;
    /**
     *
     * @since 3.3.0
     * Removes the named custom view.
     *
     * For embedding only
     */
    removeCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;
    /**
     *
     * @since 3.3.0
     * Saves the current state of the workbook by assigning a custom view name.
     *
     * For embedding only
     */
    saveCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;
    /**
     *
     * @since 3.3.0
     * Sets the active custom view as the default.
     *
     * For embedding only
     */
    setActiveCustomViewAsDefaultAsync(): Promise<void>;
    /**
     *
     * @since 3.3.0
     * Updates an existing custom view.
     *
     * For embedding only
     */
    saveAsync(customView: CustomViewImpl): Promise<CustomViewImpl>;
    /**
     * @since 3.3.0
     * Gets the visualization's current URL.
     */
    getCurrentSrcAsync(): Promise<string>;
}
//# sourceMappingURL=VizService.d.ts.map