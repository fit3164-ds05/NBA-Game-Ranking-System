import { ExportCrosstabSheetMap, ExportFile, ExportPDFOptions as InternalExportPDFOptions, VisualId } from '@tableau/api-internal-contract-js';
import { CrosstabFileFormat, ExportDataOptions, ExportPDFOptions as ExternalExportPDFOptions, ExportScenariosForPDFAndPowerPoint, SheetType as ExternalSheetType } from '@tableau/api-external-contract-js';
import { ApiService } from './ServiceRegistry';
/**
 * Service for exporting sheets to a file.
 *
 * @interface ExportService
 * @extends {ApiService}
 */
export interface ExportService extends ApiService {
    /**
     * Gets an internal ExportCrosstabSheetMap model which is a map of sheet names to their sheet identifiers.
     */
    getExportCrosstabSheetMapAsync(currentSheetType: ExternalSheetType): Promise<ExportCrosstabSheetMap>;
    /**
     * Exports the crosstab of any given worksheet within the current view to a
     * specified format (CrosstabFileFormat.Excel, CrosstabFileFormat.CSV).
     * Throws an error if the sheet name does not match any worksheets within the active sheet.
     * Throws an error if the crosstab file failed to be created.
     * Note: exportCrosstabAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.
     */
    exportCrosstabAsync(sheetName: string, format: CrosstabFileFormat, exportableWorksheetNames: Array<string>, currentSheetType: ExternalSheetType): Promise<ExportFile>;
    /**
     * Exports the summary data shown in the View Data window
     * (shown when you click Download > Data from the toolbar for any given worksheet within the current view).
     * The current file format is CSV. There is no limitation on the amount of summary data you can export.
     * Throws an error if the sheet name does not match any worksheets within the active sheet.
     * Throws an error if the CSV file failed to be created.
     * Note: exportDataAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.
     */
    exportDataAsync(visualId: VisualId, options: ExportDataOptions): Promise<void>;
    /**
     * Gets an internal ExportPDFOptions model which is used by the pres layer to configure a PDF export.
     */
    getExportPDFOptionsAsync(): Promise<InternalExportPDFOptions>;
    /**
     * Exports the list of sheets with the given {@link ExportPDFOptions} options. If no sheets are specified, the current sheet is exported.
     * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.
     * If no ExportPDFOptions are specified, the default settings are: Scaling = Automatic, PageSize = Letter, and Orientation = Portrait.
     *
     * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.
     * Throws an error if the PDF file fails to be created.
     *
     * Note: exportPDFAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.
     */
    exportPDFAsync(sheetNames: Array<string>, externalExportPdfOptions: ExternalExportPDFOptions, exportScenarios: ExportScenariosForPDFAndPowerPoint): Promise<ExportFile>;
    /**
     * Exports the list of sheets to a PowerPoint file. If no sheets are specified, the current sheet is exported.
     * The order the sheets appear in the list is the order the sheets appear in the PowerPoint file.
     * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.
     *
     * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.
     * Throws an error if the PowerPoint file fails to be created.
     *
     * Note: exportPowerPointAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.
     */
    exportPowerPointAsync(sheetNames: Array<string>, exportScenarios: ExportScenariosForPDFAndPowerPoint): Promise<ExportFile>;
}
//# sourceMappingURL=ExportService.d.ts.map