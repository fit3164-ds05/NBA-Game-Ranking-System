{"version":3,"file":"GetDataService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/GetDataService.ts"],"names":[],"mappings":";;AAKA;;GAEG;AACH,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,wCAAyB,CAAA;AAC3B,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { IncludeDataValuesOption } from '@tableau/api-external-contract-js';\nimport { VisualId } from '@tableau/api-internal-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * Defines which type of getData call to make.\n */\nexport enum GetDataType {\n  Summary = 'summary',\n  Underlying = 'underlying',\n}\n\n/**\n * Service for implementing the logic for various getData calls\n *\n * @interface GetDataService\n * @extends {ApiService}\n */\nexport interface GetDataService extends ApiService {\n  /**\n   * Gets the limit of rows for getUnderlyingDataAsync\n   */\n  getMaxRowLimit(): number;\n\n  /**\n   * Gets the underlying data for a particular visual\n   *\n   * @param {VisualId} visualId  The visual id\n   * @param {GetDataType} getType  The type of getData call to make\n   * @param {boolean} ignoreAliases  Whether or not aliases should be ignored\n   * @param {boolean} ignoreSelection  Whether or not selection should be ignored\n   * @param {boolean} includeAllColumns  Should all columns be included\n   * @param {Array} columnsToIncludeById Overrides includeAllColumns, lists the columns to include. Empty means all columns.\n   * @param {number} maxRows  Maximum number of rows to return\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getUnderlyingDataAsync(\n    visualId: VisualId,\n    getType: GetDataType,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    maxRows: number,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<Contract.DataTable>;\n\n  /**\n   * @param {VisualId} visualId  The visual id\n   * @param {number} pageRowCount The number of rows per page. The default and maximum is 10,000 rows.\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {boolean} ignoreSelection  Whether selections in this viz should be ignored in the returned data\n   * @param {boolean} includeAllColumns  Should all columns be included\n   * @param {Array} columnsToIncludeById Overrides includeAllColumns, lists the columns to include. Empty means all columns\n   * @returns {Promise<Contract.DataTableReader>}  Data table reader to access the underlying data\n   */\n  getSummaryDataReaderAsync(\n    visualId: VisualId,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<Contract.DataTableReader>;\n\n  /**\n   * Gets the currently selected marks for a given visual\n   *\n   * @param {VisualId} visualId  The visual id\n   * @returns {Promise<ActiveMarks>}  Collection of data tables with the active marks\n   */\n  getSelectedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection>;\n\n  /**\n   * Gets the currently highlighted marks for a given visual\n   *\n   * @param {VisualId} visualId  The visual id\n   * @returns {Promise<ActiveMarks>}  Collection of data tables with the active marks\n   */\n  getHighlightedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection>;\n\n  /**\n   * @param {string} datasourceId  The id of the datasource\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {number} maxRows The maximum number of rows to retrieve\n   * @param {Array<string>} columnsToInclude Columns which should be returned specified by caption. Empty means all columns\n   * @param {Array<string>} columnsToIncludeById Columns which should be returned specified by name. Empty means all columns\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getDataSourceDataAsync(\n    datasourceId: string,\n    ignoreAliases: boolean,\n    maxRows: number,\n    columnsToInclude: Array<string>,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<Contract.DataTable>;\n\n  /**\n   * @param {string} datasourceId  The id of the datasource\n   * @param {string} logicalTableId  The id of the logcial table\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {number} maxRows The maximum number of rows to retrieve\n   * @param {Array<string>} columnsToInclude Columns which should be returned specified by caption. Empty means all columns\n   * @param {Array<string>} columnsToIncludeById Columns which should be returned specified by name. Empty means all columns\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getLogicalTableDataAsync(\n    datasourceId: string,\n    logicalTableId: string,\n    ignoreAliases: boolean,\n    maxRows: number,\n    columnsToInclude: Array<string>,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<Contract.DataTable>;\n\n  /**\n   * @param {string} datasourceId  The id of the datasource\n   * @param {string} logicalTableId  The id of the logcial table\n   * @param {number} pageRowCount The number of rows per page. The default and maximum is 10,000 rows.\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {Array<string>} columnsToIncludeById Columns which should be returned specified by name. Empty means all columns\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getLogicalTableDataReaderAsync(\n    datasourceId: string,\n    logicalTableId: string,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<Contract.DataTableReader>;\n\n  /**\n   * @param {VisualId} visualId  The visual id\n   * @param {string} logicalTableId  The id of the logcial table\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {boolean} ignoreSelection  Whether selections in this viz should be ignored in the returned data\n   * @param {boolean} includeAllColumns  Whether to include all columns or only the referenced columns\n   * @param {Array} columnsToIncludeById Overrides includeAllColumns, lists the columns to include. Empty means all columns.\n   * @param {number} maxRows The maximum number of rows to retrieve\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getUnderlyingTableDataAsync(\n    visualId: VisualId,\n    logicalTableId: string,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    maxRows: number,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<Contract.DataTable>;\n\n  /**\n   * @param {VisualId} visualId  The visual id\n   * @param {string} logicalTableId  The id of the logcial table\n   * @param {number} pageRowCount The number of rows per page. The default and maximum is 10,000 rows.\n   * @param {boolean} ignoreAliases  Whether alias values should be ignored in the returned data\n   * @param {boolean} ignoreSelection  Whether selections in this viz should be ignored in the returned data\n   * @param {boolean} includeAllColumns  Whether to include all columns or only the referenced columns\n   * @param {Array} columnsToIncludeById Overrides includeAllColumns, lists the columns to include. Empty means all columns.\n   * @returns {Promise<Contract.DataTable>}  Data table with the requested data\n   */\n  getUnderlyingTableDataReaderAsync(\n    visualId: VisualId,\n    logicalTableId: string,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting,\n  ): Promise<Contract.DataTableReader>;\n\n  /**\n   * @param {VisualId} visualId  The visual id\n   */\n  getSummaryColumnsInfoAsync(visualId: VisualId): Promise<Array<Contract.Column>>;\n\n  /**\n   * @param tableId     The table id used to fetch data.\n   * @param pageNumber  The page number (zero-based).\n   * @param pageSize    The page size of the owning DataTableReader\n   * @returns           A DataTable containing the requested page. The number of rows returned\n   *                    can be less than requested at the end of the data.\n   */\n  getPageAsync(tableId: string, pageNumber: number, pageSize: number): Promise<Contract.DataTable>;\n\n  /**\n   * @param tableId     The table id used to fetch data.\n   */\n  releaseAsync(tableId: string): Promise<void>;\n}\n"]}