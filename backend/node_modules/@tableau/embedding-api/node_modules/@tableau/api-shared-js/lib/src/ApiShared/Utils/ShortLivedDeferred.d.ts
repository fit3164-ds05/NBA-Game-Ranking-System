/**
 * A Deferred wrapper class adding functionality to reject unresponsive promises after timeout
 *
 * this class handles two things:

 *    1. Adds timeout logic for deferred
 *    2. It blocks multiple calls from executing at the same time.
 *
 * @export
 * @class ShortLivedDeferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 *
 */
export declare class ShortLivedDeferred<TResolve, TReject = any> {
    private _timeoutInMilliseconds;
    private _deferred;
    private _timeoutId;
    constructor(_timeoutInMilliseconds?: number);
    getNewPromiseOrThrowIfBusy(): Promise<TResolve>;
    resolve(response: TResolve | PromiseLike<TResolve>): void;
    reject(error: any): void;
}
//# sourceMappingURL=ShortLivedDeferred.d.ts.map