import { AnnotationType as ExternalAnnotationType, ClassNameKey as ExternalClassNameKey, ColumnType as ExternalColumnType, DashboardObjectType as ExternalDashboardObjectType, DataType as ExternalDataType, PeriodType as ExternalDatePeriod, DateRangeType as ExternalDateRangeType, ErrorCodes as ExternalErrorCodes, ExtensionContext as ExternalExtensionsContext, ExtensionMode as ExternalExtensionsMode, FieldAggregationType as ExternalFieldAggregationType, FieldRoleType as ExternalFieldRoleType, FilterType as ExternalFilterType, FilterUpdateType as ExternalFilterUpdateType, HierarchicalLevelSelectionState as ExternalHierarchicalLevelSelectionState, MarkType as ExternalMarkType, ParameterValueType as ExternalParameterValueType, SheetType as ExternalSheetType } from '@tableau/api-external-contract-js';
import { AnnotateEnum as InternalAnnotationType, ClassNameKey as InternalClassNameKey, ColumnType as InternalColumnType, DashboardObjectType as InternalDashboardObjectType, DataType as InternalDataType, DateRangeType as InternalDateRangeType, DateStepPeriod as InternalDateStepPeriod, DomainRestrictionType as InternalDomainRestrictionType, ErrorCodes as InternalErrorCodes, ExtensionContext as InternalExtensionsContext, ExtensionMode as InternalExtensionsMode, FieldAggregationType as InternalFieldAggregationType, FieldRoleType as InternalFieldRoleType, FilterType as InternalFilterType, FilterUpdateType as InternalFilterUpdateType, HierarchicalLevelSelectionState as InternalHierarchicalLevelSelectionState, MarkType as InternalMarkType, SheetType as InternalSheetType } from '@tableau/api-internal-contract-js';
import { EnumConverter } from '../Utils/EnumConverter';
/**
 * Maps enums used by the internal-api-contract to the enums used
 * in the external-api-contract, which developers code against.
 */
export declare class InternalToExternalEnumMappings {
    static extensionContext: EnumConverter<InternalExtensionsContext, ExternalExtensionsContext>;
    static extensionMode: EnumConverter<InternalExtensionsMode, ExternalExtensionsMode>;
    static columnType: EnumConverter<InternalColumnType, ExternalColumnType>;
    static fieldAggregationType: EnumConverter<InternalFieldAggregationType, ExternalFieldAggregationType>;
    static fieldRoleType: EnumConverter<InternalFieldRoleType, ExternalFieldRoleType>;
    static sheetType: EnumConverter<InternalSheetType, ExternalSheetType>;
    static dashboardObjectType: EnumConverter<InternalDashboardObjectType, ExternalDashboardObjectType>;
    static dataType: EnumConverter<InternalDataType, ExternalDataType>;
    static filterUpdateType: EnumConverter<InternalFilterUpdateType, ExternalFilterUpdateType>;
    static allowableValues: EnumConverter<InternalDomainRestrictionType, ExternalParameterValueType>;
    static dateStepPeriod: EnumConverter<InternalDateStepPeriod, ExternalDatePeriod>;
    static dateRangeType: EnumConverter<InternalDateRangeType, ExternalDateRangeType>;
    static errorCode: EnumConverter<InternalErrorCodes, ExternalErrorCodes>;
    static filterType: EnumConverter<InternalFilterType, ExternalFilterType>;
    static classNameKey: EnumConverter<InternalClassNameKey, ExternalClassNameKey>;
    static hierarchicalLevelSelectionState: EnumConverter<InternalHierarchicalLevelSelectionState, ExternalHierarchicalLevelSelectionState>;
    static annotationType: EnumConverter<InternalAnnotationType, ExternalAnnotationType>;
    static markType: EnumConverter<InternalMarkType, ExternalMarkType>;
}
//# sourceMappingURL=InternalToExternalEnumMappings.d.ts.map