import * as Contract from '@tableau/api-external-contract-js';
import { DataType, MarkType } from '@tableau/api-external-contract-js';
export declare class DataTable implements Contract.DataTable {
    private _data;
    private _columns;
    private _totalRowCount;
    private _isTotalRowCountLimited;
    private _isSummaryData;
    private _marksInfo?;
    private _name;
    constructor(_data: Array<Array<Contract.DataValue>>, _columns: Array<Contract.Column>, _totalRowCount: number, _isTotalRowCountLimited: boolean, _isSummaryData: boolean, _marksInfo?: MarkInfo[] | undefined);
    get name(): string;
    get data(): Array<Array<Contract.DataValue>>;
    get columns(): Array<Contract.Column>;
    get marksInfo(): Array<Contract.MarkInfo> | undefined;
    get totalRowCount(): number;
    get isTotalRowCountLimited(): boolean | undefined;
    get isSummaryData(): boolean | undefined;
}
export declare class MarkInfo implements Contract.MarkInfo {
    private _type;
    private _color;
    private _tupleId?;
    constructor(_type: MarkType, _color: string, _tupleId?: number | undefined);
    get type(): MarkType;
    get color(): string;
    get tupleId(): number | undefined;
}
export declare class Column implements Contract.Column {
    private _fieldName;
    private _fieldId;
    private _dataType;
    private _isReferenced;
    private _index;
    constructor(_fieldName: string, _fieldId: string, _dataType: DataType, _isReferenced: boolean, _index: number);
    get fieldName(): string;
    get fieldId(): string;
    get dataType(): DataType;
    get isReferenced(): boolean;
    get index(): number;
}
export declare class DataValue implements Contract.DataValue {
    private _value;
    private _nativeValue;
    private _formattedValue?;
    private _aliasValue?;
    private _hasAlias?;
    constructor(_value: any, _nativeValue: any, _formattedValue?: string | undefined, _aliasValue?: string | undefined, _hasAlias?: boolean | undefined);
    get value(): any;
    get nativeValue(): any;
    get formattedValue(): string | undefined;
    get aliasValue(): string | undefined;
    get hasAlias(): boolean | undefined;
}
//# sourceMappingURL=GetDataModels.d.ts.map