import { ExecuteParameters, ExecuteResponse, InternalApiDispatcher, NotificationHandler, VerbId, VersionNumber } from '@tableau/api-internal-contract-js';
/**
 * Implementation of the InternalApiDispatcher which supports upgrading and downgrading the input
 * internal contract to the version that this module is built against
 *
 * @class VersionedExternalApiDispatcher
 * @implements {InternalApiDispatcher}
 */
export declare class VersionedExternalApiDispatcher implements InternalApiDispatcher {
    private _apiDelegateDispatcher;
    private _versionConverter;
    private _notificationHandlers;
    /**
     * Creates a new instance of the VersionedExternalApiDispatcher
     * We have multiple version converting dispatchers that work together.
     * If needed, the VersionedExternalApiDispatcher wraps either the InternalApiDispatcher (desktop)
     * or the CrossFrameDispatcher (server).
     * The Internal/CrossFrame dispatchers handle an updated platform with an older external library.
     * (The CrossFrameDispatcher sends messages across the frame, and it is handled by the PresLayerHandler.)
     * Meanwhile, the VersionedExternalApiDispatcher handles an updated external library with an older platform.
  
     * @param _apiDelegateDispatcher The delegate that does the actual work.
     * @param platformVersionNumber The version of the internal contract which the platform module is using.
     * This number will be used to figure out how to downgrade incoming commands and upgrade the results
     */
    constructor(_apiDelegateDispatcher: InternalApiDispatcher, platformVersionNumber: VersionNumber);
    static needsVersionConverter(platformVersion: VersionNumber): boolean;
    execute(verb: VerbId, parameters: ExecuteParameters): Promise<ExecuteResponse>;
    registerNotificationHandler(handler: NotificationHandler): void;
    unregisterNotificationHandler(handler: NotificationHandler): void;
}
//# sourceMappingURL=VersionedExternalApiDispatcher.d.ts.map