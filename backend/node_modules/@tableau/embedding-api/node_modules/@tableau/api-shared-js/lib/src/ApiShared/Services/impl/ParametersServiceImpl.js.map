{"version":3,"file":"ParametersServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/ParametersServiceImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8EAA+D;AAC/D,8EAA4H;AAC5H,0DAAyD;AACzD,mDAAkD;AAGlD,qDAAoD;AAEpD;IAA2C,yCAAe;IAA1D;;IA8EA,CAAC;IA7EC,sBAAW,8CAAW;aAAtB;YACE,6CAA+B;QACjC,CAAC;;;OAAA;IAEM,0DAA0B,GAAjC,UAAkC,SAAoB;;QACpD,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,4BAA4B;YACxD,GAAC,sCAAW,CAAC,SAAS,IAAG,SAAS;eACnC,CAAC;QAEF,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEM,qDAAqB,GAA5B;;QACE,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,4BAA4B;eACzD,CAAC;QAEF,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEO,kDAAkB,GAA1B,UAA2B,eAAkC;QAA7D,iBAOC;QANC,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YAC/E,IAAM,MAAM,GAAG,QAAQ,CAAC,MAA8B,CAAC;YACvD,OAAO,MAAM,CAAC,GAAG,CAAC,UAAC,aAAa;gBAC9B,OAAO,IAAI,6BAAa,CAAC,aAAa,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,yDAAyB,GAAhC,UAAiC,SAAiB,EAAE,QAAgB;;QAClE,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,2BAA2B;YACvD,GAAC,sCAAW,CAAC,kBAAkB,IAAG,SAAS;YAC3C,GAAC,sCAAW,CAAC,cAAc,IAAG,QAAQ;eACvC,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YACzE,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAuB,CAAC;YAChD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wDAAwB,GAA/B,UAAgC,IAAY;QAC1C,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC;IAEM,mEAAmC,GAA1C,UAA2C,SAAiB;QAC1D,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,CAAC;IAEO,kDAAkB,GAA1B,UAA2B,IAAwB,EAAE,SAA6B;;QAAlF,iBAyBC;QAxBC,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,oBAAoB;eACjD,CAAC;QACF,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,UAAU,CAAC,sCAAW,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;SACjD;aAAM,IAAI,SAAS,KAAK,SAAS,EAAE;YAClC,UAAU,CAAC,sCAAW,CAAC,kBAAkB,CAAC,GAAG,SAAS,CAAC;SACxD;aAAM;YACL,MAAM,IAAI,2BAAY,CAAC,qCAAU,CAAC,gBAAgB,EAAE,sDAAsD,CAAC,CAAC;SAC7G;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YAClE,IAAM,uBAAuB,GAAG,UAAC,MAAa;gBAC5C,OAAO,WAAW,IAAI,MAAM,CAAC;YAC/B,CAAC,CAAC;YAEF,gEAAgE;YAChE,IAAI,uBAAuB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAC/B,OAAO,IAAI,6BAAa,CAAC,MAAM,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;aACpD;iBAAM;gBACL,OAAO,SAAS,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,4BAAC;AAAD,CAAC,AA9ED,CAA2C,iCAAe,GA8EzD;AA9EY,sDAAqB","sourcesContent":["import { ErrorCodes } from '@tableau/api-external-contract-js';\nimport { ExecuteParameters, Model, ParameterId, ParameterInfo, SheetPath, VerbId } from '@tableau/api-internal-contract-js';\nimport { ParameterImpl } from '../../Impl/ParameterImpl';\nimport { TableauError } from '../../TableauError';\nimport { ParametersService } from '../ParametersService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class ParametersServiceImpl extends ServiceImplBase implements ParametersService {\n  public get serviceName(): string {\n    return ServiceNames.Parameters;\n  }\n\n  public getParametersForSheetAsync(sheetPath: SheetPath): Promise<Array<ParameterImpl>> {\n    const parameters = {\n      [ParameterId.FunctionName]: 'getParametersForSheetAsync',\n      [ParameterId.SheetPath]: sheetPath,\n    };\n\n    return this.getParametersAsync(parameters);\n  }\n\n  public getAllParametersAsync(): Promise<Array<ParameterImpl>> {\n    const parameters = {\n      [ParameterId.FunctionName]: 'getParametersForSheetAsync',\n    };\n\n    return this.getParametersAsync(parameters);\n  }\n\n  private getParametersAsync(inputParameters: ExecuteParameters): Promise<Array<ParameterImpl>> {\n    return this.execute(VerbId.GetParametersForSheet, inputParameters).then((response) => {\n      const result = response.result as Array<ParameterInfo>;\n      return result.map((parameterInfo) => {\n        return new ParameterImpl(parameterInfo, this._registryId);\n      });\n    });\n  }\n\n  public changeParameterValueAsync(fieldName: string, newValue: string): Promise<ParameterInfo> {\n    const parameters = {\n      [ParameterId.FunctionName]: 'changeParameterValueAsync',\n      [ParameterId.ParameterFieldName]: fieldName,\n      [ParameterId.ParameterValue]: newValue,\n    };\n\n    return this.execute(VerbId.ChangeParameterValue, parameters).then((response) => {\n      const result = response.result as ParameterInfo;\n      return result;\n    });\n  }\n\n  public findParameterByNameAsync(name: string): Promise<ParameterImpl | undefined> {\n    return this.findParameterAsync(name, undefined);\n  }\n\n  public findParameterByGlobalFieldNameAsync(fieldName: string): Promise<ParameterImpl | undefined> {\n    return this.findParameterAsync(undefined, fieldName);\n  }\n\n  private findParameterAsync(name: string | undefined, fieldName: string | undefined): Promise<ParameterImpl | undefined> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'findParameterAsync',\n    };\n    if (name !== undefined) {\n      parameters[ParameterId.ParameterCaption] = name;\n    } else if (fieldName !== undefined) {\n      parameters[ParameterId.ParameterFieldName] = fieldName;\n    } else {\n      throw new TableauError(ErrorCodes.InvalidParameter, 'name or fieldName must be provided to find parameter');\n    }\n\n    return this.execute(VerbId.FindParameter, parameters).then((response) => {\n      const instanceOfParameterInfo = (object: Model): object is ParameterInfo => {\n        return 'fieldName' in object;\n      };\n\n      // We need to check to see if we got a valid response back again\n      if (instanceOfParameterInfo(response.result)) {\n        const result = response.result;\n        return new ParameterImpl(result, this._registryId);\n      } else {\n        return undefined;\n      }\n    });\n  }\n}\n"]}