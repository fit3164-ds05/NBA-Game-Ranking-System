import * as Contract from '@tableau/api-external-contract-js';
import { ApiMenuType, ContextMenuOptions, SelectionUpdateType, TooltipContext } from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { DashboardImpl } from './DashboardImpl';
import { SheetImpl } from './SheetImpl';
import { SheetInfoImpl } from './SheetInfoImpl';
import { StoryPointImpl } from './StoryPointImpl';
export declare class WorksheetImpl extends SheetImpl {
    private _visualId;
    private _parentDashboardImpl;
    private _parentStoryPointImpl;
    private _backgroundColor;
    private _formatting;
    constructor(sheetInfoImpl: SheetInfoImpl, _registryId: number, _visualId: VisualId, _parentDashboardImpl: DashboardImpl | null, _parentStoryPointImpl: StoryPointImpl | null, _backgroundColor?: string | null, _formatting?: Contract.WorkbookFormatting | null);
    get parentDashboard(): DashboardImpl | null;
    get parentStoryPoint(): StoryPointImpl | null;
    get visualId(): VisualId;
    getMaxPageRowLimit(): number;
    get backgroundColor(): string | null;
    get formatting(): Contract.WorksheetFormatting | null;
    applyFilterAsync(fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, options: Contract.FilterOptions): Promise<string>;
    applyRangeFilterAsync(fieldName: string, filterOptions: Contract.RangeFilterOptions): Promise<string>;
    applyHierarchicalFilterAsync(fieldName: string, values: Array<string> | Contract.HierarchicalLevels, updateType: Contract.FilterUpdateType, options: Contract.FilterOptions): Promise<string>;
    clearFilterAsync(fieldName: string): Promise<string>;
    applyRelativeDateFilterAsync(fieldName: string, options: Contract.RelativeDateFilterOptions): Promise<string>;
    getDataSourcesAsync(): Promise<Array<Contract.DataSource>>;
    getFiltersAsync(): Promise<Array<Contract.Filter>>;
    getSelectedMarksAsync(): Promise<Contract.MarksCollection>;
    getHighlightedMarksAsync(): Promise<Contract.MarksCollection>;
    getSummaryDataAsync(options: Contract.GetSummaryDataOptions): Promise<Contract.DataTable>;
    getSummaryDataReaderAsync(pageRowCount: number, options: Contract.GetSummaryDataOptions): Promise<Contract.DataTableReader>;
    getVisualSpecificationAsync(): Promise<Contract.VisualSpecification>;
    addMarksCardFieldsAsync(marksCardIndex: number, encodingType: Contract.EncodingType, columns: Array<Contract.Column>, startIndex: number): Promise<void>;
    moveMarksCardFieldAsync(marksCardIndex: number, fromIndex: number, toIndex: number, fieldCount: number): Promise<void>;
    spliceMarksCardFieldsAsync(marksCardIndex: number, encodingType: Contract.EncodingType, startIndex: number, deleteCount: number, columns: Array<Contract.Column>): Promise<void>;
    getSummaryColumnsInfoAsync(): Promise<Array<Contract.Column>>;
    getUnderlyingDataAsync(options: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTable>;
    getUnderlyingTablesAsync(): Promise<Array<Contract.LogicalTable>>;
    getUnderlyingTableDataAsync(logicalTableId: string, options?: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTable>;
    getUnderlyingTableDataReaderAsync(logicalTableId: string, pageRowCount?: number, options?: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTableReader>;
    clearSelectedMarksAsync(): Promise<void>;
    selectMarksByValueAsync(selections: Array<Contract.SelectionCriteria>, selectionUpdateType: SelectionUpdateType): Promise<void>;
    selectMarksByIdAsync(selections: Array<Contract.MarkInfo>, selectionUpdateType: SelectionUpdateType): Promise<void>;
    annotateMarkAsync(mark: Contract.MarkInfo, annotationText: string): Promise<void>;
    getAnnotationsAsync(): Promise<Array<Contract.Annotation>>;
    removeAnnotationAsync(annotation: Contract.Annotation): Promise<void>;
    appendContextMenuAsync(targetMenu: ApiMenuType, config: ContextMenuOptions): Promise<string>;
    removeContextMenuAsync(targetMenu: ApiMenuType, menuItemId: string): Promise<void>;
    executeContextMenuAsync(targetMenu: ApiMenuType, menuItemId: string): Promise<void>;
    renameContextMenuAsync(targetMenu: ApiMenuType, menuHeader: string, menuDescription: string): Promise<void>;
    hoverTupleAsync(hoveredTuple?: number, tooltip?: TooltipContext | null, allowHoverActions?: boolean): Promise<void>;
    selectTuplesAsync(selectedTuples: Array<number>, selectOption: Contract.SelectOptions, tooltip?: TooltipContext): Promise<void>;
    getTooltipTextAsync(tupleId: number): Promise<String>;
    leaveMarkNavigationAsync(): Promise<void>;
    editAliasesDialogAsync(fieldName: string): Promise<void>;
    private createDataSourceFromInfo;
    private verifyActiveSheet;
    private isInsideActiveStoryPoint;
    private isInsideActiveDashboard;
    private isInsideDashboardExtension;
}
//# sourceMappingURL=WorksheetImpl.d.ts.map