{"version":3,"file":"FilterService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/FilterService.ts"],"names":[],"mappings":"","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { FilterDomainType } from '@tableau/api-external-contract-js';\nimport { VisualId } from '@tableau/api-internal-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * Service for implementing the logic for filter related APIs\n *\n * @interface FilterService\n * @extends {ApiService}\n */\nexport interface FilterService extends ApiService {\n  /**\n   * Applies a categorical filter\n   *\n   * @param {VisualId} visualid  The visual to apply filter\n   * @param {string} fieldName  The field to apply the filter on\n   * @param {Array<string>} values  the list of values to filter on\n   * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)\n   * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)\n   *\n   * @return the field that filter was applied on\n   */\n  applyFilterAsync(\n    visualid: VisualId,\n    fieldName: string,\n    values: Array<string>,\n    updateType: Contract.FilterUpdateType,\n    filterOptions: Contract.FilterOptions,\n  ): Promise<string>;\n\n  /**\n   * Applies a range filter\n   *\n   * @param {VisualId} visualId the visual to apply filter\n   * @param {string} fieldName the field to apply the filter\n   * @param {RangeFilterOptions} filterOptions the range filter options (min, max, nullOptions)\n   *\n   * @return the field that the filter was applied on\n   */\n  applyRangeFilterAsync(visualId: VisualId, fieldName: string, filterOptions: Contract.RangeFilterOptions): Promise<string>;\n\n  /**\n   * Applies a hierarchical filter\n   *\n   * @param {VisualId} visualid  The visual to apply filter\n   * @param {string} fieldName  The field to apply the filter on\n   * @param {Array<string>| Contract.HierarchicalLevels} values  the list of values or levels to filter on\n   * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)\n   * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)\n   *\n   * @return the field that filter was applied on\n   */\n  applyHierarchicalFilterAsync(\n    visualid: VisualId,\n    fieldName: string,\n    values: Array<string> | Contract.HierarchicalLevels,\n    updateType: Contract.FilterUpdateType,\n    filterOptions: Contract.FilterOptions,\n  ): Promise<string>;\n\n  /**\n   * Clears the filter for the provided field\n   *\n   * @param {VisualId} visualid  The visual to clear filter\n   * @param {string} fieldName  The field to clear filter on\n   *\n   * @return the field that filter was cleared on\n   */\n  clearFilterAsync(visualId: VisualId, fieldName: string): Promise<string>;\n\n  /**\n   * Applies a range filter\n   *\n   * @param {VisualId} visualId the visual to apply filter\n   * @param {string} fieldName the field to apply the filter\n   * @param {RelativeDateFilterOptions} options the relative date filter options (anchorDate, periodType, rangeType, rangeN)\n   *\n   * @return the field that the filter was applied on\n   */\n  applyRelativeDateFilterAsync(visualId: VisualId, fieldName: string, options: Contract.RelativeDateFilterOptions): Promise<string>;\n\n  /**\n   * Gets a list of filters for the provided worksheet\n   *\n   * @param {VisualId} visualId the worksheet to get filters from\n   */\n  getFiltersAsync(visualId: VisualId): Promise<Array<Contract.Filter>>;\n\n  /**\n   * Gets the domain of a categorical filter\n   *\n   * @param {string} worksheetName the name of the worksheet\n   * @param {fieldId} fieldId the id of the field of the filter\n   */\n  getCategoricalDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.CategoricalDomain>;\n\n  /**\n   * Gets the domain of a range filter\n   *\n   * @param {string} worksheetName the name of the worksheet\n   * @param {string} fieldId the id of the field of the filter\n   * @param {FilterDomainType} domainType the type of domain (relevant vs. database)\n   */\n  getRangeDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.RangeDomain>;\n\n  /**\n   * Gets a list of filters for the provided dashboard\n   */\n  getDashboardFiltersAsync(): Promise<Array<Contract.Filter>>;\n\n  /**\n   * Applies a categorical filter on all the worksheets in a dashboard\n   *\n   * @param {string} fieldName  The field to apply the filter on\n   * @param {Array<string>} values  the list of values to filter on\n   * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)\n   * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)\n   *\n   * @return the field that filter was applied on\n   */\n  applyDashboardFilterAsync(\n    fieldName: string,\n    values: Array<string>,\n    updateType: Contract.FilterUpdateType,\n    filterOptions: Contract.FilterOptions,\n  ): Promise<string>;\n\n  /**\n   * @param {string} worksheetName the name of the worksheet\n   * @param {string} fieldId the id of the field of the filter\n   *\n   * @return {Array<string>} the list of worksheets that have the filter applied\n   */\n  getAppliedWorksheetsAsync(worksheetName: string, fieldId: string): Promise<Array<string>>;\n\n  /**\n   * @param {string} worksheetName the name of the worksheet\n   * @param {string} fieldName the field name of the filter\n   * @param {string} fieldId the id of the field of the filter\n   * @param {Array<string>} applyToWorksheets list of worksheets to apply the filter on\n   *\n   * @return {Array<string>} the list of worksheets that have the filter applied\n   */\n  setAppliedWorksheetsAsync(\n    worksheetName: string,\n    fieldName: string,\n    fieldId: string,\n    applyToWorksheets: Array<string>,\n  ): Promise<Array<string>>;\n}\n"]}