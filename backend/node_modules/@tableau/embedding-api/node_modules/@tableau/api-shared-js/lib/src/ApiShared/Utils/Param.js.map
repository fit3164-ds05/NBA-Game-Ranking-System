{"version":3,"file":"Param.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/Param.ts"],"names":[],"mappings":";;AAAA,8EAA+D;AAC/D,gDAA+C;AAC/C,+CAA8C;AAE9C;IAAA;IA8GA,CAAC;IA7GC;;;OAGG;IACW,8BAAwB,GAAtC,UAAuC,IAAU;QAC/C,IAAM,IAAI,GAAW,IAAI,CAAC,cAAc,EAAE,CAAC;QAC3C,IAAM,KAAK,GAAW,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC7C,IAAM,GAAG,GAAW,IAAI,CAAC,UAAU,EAAE,CAAC;QACtC,IAAM,EAAE,GAAW,IAAI,CAAC,WAAW,EAAE,CAAC;QACtC,IAAM,EAAE,GAAW,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,IAAM,GAAG,GAAW,IAAI,CAAC,aAAa,EAAE,CAAC;QACzC,OAAU,IAAI,SAAI,KAAK,SAAI,GAAG,SAAI,EAAE,SAAI,EAAE,SAAI,GAAK,CAAC;IACtD,CAAC;IAEa,iCAA2B,GAAzC,UAA0C,IAAa;QACrD,OAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IACjC,CAAC;IAEa,gCAA0B,GAAxC,UAAyC,GAAW;QAClD,OAAO,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,qCAAqC;IACvB,kBAAY,GAA1B,UAA2B,KAAU;QACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,qCAAqC;IACvB,gBAAU,GAAxB,UAAyB,KAAU;QACjC,OAAO,KAAK,YAAY,IAAI,CAAC;IAC/B,CAAC;IAED,qCAAqC;IACvB,kBAAY,GAA1B,UAA2B,KAAU;QACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,CAAC;IAC9D,CAAC;IAED,qCAAqC;IACvB,gBAAU,GAAxB,UAAyB,KAAU;QACjC,OAAO,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,YAAY,OAAO,CAAC;IAChE,CAAC;IAED;;OAEG;IACH,qCAAqC;IACvB,uBAAiB,GAA/B,UAAgC,KAAU;QACxC,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;IAC/C,CAAC;IAED,qCAAqC;IACvB,6BAAuB,GAArC,UAAsC,KAAU;QAC9C,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC,0BAA0B,CAAC,KAAe,CAAC,CAAC;SAC1D;aAAM,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC,wBAAwB,CAAC,KAAa,CAAC,CAAC;SACtD;aAAM,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC,2BAA2B,CAAC,KAAgB,CAAC,CAAC;SAC5D;aAAM,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;aAAM;YACL,MAAM,IAAI,2BAAY,CAAC,qCAAU,CAAC,aAAa,EAAE,mCAAiC,KAAO,CAAC,CAAC;SAC5F;IACH,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IACpB,2BAAqB,GAAnC,UAAoC,KAAa,EAAE,SAAiB;QAClE,2BAAY,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,2BAAY,CAAC,qCAAU,CAAC,gBAAgB,EAAE,kCAAgC,SAAS,MAAG,CAAC,CAAC;SACnG;QAED,OAAO,KAAK,YAAY,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,qCAAqC;IACvB,oBAAc,GAA5B,UAA6B,KAAU;QACrC,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;SAC3B;QAED,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,EAAE,MAAM,EAAE,KAAe,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SACnD;QAED,IAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,WAAW,KAAK,KAAK,EAAE;YACzB,sEAAsE;YACtE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SACvC;QAED,IAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;QACvC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;YACjB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;SAC3B;QAED,OAAO,EAAE,MAAM,QAAA,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACnC,CAAC;IACH,YAAC;AAAD,CAAC,AA9GD,IA8GC;AA9GY,sBAAK","sourcesContent":["import { ErrorCodes } from '@tableau/api-external-contract-js';\nimport { TableauError } from '../TableauError';\nimport { ErrorHelpers } from './ErrorHelpers';\n\nexport class Param {\n  /**\n   * serializes the date into the format that the server expects.\n   * @param date the date to serialize\n   */\n  public static serializeDateForPlatform(date: Date): string {\n    const year: number = date.getUTCFullYear();\n    const month: number = date.getUTCMonth() + 1;\n    const day: number = date.getUTCDate();\n    const hh: number = date.getUTCHours();\n    const mm: number = date.getUTCMinutes();\n    const sec: number = date.getUTCSeconds();\n    return `${year}-${month}-${day} ${hh}:${mm}:${sec}`;\n  }\n\n  public static serializeBooleanForPlatform(bool: boolean): string {\n    return bool ? 'true' : 'false';\n  }\n\n  public static serializeNumberForPlatform(num: number): string {\n    return num.toString(10);\n  }\n\n  /**\n   * Verifies the input is a number\n   */\n  /* tslint:disable-next-line:no-any */\n  public static isTypeNumber(input: any): boolean {\n    return typeof input === 'number' || input instanceof Number;\n  }\n\n  /**\n   * Verifies the input is a Date\n   */\n  /* tslint:disable-next-line:no-any */\n  public static isTypeDate(input: any): boolean {\n    return input instanceof Date;\n  }\n\n  /* tslint:disable-next-line:no-any */\n  public static isTypeString(input: any): boolean {\n    return typeof input === 'string' || input instanceof String;\n  }\n\n  /* tslint:disable-next-line:no-any */\n  public static isTypeBool(input: any): boolean {\n    return typeof input === 'boolean' || input instanceof Boolean;\n  }\n\n  /**\n   * Determines if the input is null or undefined\n   */\n  /* tslint:disable-next-line:no-any */\n  public static isNullOrUndefined(input: any): boolean {\n    return input === null || input === undefined;\n  }\n\n  /* tslint:disable-next-line:no-any */\n  public static serializeParameterValue(value: any): string {\n    if (Param.isTypeNumber(value)) {\n      return Param.serializeNumberForPlatform(value as number);\n    } else if (Param.isTypeDate(value)) {\n      return Param.serializeDateForPlatform(value as Date);\n    } else if (Param.isTypeBool(value)) {\n      return Param.serializeBooleanForPlatform(value as boolean);\n    } else if (Param.isTypeString(value)) {\n      return value;\n    } else {\n      throw new TableauError(ErrorCodes.InternalError, `Unexpected invalid value for: ${value}`);\n    }\n  }\n\n  /**\n   * Verifies that the parameter is already a Map, or converts an object to a Map.\n   * If the parameter is an object, we convert it to a Map using Object.entries.\n   * @throws if the parameter is not an object or Map\n   */\n  // tslint:disable-next-line:no-any\n  public static convertParameterToMap(param: object, paramName: string): Map<any, any> {\n    ErrorHelpers.verifyParameterType(param, 'object', paramName);\n    if (Array.isArray(param)) {\n      throw new TableauError(ErrorCodes.InvalidParameter, `Expecting object or Map for: ${paramName}.`);\n    }\n\n    return param instanceof Map ? param : new Map(Object.entries(param));\n  }\n\n  /* tslint:disable-next-line:no-any */\n  public static tryParseNumber(value: any): { parsed?: number; success: boolean } {\n    if (Param.isNullOrUndefined(value)) {\n      return { success: false };\n    }\n\n    if (Param.isTypeNumber(value)) {\n      return { parsed: value as number, success: true };\n    }\n\n    const valueString = value.toString();\n    if (valueString === 'NaN') {\n      // 'NaN' parses as NaN which is indistinguishable from a failed parse.\n      return { parsed: NaN, success: true };\n    }\n\n    const parsed = parseFloat(valueString);\n    if (isNaN(parsed)) {\n      return { success: false };\n    }\n\n    return { parsed, success: true };\n  }\n}\n"]}