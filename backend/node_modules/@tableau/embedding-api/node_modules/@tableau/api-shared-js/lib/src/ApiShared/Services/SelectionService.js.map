{"version":3,"file":"SelectionService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/SelectionService.ts"],"names":[],"mappings":"","sourcesContent":["import { MarkInfo, SelectOptions, SelectionCriteria, SelectionUpdateType, TooltipContext } from '@tableau/api-external-contract-js';\nimport { VisualId } from '@tableau/api-internal-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * Service for implementing the logic for various Selection calls\n *\n * @interface SelectionService\n * @extends {ApiService}\n */\nexport interface SelectionService extends ApiService {\n  /**\n   * Clears selected marks in the current worksheet\n   *\n   * @return This function does not return anything\n   */\n  clearSelectedMarksAsync(visualId: VisualId): Promise<void>;\n\n  /**\n   * Select, replace or delete marks in the current worksheet.\n   * Supports hierarchical, categorical and range based selection.\n   * Also supports selections by tupleids.\n   *\n   * @param Array<SelectionCriteria> list of marks\n   * @return This function does not return anything.\n   */\n  selectMarksByValueAsync(visualId: VisualId, marks: Array<SelectionCriteria>, selectionUpdateType: SelectionUpdateType): Promise<void>;\n\n  /**\n   * Select, replace or delete marks in the current worksheet.\n   * Supports selections by tupleids.\n   *\n   * @param Array<MarkInfo> list of marks\n   * @return This function does not return anything.\n   */\n  selectMarksByIdAsync(visualId: VisualId, marks: Array<MarkInfo>, selectionUpdateType: SelectionUpdateType): Promise<void>;\n\n  /**\n   * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.\n   * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.\n   *\n   * @param visualId\n   * @param hoveredTuple\n   * @param tooltip\n   * @param allowHoverActions\n   * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error\n   */\n  hoverTupleAsync(visualId: VisualId, hoveredTuple?: number, tooltip?: TooltipContext | null, allowHoverActions?: boolean): Promise<void>;\n\n  /**\n   * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.\n   * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.\n   *\n   * @param visualId\n   * @param selectedTuples\n   * @param selectOption\n   * @param tooltip\n   * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error\n   */\n  selectTuplesAsync(\n    visualId: VisualId,\n    selectedTuples: Array<number>,\n    selectOption: SelectOptions,\n    tooltip?: TooltipContext,\n  ): Promise<void>;\n}\n"]}