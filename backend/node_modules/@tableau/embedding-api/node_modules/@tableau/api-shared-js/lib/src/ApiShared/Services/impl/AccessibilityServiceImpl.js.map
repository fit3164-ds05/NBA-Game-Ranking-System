{"version":3,"file":"AccessibilityServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/AccessibilityServiceImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8EAAqG;AACrG,wEAA2E;AAG3E,qDAAoD;AAEpD;IAA8C,4CAAe;IAA7D;;IA4BA,CAAC;IA3BC,sBAAW,iDAAW;aAAtB;YACE,2CAAkC;QACpC,CAAC;;;OAAA;IAEM,sDAAmB,GAA1B,UAA2B,QAAkB,EAAE,OAAe;;QAC5D,IAAI,kBAAkB,GAAG,IAAI,6CAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAExE,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,qBAAqB;YACjD,GAAC,sCAAW,CAAC,kBAAkB,IAAG,kBAAkB;eACrD,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC,IAAI,CAAS,UAAC,QAAQ;YAC3E,OAAO,QAAQ,CAAC,MAAgB,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,2DAAwB,GAA/B,UAAgC,QAAkB;;QAChD,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,0BAA0B;YACtD,GAAC,sCAAW,CAAC,QAAQ,IAAG,QAAQ;eACjC,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAM,CAAC,6BAA6B,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YACxF,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IACH,+BAAC;AAAD,CAAC,AA5BD,CAA8C,iCAAe,GA4B5D;AA5BY,4DAAwB","sourcesContent":["import { ExecuteParameters, ParameterId, VerbId, VisualId } from '@tableau/api-internal-contract-js';\nimport { TooltipTextRequestModel } from '../../Models/AccessibilityModels';\nimport { AccessibilityService } from '../AccessibilityService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class AccessibilityServiceImpl extends ServiceImplBase implements AccessibilityService {\n  public get serviceName(): string {\n    return ServiceNames.Accessibility;\n  }\n\n  public getTooltipTextAsync(visualId: VisualId, tupleId: number): Promise<String> {\n    let tooltipTextRequest = new TooltipTextRequestModel(visualId, tupleId);\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getTooltipTextAsync',\n      [ParameterId.TooltipTextRequest]: tooltipTextRequest,\n    };\n\n    return this.execute(VerbId.GetTooltipText, parameters).then<String>((response) => {\n      return response.result as String;\n    });\n  }\n\n  public leaveMarkNavigationAsync(visualId: VisualId): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'leaveMarkNavigationAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n\n    return this.execute(VerbId.RaiseLeaveMarkNavNotification, parameters).then<void>((response) => {\n      return;\n    });\n  }\n}\n"]}