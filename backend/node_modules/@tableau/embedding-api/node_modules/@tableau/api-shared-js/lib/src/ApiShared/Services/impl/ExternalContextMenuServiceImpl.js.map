{"version":3,"file":"ExternalContextMenuServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,8EAA2F;AAG3F,qDAAoD;AAEpD;IAAoD,kDAAe;IAAnE;;IA0DA,CAAC;IAzDC,sBAAW,uDAAW;aAAtB;YACE,iEAAwC;QAC1C,CAAC;;;OAAA;IAEM,+DAAsB,GAA7B,UAA8B,SAAiB,EAAE,UAAuB,EAAE,MAA0B;;QAClG,IAAM,IAAI,GAAG,iCAAM,CAAC,sBAAsB,CAAC;QAC3C,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,wBAAwB;YACpD,GAAC,sCAAW,CAAC,aAAa,IAAG,SAAS;YACtC,GAAC,sCAAW,CAAC,2BAA2B,IAAG,MAAM,CAAC,WAAW;eAC9D,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAS,UAAC,QAAQ;YAC1D,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAgB,CAAC;YAChD,OAAO,aAAa,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,+DAAsB,GAA7B,UAA8B,SAAiB,EAAE,UAAuB,EAAE,UAAkB;;QAC1F,IAAM,IAAI,GAAG,iCAAM,CAAC,sBAAsB,CAAC;QAC3C,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,wBAAwB;YACpD,GAAC,sCAAW,CAAC,aAAa,IAAG,SAAS;YACtC,GAAC,sCAAW,CAAC,kBAAkB,IAAG,UAAU;eAC7C,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YACxD,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gEAAuB,GAA9B,UAA+B,SAAiB,EAAE,UAAuB,EAAE,UAAkB;;QAC3F,IAAM,IAAI,GAAG,iCAAM,CAAC,uBAAuB,CAAC;QAC5C,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,yBAAyB;YACrD,GAAC,sCAAW,CAAC,aAAa,IAAG,SAAS;YACtC,GAAC,sCAAW,CAAC,kBAAkB,IAAG,UAAU;eAC7C,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YACxD,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,+DAAsB,GAA7B,UAA8B,SAAiB,EAAE,UAAuB,EAAE,UAAkB,EAAE,eAAuB;;QACnH,IAAM,IAAI,GAAG,iCAAM,CAAC,kBAAkB,CAAC;QACvC,IAAM,UAAU;YACd,GAAC,sCAAW,CAAC,YAAY,IAAG,wBAAwB;YACpD,GAAC,sCAAW,CAAC,aAAa,IAAG,SAAS;YACtC,GAAC,sCAAW,CAAC,kBAAkB,IAAG,UAAU;YAC5C,GAAC,sCAAW,CAAC,uBAAuB,IAAG,eAAe;eACvD,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,UAAC,QAAQ;YACxD,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qCAAC;AAAD,CAAC,AA1DD,CAAoD,iCAAe,GA0DlE;AA1DY,wEAA8B","sourcesContent":["import { ApiMenuType, ContextMenuOptions } from '@tableau/api-external-contract-js';\nimport { ExecuteParameters, ParameterId, VerbId } from '@tableau/api-internal-contract-js';\nimport { ExternalContextMenuService } from '../ExternalContextMenuService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class ExternalContextMenuServiceImpl extends ServiceImplBase implements ExternalContextMenuService {\n  public get serviceName(): string {\n    return ServiceNames.ExternalContextMenu;\n  }\n\n  public appendContextMenuAsync(sheetName: string, targetMenu: ApiMenuType, config: ContextMenuOptions): Promise<string> {\n    const verb = VerbId.AppendExternalMenuItem;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'appendContextMenuAsync',\n      [ParameterId.WorksheetName]: sheetName,\n      [ParameterId.ExternalMenuItemDisplayName]: config.displayName,\n    };\n\n    return this.execute(verb, parameters).then<string>((response) => {\n      const newMenuItemId = response.result as string;\n      return newMenuItemId;\n    });\n  }\n\n  public removeContextMenuAsync(sheetName: string, targetMenu: ApiMenuType, menuItemId: string): Promise<void> {\n    const verb = VerbId.RemoveExternalMenuItem;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'removeContextMenuAsync',\n      [ParameterId.WorksheetName]: sheetName,\n      [ParameterId.ExternalMenuItemId]: menuItemId,\n    };\n\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public executeContextMenuAsync(sheetName: string, targetMenu: ApiMenuType, menuItemId: string): Promise<void> {\n    const verb = VerbId.ExecuteExternalMenuItem;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'executeContextMenuAsync',\n      [ParameterId.WorksheetName]: sheetName,\n      [ParameterId.ExternalMenuItemId]: menuItemId,\n    };\n\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public renameContextMenuAsync(sheetName: string, targetMenu: ApiMenuType, menuHeader: string, menuDescription: string): Promise<void> {\n    const verb = VerbId.RenameExternalMenu;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'renameContextMenuAsync',\n      [ParameterId.WorksheetName]: sheetName,\n      [ParameterId.ExternalMenuHeader]: menuHeader,\n      [ParameterId.ExternalMenuDescription]: menuDescription,\n    };\n\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n}\n"]}