"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var ServiceRegistry_1 = require("../Services/ServiceRegistry");
var TableauError_1 = require("../TableauError");
var ErrorHelpers_1 = require("../Utils/ErrorHelpers");
var ShortLivedDeferred_1 = require("../Utils/ShortLivedDeferred");
var SheetImpl_1 = require("./SheetImpl");
var StoryPointImpl_1 = require("./StoryPointImpl");
var StoryPointInfoImpl_1 = require("./StoryPointInfoImpl");
var StoryImpl = /** @class */ (function (_super) {
    __extends(StoryImpl, _super);
    function StoryImpl(_sheetInfoImpl, storyModel, _publishedSheetInfos, _registryId) {
        var _this = _super.call(this, _sheetInfoImpl, _registryId) || this;
        _this._sheetInfoImpl = _sheetInfoImpl;
        _this._publishedSheetInfos = _publishedSheetInfos;
        _this._registryId = _registryId;
        _this._storyPointInfoImpls = [];
        _this._deferred = new ShortLivedDeferred_1.ShortLivedDeferred();
        _this.initializeStory(storyModel);
        return _this;
    }
    StoryImpl.prototype.initializeStory = function (storyModel) {
        var _this = this;
        storyModel.storyPoints.forEach(function (storyPointModel) {
            var isActive = storyPointModel.index === storyModel.activeStoryPointIndex;
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(storyPointModel.caption, storyPointModel.index, storyPointModel.storyPointId, isActive, storyPointModel.updated, _this);
            _this._storyPointInfoImpls.push(storyPointInfoImpl);
            if (isActive) {
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
        });
    };
    StoryImpl.prototype.updateStoryInfo = function (index, storyPointModel) {
        if (!this._storyPointInfoImpls) {
            return;
        }
        var storyInfoImpl = this._storyPointInfoImpls[index];
        if (storyInfoImpl.storyPointId !== storyPointModel.storyPointId) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.StoryPointIdMismatch, "We should not be updating a story point when the IDs don't match. Existing storyPointID=" + storyInfoImpl.storyPointId + ", newStoryPointID=" + storyPointModel.storyPointId);
        }
        storyInfoImpl.caption = storyPointModel.caption;
        storyInfoImpl.updated = storyPointModel.updated;
        if (this._activeStoryPointImpl.storyPointId === storyPointModel.storyPointId) {
            this._activeStoryPointImpl.updated = storyInfoImpl.updated;
        }
    };
    StoryImpl.prototype.updateStory = function (storyPointModel) {
        var _this = this;
        if (!this._storyPointInfoImpls) {
            return;
        }
        this._storyPointInfoImpls.forEach(function (storyPointInfoImpl) {
            var isActive = storyPointInfoImpl.storyPointId === storyPointModel.storyPointId;
            if (isActive) {
                // update the state
                storyPointInfoImpl.caption = storyPointModel.caption;
                storyPointInfoImpl.index = storyPointModel.index;
                storyPointInfoImpl.active = true;
                storyPointInfoImpl.updated = storyPointModel.updated;
                // re-initialize activeStoryPointImpl
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
            else {
                // set old ones to false
                storyPointInfoImpl.active = false;
            }
        });
        if (this.activeStoryPoint) {
            this._deferred.resolve(this.activeStoryPoint);
        }
    };
    Object.defineProperty(StoryImpl.prototype, "activeStoryPoint", {
        get: function () {
            return this._activeStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "storyPointsInfo", {
        get: function () {
            return this._storyPointInfoImpls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isActive", {
        get: function () {
            return this._sheetInfoImpl.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isHidden", {
        get: function () {
            return !!this._sheetInfoImpl.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    StoryImpl.prototype.activateNextStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === this._storyPointInfoImpls.length - 1) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateNextStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activatePreviousStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === 0) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activatePreviousStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activateStoryPointAsync = function (index) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        if (index === this._activeStoryPointImpl.index) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateStoryPointAsync(index);
        return promise;
    };
    StoryImpl.prototype.revertStoryPointAsync = function (index) {
        var _this = this;
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        return service.revertStoryPointAsync(index).then(function (response) {
            _this.updateStoryInfo(response.index, response);
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(response.caption, response.index, response.storyPointId, false, response.updated, _this);
            return storyPointInfoImpl;
        });
    };
    StoryImpl.prototype.clearPendingPromises = function () {
        if (this._deferred) {
            this._deferred.reject('All pending promises cleared');
        }
    };
    return StoryImpl;
}(SheetImpl_1.SheetImpl));
exports.StoryImpl = StoryImpl;
//# sourceMappingURL=StoryImpl.js.map