{"version":3,"file":"TableauError.js","sourceRoot":"","sources":["../../../src/ApiShared/TableauError.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA;;;;;GAKG;AACH;IAAkC,gCAAK;IACrC,sBAA2B,UAA+D,EAAE,OAAe;QAA3G,YACE,kBAAS,UAAU,UAAK,OAAS,CAAC,SAOnC;QAR0B,gBAAU,GAAV,UAAU,CAAqD;QAGxF,6BAA6B;QAC7B,+IAA+I;QAC/I,iGAAiG;QACjG,iFAAiF;QACjF,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;;IACtD,CAAC;IAED,sBAAW,mCAAS;aAApB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;;;OAAA;IACH,mBAAC;AAAD,CAAC,AAdD,CAAkC,KAAK,GActC;AAdY,oCAAY","sourcesContent":["import { EmbeddingErrorCodes, ErrorCodes, SharedErrorCodes } from '@tableau/api-external-contract-js';\n\n/**\n * Custom error class that extends the default JavaScript Error object.\n * This allows us to provide a field with a specific error code\n * so that developers can more easily programmatically respond\n * to error scenarios.\n */\nexport class TableauError extends Error {\n  public constructor(private _errorCode: ErrorCodes | EmbeddingErrorCodes | SharedErrorCodes, message: string) {\n    super(`${_errorCode}: ${message}`);\n\n    /*tslint:disable-next-line */\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // Error inheritance does not work propertly when compiling to ES5, this is a workaround to force\n    // the proto chain to be built correctly.  See the github link above for details.\n    Object.setPrototypeOf(this, TableauError.prototype);\n  }\n\n  public get errorCode(): ErrorCodes | EmbeddingErrorCodes | SharedErrorCodes {\n    return this._errorCode;\n  }\n}\n"]}