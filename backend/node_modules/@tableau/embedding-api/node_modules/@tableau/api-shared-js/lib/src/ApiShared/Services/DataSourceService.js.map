{"version":3,"file":"DataSourceService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/DataSourceService.ts"],"names":[],"mappings":"","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { ConnectionDescriptionSummary, DataSchema, LogicalTableInfo, TableInfo, VisualId } from '@tableau/api-internal-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\nexport interface DataSourceService extends ApiService {\n  /**\n   * Refreshes a live datasource given a datasource Id.\n   * This does not function with Google Sheets or extract only datasources.\n   *\n   * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).\n   *                               Extensions: The command is invoked from a datasource. The datasource id is always present.\n   *                               Embedding: The command can be invoked from a Viz without the datasource id.\n   *\n   * @return  Empty promise once datasource has been refreshed.\n   */\n  refreshAsync(dataSourceId?: string): Promise<void>;\n\n  /**\n   * Gets all of the tables that are used in the datasource's current connections.\n   *\n   * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).\n   *\n   * @return  List of all tables active in this datasource's current connection..\n   */\n  getActiveTablesAsync(dataSourceId: string): Promise<Array<TableInfo>>;\n\n  /**\n   * Gets all datasources used in a worksheet.\n   *\n   * @return  DataSchema object that contains info on all datasources in a worksheet.\n   */\n  getDataSourcesAsync(visualId: VisualId): Promise<DataSchema>;\n\n  /**\n   * Gets all datasources used in the workbook.\n   *\n   * @return  DataSchema object that contains info on all datasources in the workbook.\n   */\n  getAllDataSourcesAsync(): Promise<DataSchema>;\n\n  /**\n   * Gets a list of summary objects for each connection in a datasource.\n   *\n   * @param {string} dataSourceId  The unique id of the datasource (refered to as datasource name in Tableau platform code).\n   *\n   * @return  List of summary objects for each connection in a datasource.\n   */\n  getConnectionSummariesAsync(dataSourceId: string): Promise<ConnectionDescriptionSummary[]>;\n\n  /**\n   * Gets the field with the provided global field name\n   *\n   * @param {string} fieldName The global field name\n   */\n  getFieldAsync(fieldName: string): Promise<Contract.Field>;\n\n  /**\n   * Get all the logical tables aka objects in the Object Model world\n   * @param {string} dataSourceId  The unique id of the datasource (referred to as datasource name in Tableau platform code).\n   */\n  getLogicalTablesAsync(dataSourceId: string): Promise<Array<LogicalTableInfo>>;\n\n  /**\n   * Get all the logical tables aka objects in the Object Model world used by the visual spec\n   * @param visualId\n   */\n  getUnderlyingTablesAsync(visualId: VisualId): Promise<Array<LogicalTableInfo>>;\n}\n"]}