import { MarkInfo, SelectOptions, SelectionCriteria, SelectionUpdateType, TooltipContext } from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { ApiService } from './ServiceRegistry';
/**
 * Service for implementing the logic for various Selection calls
 *
 * @interface SelectionService
 * @extends {ApiService}
 */
export interface SelectionService extends ApiService {
    /**
     * Clears selected marks in the current worksheet
     *
     * @return This function does not return anything
     */
    clearSelectedMarksAsync(visualId: VisualId): Promise<void>;
    /**
     * Select, replace or delete marks in the current worksheet.
     * Supports hierarchical, categorical and range based selection.
     * Also supports selections by tupleids.
     *
     * @param Array<SelectionCriteria> list of marks
     * @return This function does not return anything.
     */
    selectMarksByValueAsync(visualId: VisualId, marks: Array<SelectionCriteria>, selectionUpdateType: SelectionUpdateType): Promise<void>;
    /**
     * Select, replace or delete marks in the current worksheet.
     * Supports selections by tupleids.
     *
     * @param Array<MarkInfo> list of marks
     * @return This function does not return anything.
     */
    selectMarksByIdAsync(visualId: VisualId, marks: Array<MarkInfo>, selectionUpdateType: SelectionUpdateType): Promise<void>;
    /**
     * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.
     * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.
     *
     * @param visualId
     * @param hoveredTuple
     * @param tooltip
     * @param allowHoverActions
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    hoverTupleAsync(visualId: VisualId, hoveredTuple?: number, tooltip?: TooltipContext | null, allowHoverActions?: boolean): Promise<void>;
    /**
     * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.
     * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.
     *
     * @param visualId
     * @param selectedTuples
     * @param selectOption
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    selectTuplesAsync(visualId: VisualId, selectedTuples: Array<number>, selectOption: SelectOptions, tooltip?: TooltipContext): Promise<void>;
}
//# sourceMappingURL=SelectionService.d.ts.map