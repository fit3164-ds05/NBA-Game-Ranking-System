{"version":3,"file":"ExportHelpers.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/ExportHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ExportLayoutOptions,\n  ExportPDFOptions as InternalExportPDFOptions,\n  FitPages,\n  PageOrientation,\n  PageScalingOption,\n  PageSizeOption,\n  ScaleMode,\n  ScalingSelection,\n} from '@tableau/api-internal-contract-js';\nimport {\n  ExportDataOptions,\n  ExportPDFOptions as ExternalExportPDFOptions,\n  PrintOrientation,\n  PrintPageSize,\n  PrintScaling,\n  SharedErrorCodes,\n} from '@tableau/api-external-contract-js';\nimport { TableauError } from '../TableauError';\n\n/**\n * Helper methods for Export APIs.\n *\n * @class ExportHelpers\n */\nexport class ExportHelpers {\n  public static DefaultDataOptions: ExportDataOptions = {\n    ignoreAliases: false,\n    columnsToIncludeById: [],\n  };\n\n  public static DefaultPDFOptions: ExternalExportPDFOptions = {\n    scaling: PrintScaling.Automatic,\n    pageSize: PrintPageSize.Letter,\n    orientation: PrintOrientation.Portrait,\n  };\n\n  private static DefaultLayoutOptions: ExportLayoutOptions = {\n    imageHeight: 0,\n    imageWidth: 0,\n    pageFitHorizontal: 1,\n    pageFitVertical: 1,\n    pageOrientationOption: PageOrientation.Portrait,\n    pageScaleMode: ScaleMode.ScaleAuto,\n    pageScalePercent: 100,\n    pageSizeOption: PageSizeOption.Letter,\n  };\n\n  /**\n   * Modifies the internal ExportPDFOptions' properties based on the given PDF export configuration.\n   * This method will construct the internal ExportPDFOptions identically to how the 'Export PDF' dialog constructs the ExportPdfOptionsPresModel.\n   * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.\n   *\n   * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.\n   * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.\n   * @param sheetNames The list of sheets selected for export.\n   */\n  public static updateInternalExportPDFOptions(\n    internalExportPdfOptions: InternalExportPDFOptions,\n    externalExportPdfOptions: ExternalExportPDFOptions,\n    sheetNames: Array<string>,\n  ): void {\n    internalExportPdfOptions.currentSheet = sheetNames[0];\n    this.updateExportLayoutOptions(internalExportPdfOptions, externalExportPdfOptions);\n    this.updateSheetOptions(internalExportPdfOptions, sheetNames);\n  }\n\n  /**\n   * Helper method for updateInternalExportPDFOptions.\n   * Modifies the exportLayoutOptions property of the internal ExportPDFOptions based on the external ExportPDFOptions.\n   * See the getExportLayoutOptions method in @browser-clients/export-pdf-options-dialog for reference.\n   *\n   * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.\n   * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.\n   */\n  public static updateExportLayoutOptions(\n    internalExportPdfOptions: InternalExportPDFOptions,\n    externalExportPdfOptions: ExternalExportPDFOptions,\n  ): void {\n    const exportLayoutOptions = internalExportPdfOptions.exportLayoutOptions;\n\n    // setting the image height and width properties to their default values\n    exportLayoutOptions.imageHeight = this.DefaultLayoutOptions.imageHeight;\n    exportLayoutOptions.imageWidth = this.DefaultLayoutOptions.imageWidth;\n\n    //  setting the orientation value for the exportLayoutOptions\n    switch (externalExportPdfOptions.orientation) {\n      case PrintOrientation.Landscape:\n        exportLayoutOptions.pageOrientationOption = PageOrientation.Landscape;\n        break;\n      case PrintOrientation.Portrait:\n        exportLayoutOptions.pageOrientationOption = PageOrientation.Portrait;\n        break;\n      default:\n        throw new TableauError(SharedErrorCodes.InternalError, 'invalid orientation for ExportPDFOption');\n    }\n\n    // setting the page size value for the exportLayoutOptions\n    switch (externalExportPdfOptions.pageSize) {\n      case PrintPageSize.A3:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.A3;\n        break;\n      case PrintPageSize.A4:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.A4;\n        break;\n      case PrintPageSize.A5:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.A5;\n        break;\n      case PrintPageSize.B4:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.B4;\n        break;\n      case PrintPageSize.B5:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.B5;\n        break;\n      case PrintPageSize.Executive:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Executive;\n        break;\n      case PrintPageSize.Folio:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Folio;\n        break;\n      case PrintPageSize.Ledger:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Ledger;\n        break;\n      case PrintPageSize.Legal:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Legal;\n        break;\n      case PrintPageSize.Letter:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Letter;\n        break;\n      case PrintPageSize.Note:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Note;\n        break;\n      case PrintPageSize.Quarto:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Quarto;\n        break;\n      case PrintPageSize.Statement:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Statement;\n        break;\n      case PrintPageSize.Tabloid:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Tabloid;\n        break;\n      case PrintPageSize.Unspecified:\n        exportLayoutOptions.pageSizeOption = PageSizeOption.Unspecified;\n        break;\n      default:\n        throw new TableauError(SharedErrorCodes.InternalError, 'invalid pageSize for ExportPDFOption');\n    }\n\n    // setting the scaling values for the exportLayoutOptions\n    switch (externalExportPdfOptions.scaling) {\n      case PrintScaling.AtMost1PageHigh:\n        this.setFitAndScaleValues(exportLayoutOptions, FitPages.FitOneHigh);\n        break;\n      case PrintScaling.AtMost1PageWide:\n        this.setFitAndScaleValues(exportLayoutOptions, FitPages.FitOneWide);\n        break;\n      case PrintScaling.AtMost2PagesHigh:\n        this.setFitAndScaleValues(exportLayoutOptions, FitPages.FitTwoHigh);\n        break;\n      case PrintScaling.AtMost2PagesWide:\n        this.setFitAndScaleValues(exportLayoutOptions, FitPages.FitTwoWide);\n        break;\n      case PrintScaling.Automatic:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePctAuto);\n        break;\n      case PrintScaling.Perc100:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct100);\n        break;\n      case PrintScaling.Perc200:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct200);\n        break;\n      case PrintScaling.Perc25:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct25);\n        break;\n      case PrintScaling.Perc400:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct400);\n        break;\n      case PrintScaling.Perc50:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct50);\n        break;\n      case PrintScaling.Perc60:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct60);\n        break;\n      case PrintScaling.Perc75:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct75);\n        break;\n      case PrintScaling.Perc80:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct80);\n        break;\n      case PrintScaling.Perc90:\n        this.setFitAndScaleValues(exportLayoutOptions, PageScalingOption.ScalePct90);\n        break;\n      default:\n        throw new TableauError(SharedErrorCodes.InternalError, 'invalid scaling for ExportPDFOption');\n    }\n  }\n\n  /**\n   * Helper method for updateInternalExportPDFOptions.\n   * Modifies the sheetOptions property of the internal ExportPDFOptions based on the sheets selected for export.\n   * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.\n   *\n   * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.\n   * @param sheetNames The list of sheets selected for export.\n   */\n  public static updateSheetOptions(internalExportPdfOptions: InternalExportPDFOptions, sheetNames: Array<string>): void {\n    const { exportLayoutOptions, sheetOptions } = internalExportPdfOptions;\n    // updating the export layouts options for each sheet and selecting sheet for export if included in list\n    for (const sheetOption of sheetOptions) {\n      sheetOption.exportLayoutOptions = exportLayoutOptions;\n      sheetOption.isSelected = sheetNames.includes(sheetOption.sheet);\n    }\n  }\n\n  /**\n   * Helper method for updateExportLayoutOptons.\n   * This method is a spoof of the getFitAndScaleValues method used in @browser-clients/export-pdf-options to set the exportLayoutOptions' scaling properties.\n   * In the future, this file should be refactored to import the method directly from @browser-clients/export-pdf-options.\n   *\n   * @param scalingSelection string used for setting the exportLayoutOptions based on the PrintScaling property from the ExternalExportPDFOptions.\n   * @param exportLayoutOptions the ExportLayoutOptions used by the internal ExportPDFOptions pres model.\n   */\n  public static setFitAndScaleValues(exportLayoutOptions: ExportLayoutOptions, scalingSelection: ScalingSelection): void {\n    let { pageFitHorizontal, pageFitVertical, pageScaleMode, pageScalePercent } = this.DefaultLayoutOptions;\n\n    const fitMatch = this.fitRegex.exec(scalingSelection);\n    const percentMatch = this.pctRegex.exec(scalingSelection);\n\n    if (fitMatch) {\n      [pageFitHorizontal, pageFitVertical] = fitMatch.slice(1).map((value) => Number(value));\n      pageScaleMode = ScaleMode.ScaleFitPages;\n    } else if (percentMatch) {\n      [pageScalePercent] = percentMatch.slice(1).map((value) => Number(value));\n      pageScaleMode = ScaleMode.ScalePercentage;\n    }\n\n    // getFitAndScaleValues returns the properties below, but instead this method will set them.\n    exportLayoutOptions.pageFitHorizontal = pageFitHorizontal;\n    exportLayoutOptions.pageFitVertical = pageFitVertical;\n    exportLayoutOptions.pageScaleMode = pageScaleMode;\n    exportLayoutOptions.pageScalePercent = pageScalePercent;\n  }\n\n  private static fitRegex = new RegExp('fit([0-9]+)x([0-9]+)');\n  private static pctRegex = new RegExp('pct([0-9]+)');\n}\n"]}