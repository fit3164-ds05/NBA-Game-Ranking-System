{"version":3,"file":"NotificationServiceImplBase.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/NotificationServiceImplBase.ts"],"names":[],"mappings":";;AAGA;IACE,sBAA2B,SAAgD,EAAU,WAA+C;QAAzG,cAAS,GAAT,SAAS,CAAuC;QAAU,gBAAW,GAAX,WAAW,CAAoC;QAClI,eAAe;IACjB,CAAC;IAEM,qCAAc,GAArB,UAAsB,iBAAwB;QAC5C,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE;YACrC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;SACrC;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,oCAAY;AAYzB;IAGE,qCAA2B,UAAiC;QAAjC,eAAU,GAAV,UAAU,CAAuB;QAC1D,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEM,qDAAe,GAAtB,UAAuB,EAAkB,EAAE,QAAmC,EAAE,OAA+B;QAA/G,iBAMC;QALC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,IAAI,KAAK,EAAgB,CAAC;QACjE,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACzD,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;QAC9B,OAAO,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,YAAY,CAAC,EAAzC,CAAyC,CAAC;IACzD,CAAC;IAEO,oEAA8B,GAAtC,UAAuC,EAAkB;QACvD,iDAAiD;QACjD,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;IAEO,oDAAc,GAAtB,UAAuB,YAA0B;QAC/C,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;YACrE,OAAO;SACR;QAED,4EAA4E;QAC5E,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAnC,CAAmC,CAAC,CAAC;IAClG,CAAC;IAEO,wDAAkB,GAA1B,UAA2B,EAAkB,EAAE,YAA0B;QACvE,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,EAAE,CAAC,EAAE;YAC5C,OAAO;SACR;QAED,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,KAAK,YAAY,EAApB,CAAoB,CAAC,CAAC;IAChF,CAAC;IACH,kCAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,kEAA2B","sourcesContent":["import { InternalApiDispatcher, Model, Notification, NotificationId } from '@tableau/api-internal-contract-js';\nimport { UnregisterFn } from '../NotificationService';\n\nexport class Registration {\n  public constructor(private _filterFn: (notificationModel: Model) => boolean, private _callbackFn: (notificationModel: Model) => void) {\n    // Nothing Here\n  }\n\n  public onNotification(notificationModel: Model): void {\n    if (this._filterFn(notificationModel)) {\n      this._callbackFn(notificationModel);\n    }\n  }\n}\n\nexport class NotificationServiceImplBase {\n  private _handlers: { [notificationId: string]: Array<Registration> };\n\n  public constructor(private dispatcher: InternalApiDispatcher) {\n    this._handlers = {};\n    this.dispatcher.registerNotificationHandler(this.onNotification.bind(this));\n  }\n\n  public registerHandler(id: NotificationId, filterFn: (model: Model) => boolean, handler: (model: Model) => void): UnregisterFn {\n    const handlers = this._handlers[id] || new Array<Registration>();\n    const registration = new Registration(filterFn, handler);\n    handlers.push(registration);\n    this._handlers[id] = handlers;\n    return () => this.removeRegistration(id, registration);\n  }\n\n  private hasHandlersForNotificationType(id: NotificationId): boolean {\n    // eslint-disable-next-line no-prototype-builtins\n    return this._handlers.hasOwnProperty(id);\n  }\n\n  private onNotification(notification: Notification): void {\n    if (!this.hasHandlersForNotificationType(notification.notificationId)) {\n      return;\n    }\n\n    // Go through and check for all the handlers of this particular notification\n    this._handlers[notification.notificationId].forEach((h) => h.onNotification(notification.data));\n  }\n\n  private removeRegistration(id: NotificationId, registration: Registration): void {\n    if (!this.hasHandlersForNotificationType(id)) {\n      return;\n    }\n\n    this._handlers[id] = this._handlers[id].filter((reg) => reg !== registration);\n  }\n}\n"]}