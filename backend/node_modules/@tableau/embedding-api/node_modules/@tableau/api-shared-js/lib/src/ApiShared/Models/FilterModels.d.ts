import * as Contract from '@tableau/api-external-contract-js';
import { DateRangeType, FilterDomainType, FilterType, PeriodType } from '@tableau/api-external-contract-js';
import { HierarchicalLevelSelectionState } from '@tableau/api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau';
export declare class Filter implements Contract.Filter {
    protected _worksheetName: string;
    protected _fieldName: string;
    protected _filterType: FilterType;
    protected _fieldId: string;
    protected _registryId: number;
    constructor(_worksheetName: string, _fieldName: string, _filterType: FilterType, _fieldId: string, _registryId: number);
    get worksheetName(): string;
    get fieldName(): string;
    get fieldId(): string;
    get filterType(): FilterType;
    getFieldAsync(): Promise<Contract.Field>;
    getAppliedWorksheetsAsync(): Promise<Array<string>>;
    setAppliedWorksheetsAsync(applyToWorksheets: Array<string>): Promise<Array<string>>;
}
export declare class CategoricalFilter extends Filter implements Contract.CategoricalFilter {
    private _appliedValues;
    private _isExcludeMode;
    private _isAllSelected?;
    constructor(worksheetName: string, fieldName: string, fieldId: string, filterType: FilterType, registryId: number, _appliedValues: Array<Contract.DataValue>, _isExcludeMode: boolean, _isAllSelected?: boolean | undefined);
    get isAllSelected(): boolean | undefined;
    get appliedValues(): Array<Contract.DataValue>;
    get isExcludeMode(): boolean;
    getDomainAsync(domainType?: FilterDomainType): Promise<Contract.CategoricalDomain>;
}
export declare class HierarchicalDataValue implements Contract.HierarchicalFilterDataValue {
    private _value;
    private _hierarchicalPath;
    private _level;
    constructor(_value: Contract.DataValue, _hierarchicalPath: string, _level: number);
    get value(): Contract.DataValue;
    get hierarchicalPath(): string;
    get level(): number;
}
export declare class HierarchicalLevelDetail implements Contract.HierarchicalLevelDetail {
    private _name;
    private _levelSelectionState;
    constructor(_name: string, _levelSelectionState: HierarchicalLevelSelectionState);
    get name(): string;
    get levelSelectionState(): HierarchicalLevelSelectionState;
}
export declare class HierarchicalFilter extends Filter implements Contract.HierarchicalFilter {
    private _dimensionName;
    private _hierarchyCaption;
    private _numberOfLevels;
    private _levelDetails;
    private _appliedValues;
    private _isAllSelected;
    constructor(worksheetName: string, fieldName: string, fieldId: string, filterType: FilterType, registryId: number, _dimensionName: string, _hierarchyCaption: string, _numberOfLevels: number, _levelDetails: Array<Contract.HierarchicalLevelDetail>, _appliedValues: Array<Contract.HierarchicalFilterDataValue>, _isAllSelected: boolean);
    getDomainAsync(domainType?: Contract.FilterDomainType): Promise<Contract.CategoricalDomain>;
    get dimensionName(): string;
    get hierarchyCaption(): string;
    get numberOfLevels(): number;
    get levelDetails(): Contract.HierarchicalLevelDetail[];
    get isAllSelected(): boolean;
    get appliedValues(): Array<Contract.HierarchicalFilterDataValue>;
}
export declare class RangeFilter extends Filter implements Contract.RangeFilter {
    private _min;
    private _max;
    private _includeNullValues;
    constructor(worksheetName: string, fieldName: string, fieldId: string, filterType: FilterType, registryId: number, _min: Contract.DataValue, _max: Contract.DataValue, _includeNullValues: boolean);
    get minValue(): Contract.DataValue;
    get maxValue(): Contract.DataValue;
    get includeNullValues(): boolean;
    getDomainAsync(domainType?: FilterDomainType): Promise<Contract.RangeDomain>;
}
export declare class RelativeDateFilter extends Filter implements Contract.RelativeDateFilter {
    private _anchorDate;
    private _periodType;
    private _rangeType;
    private _rangeN;
    constructor(worksheetName: string, fieldName: string, fieldId: string, filterType: FilterType, registryId: number, _anchorDate: Contract.DataValue, _periodType: PeriodType, _rangeType: DateRangeType, _rangeN: number);
    get anchorDate(): Contract.DataValue;
    get periodType(): PeriodType;
    get rangeType(): DateRangeType;
    get rangeN(): number;
}
export declare class CategoricalDomain implements Contract.CategoricalDomain {
    private _values;
    private _domainType;
    constructor(_values: Array<Contract.DataValue>, _domainType: FilterDomainType);
    get values(): Array<Contract.DataValue>;
    get type(): FilterDomainType;
}
export declare class RangeDomain implements Contract.RangeDomain {
    private _min;
    private _max;
    private _domainType;
    constructor(_min: Contract.DataValue, _max: Contract.DataValue, _domainType: FilterDomainType);
    get type(): FilterDomainType;
    get min(): Contract.DataValue;
    get max(): Contract.DataValue;
}
//# sourceMappingURL=FilterModels.d.ts.map