"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var TableauError_1 = require("../TableauError");
var Deferred_1 = require("./Deferred");
/**
 * A Deferred wrapper class adding functionality to reject unresponsive promises after timeout
 *
 * this class handles two things:

 *    1. Adds timeout logic for deferred
 *    2. It blocks multiple calls from executing at the same time.
 *
 * @export
 * @class ShortLivedDeferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 *
 */
var ShortLivedDeferred = /** @class */ (function () {
    function ShortLivedDeferred(_timeoutInMilliseconds) {
        if (_timeoutInMilliseconds === void 0) { _timeoutInMilliseconds = Deferred_1.UnregisterTimeoutInMilliseconds; }
        this._timeoutInMilliseconds = _timeoutInMilliseconds;
    }
    ShortLivedDeferred.prototype.getNewPromiseOrThrowIfBusy = function () {
        var _this = this;
        if (this._deferred) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ApiExecutionError, 'This api cannot be executed till previous call is resolved.');
        }
        this._deferred = new Deferred_1.Deferred();
        this._timeoutId = setTimeout(function () {
            var error = new TableauError_1.TableauError(Contract.SharedErrorCodes.Timeout, "Api failed to complete in " + _this._timeoutInMilliseconds / 1000 + " seconds");
            _this.reject(error);
        }, this._timeoutInMilliseconds);
        return this._deferred.promise;
    };
    ShortLivedDeferred.prototype.resolve = function (response) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.resolve(response);
            this._deferred = undefined;
        }
    };
    ShortLivedDeferred.prototype.reject = function (error) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.reject(error);
            this._deferred = undefined;
        }
    };
    return ShortLivedDeferred;
}());
exports.ShortLivedDeferred = ShortLivedDeferred;
//# sourceMappingURL=ShortLivedDeferred.js.map