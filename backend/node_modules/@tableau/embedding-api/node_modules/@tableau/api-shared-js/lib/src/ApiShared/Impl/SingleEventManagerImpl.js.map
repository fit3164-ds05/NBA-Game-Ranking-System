{"version":3,"file":"SingleEventManagerImpl.js","sourceRoot":"","sources":["../../../../src/ApiShared/Impl/SingleEventManagerImpl.ts"],"names":[],"mappings":";;AAIA;;;;GAIG;AACH;IAIE,gCAAmB,SAA2B;QAC5C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,sBAAW,6CAAS;aAApB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;;;OAAA;IAEM,iDAAgB,GAAvB,UAAwB,OAAuC;QAA/D,iBAGC;QAFC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,OAAO,cAAM,OAAA,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAjC,CAAiC,CAAC;IACjD,CAAC;IAEM,oDAAmB,GAA1B,UAA2B,OAAuC;QAChE,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,OAAO,EAAb,CAAa,CAAC,CAAC;QAC7D,OAAO,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC7C,CAAC;IAEM,6CAAY,GAAnB,UAAoB,cAAgC;QAClD,KAAsB,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc,EAAE;YAAjC,IAAM,OAAO,SAAA;YAChB,IAAI;gBACF,IAAM,UAAU,GAAG,cAAc,EAAE,CAAC;gBACpC,OAAO,CAAC,UAAU,CAAC,CAAC;aACrB;YAAC,OAAO,CAAC,EAAE;gBACV,iGAAiG;gBACjG,SAAS;aACV;SACF;IACH,CAAC;IACH,6BAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,wDAAsB","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { TableauEventType } from '@tableau/api-external-contract-js';\nimport { SingleEventManager } from '../SingleEventManager';\n\n/**\n * This class implements the SingleEventManager interface for a single type of Tableau event\n *\n * @template TEventType The Tableau event type this class specializes\n */\nexport class SingleEventManagerImpl<TEventType extends Contract.TableauEvent> implements SingleEventManager {\n  private _eventType: TableauEventType;\n  private _handlers: Array<(eventObj: TEventType) => void>;\n\n  public constructor(eventType: TableauEventType) {\n    this._eventType = eventType;\n    this._handlers = [];\n  }\n\n  public get eventType(): TableauEventType {\n    return this._eventType;\n  }\n\n  public addEventListener(handler: (eventObj: TEventType) => void): Contract.TableauEventUnregisterFn {\n    this._handlers.push(handler);\n    return () => this.removeEventListener(handler);\n  }\n\n  public removeEventListener(handler: (eventObj: TEventType) => void): boolean {\n    const beforeCount = this._handlers.length;\n    this._handlers = this._handlers.filter((h) => h !== handler);\n    return beforeCount > this._handlers.length;\n  }\n\n  public triggerEvent(eventGenerator: () => TEventType): void {\n    for (const handler of this._handlers) {\n      try {\n        const eventModel = eventGenerator();\n        handler(eventModel);\n      } catch (e) {\n        // Since this handler could be outside our control, just catch anything it throws and continue on\n        continue;\n      }\n    }\n  }\n}\n"]}