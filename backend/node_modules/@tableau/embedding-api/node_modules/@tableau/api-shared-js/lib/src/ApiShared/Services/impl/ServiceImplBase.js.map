{"version":3,"file":"ServiceImplBase.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/ServiceImplBase.ts"],"names":[],"mappings":";;AAEA,oGAAmG;AACnG,mDAAkD;AAClD,2DAAwD;AAExD;;;;GAIG;AACH;IACE,yBAA2B,WAAkC,EAAY,WAAmB;QAAjE,gBAAW,GAAX,WAAW,CAAuB;QAAY,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAEtF,iCAAO,GAAjB,UAAkB,IAAY,EAAE,MAAyB;QACvD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;YACxD,wEAAwE;YACxE,8DAA8D;YAC9D,IAAM,aAAa,GAAG,KAA6B,CAAC;YACpD,IAAM,iBAAiB,GAAe,+DAA8B,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,2BAAW,CAAC,EAAE,CAAC,CAAC;YAChI,MAAM,IAAI,2BAAY,CAAC,iBAAiB,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,0CAAe","sourcesContent":["import { ErrorCodes } from '@tableau/api-external-contract-js';\nimport { ExecuteParameters, ExecuteResponse, InternalApiDispatcher, InternalTableauError, VerbId } from '@tableau/api-internal-contract-js';\nimport { InternalToExternalEnumMappings } from '../../EnumMappings/InternalToExternalEnumMappings';\nimport { TableauError } from '../../TableauError';\nimport { ShouldThrow } from '../../Utils/EnumConverter';\n\n/**\n * Each ServceImpl should extend this base class for the sake of\n * proper error handling.  This base handles the conversion\n * from internal errors to external errors that we throw to developers\n */\nexport class ServiceImplBase {\n  public constructor(private _dispatcher: InternalApiDispatcher, protected _registryId: number) {}\n\n  protected execute(verb: VerbId, params: ExecuteParameters): Promise<ExecuteResponse> {\n    return this._dispatcher.execute(verb, params).catch((error) => {\n      // Any internal error that comes from the dispatcher should be converted\n      // to an external error using the enum mapper for error codes.\n      const internalError = error as InternalTableauError;\n      const externalErrorCode: ErrorCodes = InternalToExternalEnumMappings.errorCode.convert(internalError.errorCode, ShouldThrow.No);\n      throw new TableauError(externalErrorCode, internalError.message);\n    });\n  }\n}\n"]}