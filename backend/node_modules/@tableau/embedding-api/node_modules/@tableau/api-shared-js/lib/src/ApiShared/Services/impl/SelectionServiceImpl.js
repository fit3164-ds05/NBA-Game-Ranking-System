"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Contract = require("@tableau/api-external-contract-js");
var api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
var SelectionModels_1 = require("../../Models/SelectionModels");
var TableauError_1 = require("../../TableauError");
var Param_1 = require("../../Utils/Param");
var ServiceImplBase_1 = require("./ServiceImplBase");
var SelectionServiceImpl = /** @class */ (function (_super) {
    __extends(SelectionServiceImpl, _super);
    function SelectionServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SelectionServiceImpl.prototype, "serviceName", {
        get: function () {
            return "selection-service" /* Selection */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method to clear all the selected marks for the given worksheet.
     *
     * @param visualId
     */
    SelectionServiceImpl.prototype.clearSelectedMarksAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'clearSelectedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ClearSelectedMarks, parameters).then(function (response) {
            return; // Expecting an empty model and hence the void response.
        });
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param selectionCriteria
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByValueAsync = function (visualId, selectionCriterias, selectionUpdateType) {
        var _a;
        var _this = this;
        if (selectionCriterias.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Selection criteria missing for selecting marks by value');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionMarks(selectionCriterias);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByValueAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a);
        if (selectionModelContainer.hierModelArr && selectionModelContainer.hierModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.HierValSelectionModels] = selectionModelContainer.hierModelArr;
        }
        if (selectionModelContainer.quantModelArr && selectionModelContainer.quantModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.QuantRangeSelectionModels] = selectionModelContainer.quantModelArr;
        }
        if (selectionModelContainer.dimModelArr && selectionModelContainer.dimModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.DimValSelectionModels] = selectionModelContainer.dimModelArr;
        }
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            _this.apiFilterHandlerCheckForCommandError(response.result);
            return;
        });
    };
    /**
     * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.
     * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.
     *
     * @param visualId
     * @param hoveredTuple
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    SelectionServiceImpl.prototype.hoverTupleAsync = function (visualId, hoveredTuple, tooltip, allowHoverActions) {
        var _a;
        var interactionModel = new SelectionModels_1.HoverTupleInteractionModel(visualId, this.ensureTupleIDIsNonNegative(hoveredTuple), tooltip, allowHoverActions);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'hoverTupleAsync',
            _a[api_internal_contract_js_1.ParameterId.HoverTupleInteraction] = interactionModel,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RaiseHoverTupleNotification, parameters).then(function (response) {
            return;
        });
    };
    /**
     * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.
     * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.
     *
     * @param visualId
     * @param selectedTuples
     * @param selectOption
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    SelectionServiceImpl.prototype.selectTuplesAsync = function (visualId, selectedTuples, selectOption, tooltip) {
        var _a;
        var interactionModel = new SelectionModels_1.SelectTuplesInteractionModel(visualId, selectedTuples, selectOption, tooltip);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectTuplesAsync',
            _a[api_internal_contract_js_1.ParameterId.SelectTuplesInteraction] = interactionModel,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RaiseSelectTuplesNotification, parameters).then(function (response) {
            return;
        });
    };
    SelectionServiceImpl.prototype.apiFilterHandlerCheckForCommandError = function (serverPm) {
        if (!serverPm[api_internal_contract_js_1.ParameterId.ParameterError]) {
            return;
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionFieldName, serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionValue, serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionDate, serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]);
        }
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param MarkInfo
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByIdAsync = function (visualId, marks, selectionUpdateType) {
        var _a;
        if (marks.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Marks info missing for selecting marks by Id');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionIds(marks);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByIdAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a[api_internal_contract_js_1.ParameterId.Selection] = selectionModelContainer.selection,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
            // TODO Investigate the error response with multiple output params and throw error accordingly.
        });
    };
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionIds = function (marks) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < marks.length; i++) {
            var tupleId = marks[i].tupleId;
            if (tupleId !== undefined && tupleId !== null) {
                // If tuple id is provided use that instead of pair
                ids.push(tupleId.toString()); // collect the tuple ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'tupleId parsing error');
            }
        }
        if (ids.length !== 0) {
            // tuple ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'tuples';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to prepare the pres models for selection by values.
     *
     * Supports 3 types for selection:
     * 1) Hierarchical value based selection
     * 2) Range value based selection
     * 3) Dimension value based selection
     *
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionMarks = function (selectionCriterias) {
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < selectionCriterias.length; i++) {
            var st = selectionCriterias[i];
            if (!(st.fieldName && st.value !== undefined && st.value !== null)) {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'Selection Criteria parsing error');
            }
            var catRegex = new RegExp('([[A-Za-z0-9]+]).*', 'g');
            var rangeOption = st.value;
            if (catRegex.test(st.fieldName)) {
                // Hierarchical value selection
                var hierModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.hierModelArr.push(hierModel);
            }
            else if (rangeOption.min !== undefined && rangeOption.max !== undefined) {
                // Range value selection
                var quantModel = this.addToRangeParamsList(st.fieldName, rangeOption);
                selectionModelContainer.quantModelArr.push(quantModel);
            }
            else {
                // Dimension value selection
                var dimModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.dimModelArr.push(dimModel);
            }
        }
        return selectionModelContainer;
    };
    /**
     * Method to transform the key value pair into value based pres model object.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToParamsList = function (fieldName, value) {
        var valueSelectionModel = new SelectionModels_1.ValueSelectionModel();
        var markValues = [];
        if (value instanceof Array) {
            var valueArr = value;
            for (var i = 0; i < valueArr.length; i++) {
                markValues.push(Param_1.Param.serializeParameterValue(valueArr[i]));
            }
        }
        else {
            markValues.push(Param_1.Param.serializeParameterValue(value));
        }
        valueSelectionModel.qualifiedFieldCaption = fieldName;
        valueSelectionModel.selectValues = markValues;
        return valueSelectionModel;
    };
    /**
     * Method to transform the key value pair into range based selection pres model.
     *
     * TODO: Need to handle the parsing of date type values.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToRangeParamsList = function (fieldName, value) {
        var rangeSelectionModel = new SelectionModels_1.RangeSelectionModel();
        rangeSelectionModel.qualifiedFieldCaption = fieldName;
        if (value.max !== undefined && value.max !== null) {
            rangeSelectionModel.maxValue = Param_1.Param.serializeParameterValue(value.max);
        }
        if (value.min !== undefined && value.min !== null) {
            rangeSelectionModel.minValue = Param_1.Param.serializeParameterValue(value.min);
        }
        rangeSelectionModel.included = this.validateNullOptionType(value.nullOption);
        return rangeSelectionModel;
    };
    /**
     * Method to validate the selection update type.
     *
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.validateSelectionUpdateType = function (selectionUpdateType) {
        if (selectionUpdateType === Contract.SelectionUpdateType.Replace) {
            return api_internal_contract_js_1.SelectionUpdateType.Replace;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Add) {
            return api_internal_contract_js_1.SelectionUpdateType.Add;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Remove) {
            return api_internal_contract_js_1.SelectionUpdateType.Remove;
        }
        return api_internal_contract_js_1.SelectionUpdateType.Replace;
    };
    /**
     * Method to validate the include type for range selection.
     *
     * @param nullOption
     */
    SelectionServiceImpl.prototype.validateNullOptionType = function (nullOption) {
        if (nullOption) {
            if (nullOption === Contract.FilterNullOption.NullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNull;
            }
            else if (nullOption === Contract.FilterNullOption.NonNullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNonNull;
            }
            else if (nullOption === Contract.FilterNullOption.AllValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
            }
        }
        return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
    };
    SelectionServiceImpl.prototype.ensureTupleIDIsNonNegative = function (tupleId) {
        if (tupleId && tupleId > 0) {
            return tupleId;
        }
        // 0 will not refer to a valid tuple (since tuple ids are 1-based),
        // but can be used for clearing the current hover or selection
        return 0;
    };
    return SelectionServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.SelectionServiceImpl = SelectionServiceImpl;
//# sourceMappingURL=SelectionServiceImpl.js.map