{"version":3,"file":"SelectionServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/SelectionServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport {\n  ExecuteParameters,\n  ParameterId,\n  QuantitativeIncludedValues,\n  SelectionUpdateType as SelectionUpdateTypeInternal,\n  VerbId,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport {\n  DimensionSelectionModel,\n  HierarchicalSelectionModel,\n  HoverTupleInteractionModel,\n  RangeSelectionModel,\n  SelectTuplesInteractionModel,\n  SelectionModelsContainer,\n  TupleSelectionModel,\n  ValueSelectionModel,\n} from '../../Models/SelectionModels';\nimport { TableauError } from '../../TableauError';\nimport { Param } from '../../Utils/Param';\nimport { SelectionService } from '../SelectionService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class SelectionServiceImpl extends ServiceImplBase implements SelectionService {\n  public get serviceName(): string {\n    return ServiceNames.Selection;\n  }\n\n  /**\n   * Method to clear all the selected marks for the given worksheet.\n   *\n   * @param visualId\n   */\n  public clearSelectedMarksAsync(visualId: VisualId): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'clearSelectedMarksAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n    return this.execute(VerbId.ClearSelectedMarks, parameters).then<void>((response) => {\n      return; // Expecting an empty model and hence the void response.\n    });\n  }\n\n  /**\n   * Method to select marks for the given worksheet.\n   *\n   * @param visualId\n   * @param selectionCriteria\n   * @param selectionUpdateType\n   */\n  public selectMarksByValueAsync(\n    visualId: VisualId,\n    selectionCriterias: Array<Contract.SelectionCriteria>,\n    selectionUpdateType: Contract.SelectionUpdateType,\n  ): Promise<void> {\n    if (selectionCriterias.length === 0) {\n      throw new TableauError(Contract.ErrorCodes.InvalidParameter, 'Selection criteria missing for selecting marks by value');\n    }\n\n    const selectionType: string = this.validateSelectionUpdateType(selectionUpdateType);\n    const selectionModelContainer: SelectionModelsContainer = this.parseSelectionMarks(selectionCriterias);\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'selectMarksByValueAsync',\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.SelectionUpdateType]: selectionType,\n    };\n\n    if (selectionModelContainer.hierModelArr && selectionModelContainer.hierModelArr.length) {\n      parameters[ParameterId.HierValSelectionModels] = selectionModelContainer.hierModelArr;\n    }\n    if (selectionModelContainer.quantModelArr && selectionModelContainer.quantModelArr.length) {\n      parameters[ParameterId.QuantRangeSelectionModels] = selectionModelContainer.quantModelArr;\n    }\n    if (selectionModelContainer.dimModelArr && selectionModelContainer.dimModelArr.length) {\n      parameters[ParameterId.DimValSelectionModels] = selectionModelContainer.dimModelArr;\n    }\n\n    return this.execute(VerbId.SelectByValue, parameters).then<void>((response) => {\n      this.apiFilterHandlerCheckForCommandError(response.result as { [key: string]: string });\n      return;\n    });\n  }\n\n  /**\n   * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.\n   * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.\n   *\n   * @param visualId\n   * @param hoveredTuple\n   * @param tooltip\n   * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error\n   */\n  public hoverTupleAsync(\n    visualId: VisualId,\n    hoveredTuple?: number,\n    tooltip?: Contract.TooltipContext | null,\n    allowHoverActions?: boolean,\n  ): Promise<void> {\n    let interactionModel = new HoverTupleInteractionModel(\n      visualId,\n      this.ensureTupleIDIsNonNegative(hoveredTuple),\n      tooltip,\n      allowHoverActions,\n    );\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'hoverTupleAsync',\n      [ParameterId.HoverTupleInteraction]: interactionModel,\n    };\n\n    return this.execute(VerbId.RaiseHoverTupleNotification, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  /**\n   * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.\n   * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.\n   *\n   * @param visualId\n   * @param selectedTuples\n   * @param selectOption\n   * @param tooltip\n   * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error\n   */\n  public selectTuplesAsync(\n    visualId: VisualId,\n    selectedTuples: Array<number>,\n    selectOption: Contract.SelectOptions,\n    tooltip?: Contract.TooltipContext,\n  ): Promise<void> {\n    let interactionModel = new SelectTuplesInteractionModel(visualId, selectedTuples, selectOption, tooltip);\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'selectTuplesAsync',\n      [ParameterId.SelectTuplesInteraction]: interactionModel,\n    };\n\n    return this.execute(VerbId.RaiseSelectTuplesNotification, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  private apiFilterHandlerCheckForCommandError(serverPm: { [key: string]: string }) {\n    if (!serverPm[ParameterId.ParameterError]) {\n      return;\n    }\n    if (serverPm[ParameterId.InvalidFields]) {\n      throw new TableauError(Contract.SharedErrorCodes.InvalidSelectionFieldName, serverPm[ParameterId.InvalidFields]);\n    }\n    if (serverPm[ParameterId.InvalidValues]) {\n      throw new TableauError(Contract.SharedErrorCodes.InvalidSelectionValue, serverPm[ParameterId.InvalidValues]);\n    }\n    if (serverPm[ParameterId.InvalidDates]) {\n      throw new TableauError(Contract.SharedErrorCodes.InvalidSelectionDate, serverPm[ParameterId.InvalidDates]);\n    }\n  }\n\n  /**\n   * Method to select marks for the given worksheet.\n   *\n   * @param visualId\n   * @param MarkInfo\n   * @param selectionUpdateType\n   */\n  public selectMarksByIdAsync(\n    visualId: VisualId,\n    marks: Array<Contract.MarkInfo>,\n    selectionUpdateType: Contract.SelectionUpdateType,\n  ): Promise<void> {\n    if (marks.length === 0) {\n      throw new TableauError(Contract.ErrorCodes.InvalidParameter, 'Marks info missing for selecting marks by Id');\n    }\n\n    const selectionType: string = this.validateSelectionUpdateType(selectionUpdateType);\n    const selectionModelContainer: SelectionModelsContainer = this.parseSelectionIds(marks);\n\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'selectMarksByIdAsync',\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.SelectionUpdateType]: selectionType,\n      [ParameterId.Selection]: selectionModelContainer.selection,\n    };\n    return this.execute(VerbId.SelectByValue, parameters).then<void>((response) => {\n      // Expecting an empty model and hence the void response.\n      return;\n      // TODO Investigate the error response with multiple output params and throw error accordingly.\n    });\n  }\n\n  /**\n   * Method to prepare the pres models for selection by MarksInfo\n   * @param marks\n   */\n  private parseSelectionIds(marks: Array<Contract.MarkInfo>): SelectionModelsContainer {\n    const ids: Array<string> = [];\n    const selectionModelContainer: SelectionModelsContainer = new SelectionModelsContainer();\n    for (let i = 0; i < marks.length; i++) {\n      const tupleId: number | undefined = marks[i].tupleId;\n      if (tupleId !== undefined && tupleId !== null) {\n        // If tuple id is provided use that instead of pair\n        ids.push(tupleId.toString()); // collect the tuple ids\n      } else {\n        throw new TableauError(Contract.ErrorCodes.InternalError, 'tupleId parsing error');\n      }\n    }\n    if (ids.length !== 0) {\n      // tuple ids based selection\n      const tupleSelectionModel: TupleSelectionModel = new TupleSelectionModel();\n      tupleSelectionModel.selectionType = 'tuples';\n      tupleSelectionModel.objectIds = ids;\n      selectionModelContainer.selection = tupleSelectionModel;\n    }\n    return selectionModelContainer;\n  }\n\n  /**\n   * Method to prepare the pres models for selection by values.\n   *\n   * Supports 3 types for selection:\n   * 1) Hierarchical value based selection\n   * 2) Range value based selection\n   * 3) Dimension value based selection\n   *\n   * @param marks\n   */\n  private parseSelectionMarks(selectionCriterias: Array<Contract.SelectionCriteria>): SelectionModelsContainer {\n    const selectionModelContainer: SelectionModelsContainer = new SelectionModelsContainer();\n\n    for (let i = 0; i < selectionCriterias.length; i++) {\n      const st = selectionCriterias[i];\n      if (!(st.fieldName && st.value !== undefined && st.value !== null)) {\n        throw new TableauError(Contract.ErrorCodes.InternalError, 'Selection Criteria parsing error');\n      }\n\n      const catRegex = new RegExp('([[A-Za-z0-9]+]).*', 'g');\n      const rangeOption = st.value as Contract.RangeValue;\n      if (catRegex.test(st.fieldName)) {\n        // Hierarchical value selection\n        const hierModel: HierarchicalSelectionModel = this.addToParamsList(st.fieldName, st.value) as HierarchicalSelectionModel;\n        selectionModelContainer.hierModelArr.push(hierModel);\n      } else if (rangeOption.min !== undefined && rangeOption.max !== undefined) {\n        // Range value selection\n        const quantModel: RangeSelectionModel = this.addToRangeParamsList(st.fieldName, rangeOption);\n        selectionModelContainer.quantModelArr.push(quantModel);\n      } else {\n        // Dimension value selection\n        const dimModel: DimensionSelectionModel = this.addToParamsList(st.fieldName, st.value) as DimensionSelectionModel;\n        selectionModelContainer.dimModelArr.push(dimModel);\n      }\n    }\n\n    return selectionModelContainer;\n  }\n\n  /**\n   * Method to transform the key value pair into value based pres model object.\n   *\n   * @param valueSelectionModel\n   * @param fieldName\n   * @param value\n   */\n  private addToParamsList(fieldName: string, value: Contract.CategoricalValue | Contract.RangeValue): ValueSelectionModel {\n    const valueSelectionModel: ValueSelectionModel = new ValueSelectionModel();\n    const markValues: Array<string> = [];\n\n    if (value instanceof Array) {\n      const valueArr: Array<string> = value;\n      for (let i = 0; i < valueArr.length; i++) {\n        markValues.push(Param.serializeParameterValue(valueArr[i]));\n      }\n    } else {\n      markValues.push(Param.serializeParameterValue(value));\n    }\n\n    valueSelectionModel.qualifiedFieldCaption = fieldName;\n    valueSelectionModel.selectValues = markValues;\n    return valueSelectionModel;\n  }\n\n  /**\n   * Method to transform the key value pair into range based selection pres model.\n   *\n   * TODO: Need to handle the parsing of date type values.\n   *\n   * @param valueSelectionModel\n   * @param fieldName\n   * @param value\n   */\n  private addToRangeParamsList(fieldName: string, value: Contract.RangeValue): RangeSelectionModel {\n    const rangeSelectionModel: RangeSelectionModel = new RangeSelectionModel();\n    rangeSelectionModel.qualifiedFieldCaption = fieldName;\n    if (value.max !== undefined && value.max !== null) {\n      rangeSelectionModel.maxValue = Param.serializeParameterValue(value.max);\n    }\n    if (value.min !== undefined && value.min !== null) {\n      rangeSelectionModel.minValue = Param.serializeParameterValue(value.min);\n    }\n    rangeSelectionModel.included = this.validateNullOptionType(value.nullOption);\n    return rangeSelectionModel;\n  }\n\n  /**\n   * Method to validate the selection update type.\n   *\n   * @param selectionUpdateType\n   */\n  private validateSelectionUpdateType(selectionUpdateType: Contract.SelectionUpdateType): string {\n    if (selectionUpdateType === Contract.SelectionUpdateType.Replace) {\n      return SelectionUpdateTypeInternal.Replace;\n    } else if (selectionUpdateType === Contract.SelectionUpdateType.Add) {\n      return SelectionUpdateTypeInternal.Add;\n    } else if (selectionUpdateType === Contract.SelectionUpdateType.Remove) {\n      return SelectionUpdateTypeInternal.Remove;\n    }\n    return SelectionUpdateTypeInternal.Replace;\n  }\n\n  /**\n   * Method to validate the include type for range selection.\n   *\n   * @param nullOption\n   */\n  private validateNullOptionType(nullOption: Contract.FilterNullOption | undefined): string {\n    if (nullOption) {\n      if (nullOption === Contract.FilterNullOption.NullValues) {\n        return QuantitativeIncludedValues.IncludeNull;\n      } else if (nullOption === Contract.FilterNullOption.NonNullValues) {\n        return QuantitativeIncludedValues.IncludeNonNull;\n      } else if (nullOption === Contract.FilterNullOption.AllValues) {\n        return QuantitativeIncludedValues.IncludeAll;\n      }\n    }\n\n    return QuantitativeIncludedValues.IncludeAll;\n  }\n\n  private ensureTupleIDIsNonNegative(tupleId?: number): number {\n    if (tupleId && tupleId > 0) {\n      return tupleId;\n    }\n\n    // 0 will not refer to a valid tuple (since tuple ids are 1-based),\n    // but can be used for clearing the current hover or selection\n    return 0;\n  }\n}\n"]}