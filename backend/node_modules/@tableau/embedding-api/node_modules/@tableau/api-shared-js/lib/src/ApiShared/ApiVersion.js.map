{"version":3,"file":"ApiVersion.js","sourceRoot":"","sources":["../../../src/ApiShared/ApiVersion.ts"],"names":[],"mappings":";;AAAA,iDAAgD;AAGhD;;GAEG;AACH;IAAA;IAcA,CAAC;IAPC,sBAAkB,sBAAQ;QAH1B;;WAEG;aACH;YACE,OAAO,UAAU,CAAC,SAAS,CAAC;QAC9B,CAAC;;;OAAA;IAEa,2BAAgB,GAA9B,UAA+B,SAAiB,EAAE,OAAgB;QAChE,UAAU,CAAC,SAAS,GAAG,IAAI,6BAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IACH,iBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,gCAAU","sourcesContent":["import { VersionNumber } from './VersionNumber';\nimport { VersionNumberContract } from './VersionNumberContract';\n\n/**\n * This is the singleton wrapper of VersionNumber\n */\nexport class ApiVersion {\n  // Using some webpack tricks, we can inject this version into our code (kinda like c++ preprocessor stuff)\n  private static _instance: VersionNumberContract;\n\n  /**\n   * Gets the singleton instance of the version number.\n   */\n  public static get Instance(): VersionNumberContract {\n    return ApiVersion._instance;\n  }\n\n  public static SetVersionNumber(numString: string, isAlpha: boolean): void {\n    ApiVersion._instance = new VersionNumber(numString, isAlpha);\n  }\n}\n"]}