{"version":3,"file":"DataSourceServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/DataSourceServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { ErrorCodes } from '@tableau/api-external-contract-js';\nimport * as InternalContract from '@tableau/api-internal-contract-js';\nimport {\n  ConnectionDescriptionSummary,\n  DataSchema,\n  ExecuteParameters,\n  InternalApiDispatcher,\n  LogicalTableInfo,\n  ParameterId,\n  TableInfo,\n  TableInfos,\n  VerbId,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport { DataSource } from '../../DataSource';\nimport { Field } from '../../Field';\nimport { DataSourceImpl } from '../../Impl/DataSourceImpl';\nimport { FieldImpl } from '../../Impl/FieldImpl';\nimport { TableauError } from '../../TableauError';\nimport { DataSourceService } from '../DataSourceService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\nexport class DataSourceServiceImpl extends ServiceImplBase implements DataSourceService {\n  // Since Object Model is supported since Tableau 2020.2, DataSourceServiceImpl can be initialized with the\n  // platform version when OM was supported. Once we drop support for Tableau versions <= 2020.1, all additional\n  // code in here for Object Model can be removed.\n  public constructor(dispatcher: InternalApiDispatcher, registryId: number) {\n    super(dispatcher, registryId);\n  }\n  public get serviceName(): string {\n    return ServiceNames.DataSourceService;\n  }\n\n  public refreshAsync(dataSourceId?: string): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'refreshAsync',\n      [ParameterId.DeltaTimeMs]: 0,\n      [ParameterId.ShouldRefreshDS]: true,\n    };\n\n    // On server: Not passing the datasource id will refresh all datasources.\n    if (dataSourceId) {\n      parameters[ParameterId.DataSourceId] = dataSourceId;\n    }\n\n    return this.execute(VerbId.RefreshDataSource, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public getActiveTablesAsync(dataSourceId: string): Promise<Array<TableInfo>> {\n    const joinParameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getActiveTablesAsync',\n      [ParameterId.DataSourceId]: dataSourceId,\n    };\n\n    // Get the description of the tables used by this connection\n    return this.execute(VerbId.GetActiveTables, joinParameters).then<Array<TableInfo>>((joinResponse) => {\n      const tableInfos = joinResponse.result as TableInfos;\n\n      // getActiveTables is unsupported for cubes and GA. We do not have a connection type property\n      // available from the platform (intentionally, to reduce code churn as new connections are added).\n      // Instead,just check if any tables are returned. This array will be empty for any non-table based datasource.\n      if (tableInfos.tables.length === 0) {\n        throw new TableauError(ErrorCodes.UnsupportedMethodForDataSourceType, `getActiveTables is not supported for: ${dataSourceId}`);\n      }\n\n      return tableInfos.tables;\n    });\n  }\n\n  public getDataSourcesAsync(visualId: VisualId): Promise<DataSchema> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getDataSourcesAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n    return this.execute(VerbId.GetDataSources, parameters).then<DataSchema>((response) => {\n      const dataSchema = response.result as DataSchema;\n      return dataSchema;\n    });\n  }\n\n  public getAllDataSourcesAsync(): Promise<DataSchema> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getAllDataSourcesAsync',\n    };\n    return this.execute(VerbId.GetAllDataSources, parameters).then<DataSchema>((response) => {\n      const dataSchema = response.result as DataSchema;\n      return dataSchema;\n    });\n  }\n\n  public getConnectionSummariesAsync(dataSourceId: string): Promise<ConnectionDescriptionSummary[]> {\n    const params: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getConnectionSummariesAsync',\n      [ParameterId.DataSourceId]: dataSourceId,\n    };\n\n    // Get the description of the tables used by this connection\n    return this.execute(VerbId.GetConnectionDescriptionSummaries, params).then<ConnectionDescriptionSummary[]>((response) => {\n      const descriptionSummaries = response.result as ConnectionDescriptionSummary[];\n      return descriptionSummaries;\n    });\n  }\n\n  public getFieldAsync(globalfieldName: string): Promise<Contract.Field> {\n    const verb = VerbId.GetFieldAndDataSource;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getFieldAsync',\n      [ParameterId.FieldId]: globalfieldName,\n    };\n\n    return this.execute(verb, parameters).then<Contract.Field>((response) => {\n      const dataSource = response.result[ParameterId.DataSource] as InternalContract.DataSource;\n      const field = response.result[ParameterId.Field] as Field;\n      return this.convertField(field, this.convertDataSource(dataSource));\n    });\n  }\n\n  public getLogicalTablesAsync(dataSourceId: string): Promise<Array<LogicalTableInfo>> {\n    const params: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getLogicalTablesAsync',\n      [ParameterId.DataSourceId]: dataSourceId,\n    };\n    return this.execute(VerbId.GetLogicalTables, params).then<Array<LogicalTableInfo>>((response) => {\n      return response.result as Array<LogicalTableInfo>;\n    });\n  }\n\n  public getUnderlyingTablesAsync(visualId: VisualId): Promise<Array<LogicalTableInfo>> {\n    const params: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getUnderlyingTablesAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n    return this.execute(VerbId.GetUnderlyingTables, params).then<Array<LogicalTableInfo>>((response) => {\n      return response.result as Array<LogicalTableInfo>;\n    });\n  }\n\n  private convertField(field: InternalContract.Field, dataSource: Contract.DataSource): Contract.Field {\n    return new Field(new FieldImpl(field, dataSource));\n  }\n\n  private convertDataSource(dataSource: InternalContract.DataSource): Contract.DataSource {\n    return new DataSource(new DataSourceImpl(dataSource, this._registryId));\n  }\n}\n"]}