import * as Contract from '@tableau/api-external-contract-js';
import { IncludeDataValuesOption } from '@tableau/api-external-contract-js';
import { DataTable as DataTableInternalContract, VisualId } from '@tableau/api-internal-contract-js';
import { DataTable } from '../../Models/GetDataModels';
import { DataTableReader } from '../../Models/GetDataTableReaderModels';
import { GetDataService, GetDataType } from '../GetDataService';
import { ServiceImplBase } from './ServiceImplBase';
export declare class GetDataServiceImpl extends ServiceImplBase implements GetDataService {
    private viewDataTableCacheId;
    get serviceName(): string;
    getMaxRowLimit(): number;
    getViewDataTableCacheId(): string;
    private getLimitedMaxRows;
    getUnderlyingDataAsync(visualId: VisualId, getType: GetDataType, ignoreAliases: boolean, ignoreSelection: boolean, includeAllColumns: boolean, columnsToIncludeById: Array<string>, maxRows: number, includeDataValuesOption: IncludeDataValuesOption, applyWorksheetFormatting: boolean): Promise<DataTable>;
    getSummaryDataReaderAsync(visualId: VisualId, pageRowCount: number, ignoreAliases: boolean, ignoreSelection: boolean, includeAllColumns: boolean, columnsToIncludeById: Array<string>, includeDataValuesOption: IncludeDataValuesOption, applyWorksheetFormatting: boolean): Promise<DataTableReader>;
    getSummaryColumnsInfoAsync(visualId: VisualId): Promise<Array<Contract.Column>>;
    getSelectedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection>;
    getHighlightedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection>;
    getDataSourceDataAsync(dataSourceId: string, ignoreAliases: boolean, maxRows: number, columnsToInclude: Array<string>, columnsToIncludeById: Array<string>, includeDataValuesOption: IncludeDataValuesOption): Promise<DataTable>;
    getLogicalTableDataAsync(datasourceId: string, logicalTableId: string, ignoreAliases: boolean, maxRows: number, columnsToInclude: Array<string>, columnsToIncludeById: Array<string>, includeDataValuesOption: IncludeDataValuesOption): Promise<DataTable>;
    getLogicalTableDataReaderAsync(datasourceId: string, logicalTableId: string, pageRowCount: number, ignoreAliases: boolean, columnsToIncludeById: Array<string>, includeDataValuesOption: IncludeDataValuesOption): Promise<DataTableReader>;
    getUnderlyingTableDataAsync(visualId: VisualId, logicalTableId: string, ignoreAliases: boolean, ignoreSelection: boolean, includeAllColumns: boolean, columnsToIncludeById: Array<string>, maxRows: number, includeDataValuesOption: IncludeDataValuesOption, applyWorksheetFormatting: boolean): Promise<Contract.DataTable>;
    getUnderlyingTableDataReaderAsync(visualId: VisualId, logicalTableId: string, pageRowCount: number, ignoreAliases: boolean, ignoreSelection: boolean, includeAllColumns: boolean, columnsToIncludeById: Array<string>, includeDataValuesOption: IncludeDataValuesOption, applyWorksheetFormatting: boolean): Promise<Contract.DataTableReader>;
    private static summaryTableId;
    getPageAsync(tableId: string, pageNumber: number, pageSize: number): Promise<Contract.DataTable>;
    releaseAsync(tableId: string): Promise<void>;
    private verifyIncludeColumnArray;
    protected processResultsTable(responseData: DataTableInternalContract, isSummary: boolean): DataTable;
    protected processResultsPage(responseData: DataTableInternalContract, isSummary: boolean): DataTable;
}
//# sourceMappingURL=GetDataServiceImpl.d.ts.map