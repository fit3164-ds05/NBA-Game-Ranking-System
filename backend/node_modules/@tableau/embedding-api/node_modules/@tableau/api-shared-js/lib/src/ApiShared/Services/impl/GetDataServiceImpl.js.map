{"version":3,"file":"GetDataServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/GetDataServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { ErrorCodes, IncludeDataValuesOption } from '@tableau/api-external-contract-js';\nimport {\n  ApiShowDataTableFormat,\n  DataTable as DataTableInternalContract,\n  DataTableReader as DataTableReaderInternalContract,\n  ExecuteParameters,\n  HighlightedMarksTable,\n  ParameterId,\n  SelectedMarksTable,\n  UnderlyingDataTable,\n  VerbId,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TableauError } from '../../../ApiShared';\nimport { ExternalToInternalEnumMappings } from '../../EnumMappings/ExternalToInternalEnumMappings';\nimport { Column, DataTable, MarkInfo } from '../../Models/GetDataModels';\nimport { DataTableReader } from '../../Models/GetDataTableReaderModels';\nimport { DataValueFactory } from '../../Utils/DataValueFactory';\nimport { GetDataService, GetDataType } from '../GetDataService';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class GetDataServiceImpl extends ServiceImplBase implements GetDataService {\n  // The extension/embedding instance uses the same cache for all DataTableReaders.\n  private viewDataTableCacheId: string = uuidv4();\n\n  public get serviceName(): string {\n    return ServiceNames.GetData;\n  }\n\n  public getMaxRowLimit(): number {\n    return 10000;\n  }\n\n  public getViewDataTableCacheId(): string {\n    return this.viewDataTableCacheId;\n  }\n\n  private getLimitedMaxRows(requestedRows: number, rowCountLimit: number): number {\n    return requestedRows > 0 && requestedRows < rowCountLimit ? requestedRows : rowCountLimit;\n  }\n\n  public getUnderlyingDataAsync(\n    visualId: VisualId,\n    getType: GetDataType,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    maxRows: number,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<DataTable> {\n    // Create all of our parameters\n    const summaryData = getType === GetDataType.Summary;\n    const functionName = summaryData ? 'getSummaryDataAsync' : 'getUnderlyingDataAsync';\n    const verb = summaryData ? VerbId.GetDataSummaryData : VerbId.GetUnderlyingData;\n    const requestMaxRows = verb === VerbId.GetUnderlyingData ? this.getLimitedMaxRows(maxRows, this.getMaxRowLimit() + 1) : maxRows;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: functionName,\n    };\n    parameters[ParameterId.VisualId] = visualId;\n    parameters[ParameterId.IgnoreAliases] = ignoreAliases;\n    parameters[ParameterId.IgnoreSelection] = ignoreSelection;\n    parameters[ParameterId.IncludeAllColumns] = includeAllColumns;\n    parameters[ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById);\n    parameters[ParameterId.MaxRows] = requestMaxRows;\n    parameters[ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption);\n    parameters[ParameterId.ApplyWorksheetFormatting] = applyWorksheetFormatting;\n\n    return this.execute(verb, parameters).then<DataTable>((response) => {\n      const responseData = response.result as UnderlyingDataTable;\n      return this.processResultsTable(responseData.data, responseData.isSummary);\n    });\n  }\n\n  public getSummaryDataReaderAsync(\n    visualId: VisualId,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<DataTableReader> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getSummaryDataReaderAsync',\n      [ParameterId.ViewDataTableCacheId]: this.getViewDataTableCacheId(),\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.PageRowCount]: pageRowCount,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.IgnoreSelection]: ignoreSelection,\n      [ParameterId.IncludeAllColumns]: includeAllColumns,\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n      [ParameterId.ApplyWorksheetFormatting]: applyWorksheetFormatting,\n    };\n\n    return this.execute(VerbId.GetDataSummaryDataReader, parameters).then<DataTableReader>((response) => {\n      const responseData = response.result as DataTableReaderInternalContract;\n\n      return new DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, this._registryId);\n    });\n  }\n\n  public getSummaryColumnsInfoAsync(visualId: VisualId): Promise<Array<Contract.Column>> {\n    // Create all the parameters for GetDataType of Summary with 1 row, and only native values\n    // Then return just the columns\n    const verb = VerbId.GetDataSummaryData;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getSummaryColumnsInfoAsync',\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.IgnoreAliases]: true,\n      [ParameterId.IgnoreSelection]: true,\n      [ParameterId.IncludeAllColumns]: true,\n      [ParameterId.MaxRows]: 1,\n      [ParameterId.ShowDataTableFormat]: ApiShowDataTableFormat.NativeValuesOnly,\n    };\n\n    return this.execute(verb, parameters).then<Array<Contract.Column>>((response) => {\n      const underlyingDataTable = response.result as UnderlyingDataTable;\n      const dataTable = underlyingDataTable.data;\n      const columns = dataTable.headers.map((h) => new Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index));\n      return columns;\n    });\n  }\n\n  public getSelectedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getSelectedMarksAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n    return this.execute(VerbId.GetSelectedMarks, parameters).then<Contract.MarksCollection>((response) => {\n      const responseData = response.result as SelectedMarksTable;\n      return {\n        data: responseData.data.map((table) => this.processResultsTable(table, true)),\n      };\n    });\n  }\n\n  public getHighlightedMarksAsync(visualId: VisualId): Promise<Contract.MarksCollection> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getHighlightedMarksAsync',\n      [ParameterId.VisualId]: visualId,\n    };\n    return this.execute(VerbId.GetHighlightedMarks, parameters).then<Contract.MarksCollection>((response) => {\n      const responseData = response.result as HighlightedMarksTable;\n      return {\n        data: responseData.data.map((table) => this.processResultsTable(table, true)),\n      };\n    });\n  }\n\n  public getDataSourceDataAsync(\n    dataSourceId: string,\n    ignoreAliases: boolean,\n    maxRows: number,\n    columnsToInclude: Array<string>,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<DataTable> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getDataSourceDataAsync',\n      [ParameterId.DataSourceId]: dataSourceId,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.MaxRows]: this.getLimitedMaxRows(maxRows, this.getMaxRowLimit() + 1),\n      [ParameterId.ColumnsToInclude]: this.verifyIncludeColumnArray(columnsToInclude),\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n    };\n\n    return this.execute(VerbId.GetDataSourceData, parameters).then<DataTable>((response) => {\n      const responseData = response.result as UnderlyingDataTable;\n      return this.processResultsTable(responseData.data, false);\n    });\n  }\n\n  public getLogicalTableDataAsync(\n    datasourceId: string,\n    logicalTableId: string,\n    ignoreAliases: boolean,\n    maxRows: number,\n    columnsToInclude: Array<string>,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<DataTable> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getLogicalTableDataAsync',\n      [ParameterId.ColumnsToInclude]: columnsToInclude,\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.DataSourceId]: datasourceId,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.LogicalTableId]: logicalTableId,\n      [ParameterId.MaxRows]: this.getLimitedMaxRows(maxRows, this.getMaxRowLimit() + 1),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n    };\n\n    return this.execute(VerbId.GetLogicalTableData, parameters).then<DataTable>((response) => {\n      const responseData = response.result as UnderlyingDataTable;\n      return this.processResultsTable(responseData.data, false);\n    });\n  }\n\n  public getLogicalTableDataReaderAsync(\n    datasourceId: string,\n    logicalTableId: string,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n  ): Promise<DataTableReader> {\n    pageRowCount = this.getLimitedMaxRows(pageRowCount, this.getMaxRowLimit());\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getLogicalTableDataReaderAsync',\n      [ParameterId.ViewDataTableCacheId]: this.getViewDataTableCacheId(),\n      [ParameterId.DataSourceId]: datasourceId,\n      [ParameterId.LogicalTableId]: logicalTableId,\n      [ParameterId.PageRowCount]: pageRowCount,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n    };\n\n    return this.execute(VerbId.GetLogicalTableDataReader, parameters).then<DataTableReader>((response) => {\n      const responseData = response.result as DataTableReaderInternalContract;\n\n      return new DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, this._registryId);\n    });\n  }\n\n  public getUnderlyingTableDataAsync(\n    visualId: VisualId,\n    logicalTableId: string,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    maxRows: number,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<Contract.DataTable> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getUnderlyingTableDataAsync',\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.LogicalTableId]: logicalTableId,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.IgnoreSelection]: ignoreSelection,\n      [ParameterId.IncludeAllColumns]: includeAllColumns,\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.MaxRows]: this.getLimitedMaxRows(maxRows, this.getMaxRowLimit() + 1),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n      [ParameterId.ApplyWorksheetFormatting]: applyWorksheetFormatting,\n    };\n\n    return this.execute(VerbId.GetUnderlyingTableData, parameters).then<DataTable>((response) => {\n      const responseData = response.result as UnderlyingDataTable;\n      return this.processResultsTable(responseData.data, false);\n    });\n  }\n\n  public getUnderlyingTableDataReaderAsync(\n    visualId: VisualId,\n    logicalTableId: string,\n    pageRowCount: number,\n    ignoreAliases: boolean,\n    ignoreSelection: boolean,\n    includeAllColumns: boolean,\n    columnsToIncludeById: Array<string>,\n    includeDataValuesOption: IncludeDataValuesOption,\n    applyWorksheetFormatting: boolean,\n  ): Promise<Contract.DataTableReader> {\n    pageRowCount = this.getLimitedMaxRows(pageRowCount, this.getMaxRowLimit());\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getUnderlyingTableDataReaderAsync',\n      [ParameterId.ViewDataTableCacheId]: this.getViewDataTableCacheId(),\n      [ParameterId.VisualId]: visualId,\n      [ParameterId.LogicalTableId]: logicalTableId,\n      [ParameterId.IgnoreAliases]: ignoreAliases,\n      [ParameterId.IgnoreSelection]: ignoreSelection,\n      [ParameterId.IncludeAllColumns]: includeAllColumns,\n      [ParameterId.ColumnsToIncludeById]: this.verifyIncludeColumnArray(columnsToIncludeById),\n      [ParameterId.ShowDataTableFormat]: ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),\n      [ParameterId.PageRowCount]: pageRowCount,\n      [ParameterId.ApplyWorksheetFormatting]: applyWorksheetFormatting,\n    };\n\n    return this.execute(VerbId.GetUnderlyingTableDataReader, parameters).then<DataTableReader>((response) => {\n      const responseData = response.result as DataTableReaderInternalContract;\n\n      return new DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, this._registryId);\n    });\n  }\n\n  private static summaryTableId = '';\n\n  public getPageAsync(tableId: string, pageNumber: number, pageSize: number): Promise<Contract.DataTable> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getPageAsync',\n      [ParameterId.ViewDataTableCacheId]: this.getViewDataTableCacheId(),\n      [ParameterId.ViewDataTableId]: tableId,\n      [ParameterId.DataRowIndex]: pageNumber * pageSize,\n    };\n\n    return this.execute(VerbId.GetDataTableReaderPage, parameters).then<DataTable>((response) => {\n      const responseData = response.result as DataTableInternalContract;\n      return this.processResultsPage(responseData, tableId === GetDataServiceImpl.summaryTableId ? true : false);\n    });\n  }\n\n  public releaseAsync(tableId: string): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'release',\n      [ParameterId.ViewDataTableCacheId]: this.getViewDataTableCacheId(),\n      [ParameterId.ViewDataTableId]: tableId,\n    };\n\n    return this.execute(VerbId.ReleaseDataTableReader, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  private verifyIncludeColumnArray(columns: Array<string>): Array<string> {\n    // columns must be a valid array\n    if (!Array.isArray(columns)) {\n      throw new TableauError(ErrorCodes.InvalidParameter, 'columnsToInclude and columnsToIncludeById must be valid arrays');\n    }\n\n    // Remove any duplicates from the input array\n    const columnsAsSet: Set<string> = new Set(columns);\n    return Array.from(columnsAsSet);\n  }\n\n  protected processResultsTable(responseData: DataTableInternalContract, isSummary: boolean): DataTable {\n    const headers = responseData.headers.map((h) => new Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index));\n\n    // TODO This should be controlled by a flag indicating whether this api will respond marks info or not\n    let marks;\n    if (responseData.marks) {\n      marks = responseData.marks.map((h) => new MarkInfo(h.type, h.color, h.tupleId));\n    }\n\n    // Limit+1 is our sentinal that underlying data contains more rows than user is allowed to fetch.\n    // Remove the last element so we always return MaxRowLimit\n    const isTotalRowCountLimited = isSummary === false && responseData.dataTable.length === this.getMaxRowLimit() + 1;\n    if (isTotalRowCountLimited) {\n      responseData.dataTable.length -= 1;\n    }\n\n    const table = responseData.dataTable.map((row) => {\n      return row.map((cell, index) => {\n        return DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);\n      });\n    });\n\n    if (marks) {\n      return new DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary, marks);\n    }\n    return new DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary);\n  }\n\n  protected processResultsPage(responseData: DataTableInternalContract, isSummary: boolean): DataTable {\n    const headers = responseData.headers.map((h) => new Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index));\n\n    let marks;\n    if (responseData.marks) {\n      marks = responseData.marks.map((h) => new MarkInfo(h.type, h.color, h.tupleId));\n    }\n\n    const table = responseData.dataTable.map((row) => {\n      return row.map((cell, index) => {\n        return DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);\n      });\n    });\n\n    if (marks) {\n      return new DataTable(table, headers, table.length, false, isSummary, marks);\n    }\n    return new DataTable(table, headers, table.length, false, isSummary);\n  }\n}\n"]}