{"version":3,"file":"VizServiceImpl.js","sourceRoot":"","sources":["../../../../../src/ApiShared/Services/impl/VizServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { CustomViewModel, ExecuteParameters, ParameterId, VerbId } from '@tableau/api-internal-contract-js';\nimport { CustomViewImpl } from '../../Impl/CustomViewImpl';\nimport { ServiceNames } from '../ServiceRegistry';\nimport { VizService } from '../VizService';\nimport { ServiceImplBase } from './ServiceImplBase';\n\nexport class VizServiceImpl extends ServiceImplBase implements VizService {\n  public get serviceName(): string {\n    return ServiceNames.Viz;\n  }\n\n  public createVizImageAsync(inputSpec: object): Promise<string> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'createVizImageAsync',\n      [ParameterId.VizAPIInputJson]: JSON.stringify(inputSpec),\n    };\n\n    return this.execute(VerbId.VizAPI, parameters).then((response) => {\n      const result = response.result as string;\n      return result;\n    });\n  }\n\n  public activateSheetAsync(name: string): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'activateSheetAsync',\n      [ParameterId.SwitchToSheetName]: name,\n    };\n\n    return this.execute(VerbId.ActivateSheet, parameters).then(() => {\n      return;\n    });\n  }\n\n  public getCustomViewsAsync(): Promise<Array<CustomViewImpl>> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getCustomViewsAsync',\n    };\n\n    return this.execute(VerbId.GetCustomViews, parameters).then<Array<CustomViewImpl>>((response) => {\n      const customViews = response.result as Array<CustomViewModel>;\n      return customViews.map((customView: CustomViewModel) => {\n        return new CustomViewImpl(customView, this._registryId);\n      });\n    });\n  }\n\n  public showCustomViewAsync(customViewName?: string | null): Promise<CustomViewImpl | undefined> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'showCustomViewAsync',\n      [ParameterId.CustomViewName]: customViewName || '', // a falsey value means \"show original view\"\n    };\n\n    return this.execute(VerbId.ShowCustomView, parameters).then<CustomViewImpl | undefined>((response) => {\n      const customView = response.result as CustomViewModel;\n      return customView?.luid ? new CustomViewImpl(customView, this._registryId) : undefined;\n    });\n  }\n\n  public removeCustomViewAsync(customViewName: string): Promise<CustomViewImpl> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'removeCustomViewAsync',\n      [ParameterId.CustomViewName]: customViewName,\n    };\n\n    return this.execute(VerbId.RemoveCustomView, parameters).then<CustomViewImpl>((response) => {\n      const customView = response.result as CustomViewModel;\n      return new CustomViewImpl(customView, this._registryId);\n    });\n  }\n\n  public saveCustomViewAsync(customViewName: string): Promise<CustomViewImpl> {\n    // CustomViewIsDefault is a required parameter, but our API has not been updated to allow it to be specified yet.\n    // We should add a 'default' parameter to the interface.\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'saveCustomViewAsync',\n      [ParameterId.CustomViewName]: customViewName,\n      [ParameterId.CustomViewIsDefault]: false,\n    };\n\n    return this.execute(VerbId.SaveWorkbookAsCustomView, parameters).then<CustomViewImpl>((response) => {\n      const customView = response.result as CustomViewModel;\n      return new CustomViewImpl(customView, this._registryId);\n    });\n  }\n\n  public setActiveCustomViewAsDefaultAsync(): Promise<void> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'setActiveCustomViewAsDefaultAsync',\n    };\n\n    return this.execute(VerbId.SetActiveCustomViewAsDefault, parameters).then(() => {\n      return;\n    });\n  }\n\n  public saveAsync(customView: CustomViewImpl): Promise<CustomViewImpl> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'saveAsync',\n      [ParameterId.CustomViewLuid]: customView.luid,\n      [ParameterId.CustomViewName]: customView.name,\n      [ParameterId.CustomViewIsDefault]: customView.isDefault,\n      [ParameterId.CustomViewIsPublic]: customView.shared,\n    };\n\n    return this.execute(VerbId.UpdateCustomView, parameters).then<CustomViewImpl>((response) => {\n      const customView = response.result as CustomViewModel;\n      return new CustomViewImpl(customView, this._registryId);\n    });\n  }\n\n  public getCurrentSrcAsync(): Promise<string> {\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getCurrentSrcAsync',\n    };\n\n    return this.execute(VerbId.GetCurrentSrc, parameters).then((response) => response.result as string);\n  }\n}\n"]}