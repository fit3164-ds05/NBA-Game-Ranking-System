import * as Contract from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { ApiService } from './ServiceRegistry';
/**
 * Service for implementing the logic for visual model related calls
 *
 * @interface VisualModelService
 * @extends {ApiService}
 */
export interface VisualModelService extends ApiService {
    /**
     * Gets the visual specification for the current worksheet
     *
     * @param {VisualId} visualId  The visual id
     * @returns {Promise<Contract.VisualSpecification>}  Visual specification for the current worksheet
     */
    getVisualSpecificationAsync(visualId: VisualId): Promise<Contract.VisualSpecification>;
    /**
     * Add fields to the current worksheet
     *
     * @param {VisualId} visualId  The visual id
     * @param {MarksCardIndex} marksCardIndex Marks card index
     * @param {EncodingType} EncodingType Encoding type
     * @param {Columns} columns Columns to add
     * @param {StartIndex} startIndex Where to insert
     * @return  This function does not return anything.
     */
    addMarksCardFieldsAsync(visualId: VisualId, marksCardIndex: number, encodingType: Contract.EncodingType, columns: Array<Contract.Column>, startIndex: number): Promise<void>;
    /**
     * Move field on the current worksheet
     *
     * @param {VisualId} visualId  The visual id
     * @param {FromIndex} fromIndex Move from here
     * @param {ToIndex} toIndex Move to here
     * @return  This function does not return anything.
     */
    moveMarksCardFieldAsync(visualId: VisualId, marksCardIndex: number, fromIndex: number, toIndex: number, fieldCount: number): Promise<void>;
    /**
     * Delete and add fields to the current worksheet
     *
     * @param {VisualId} visualId  The visual id
     * @param {MarksCardIndex} marksCardIndex Marks card index
     * @param {EncodingType} EncodingType Encoding type
     * @param {StartIndex} startIndex Where to insert
     * @param {DeleteCount} deleteCount How many to delete
     * @param {Columns} columns Columns to add
     * @return  This function does not return anything.
     */
    spliceMarksCardFieldsAsync(visualId: VisualId, marksCardIndex: number, encodingType: Contract.EncodingType, startIndex: number, deleteCount: number, columns: Array<Contract.Column>): Promise<void>;
    /**
     * Opens a dialog to edit aliases for values of a particular field
     *
     * @param fieldName Name of the field that's getting aliases for its values
     */
    editAliasesDialogAsync(fieldName: string): Promise<void>;
}
//# sourceMappingURL=VisualModelService.d.ts.map