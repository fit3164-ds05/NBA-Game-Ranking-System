{"version":3,"file":"DataSourceImpl.js","sourceRoot":"","sources":["../../../../src/ApiShared/Impl/DataSourceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { IncludeDataValuesOption } from '@tableau/api-external-contract-js';\nimport * as InternalContract from '@tableau/api-internal-contract-js';\nimport { ConnectionSummary } from '../ConnectionSummary';\nimport { Field } from '../Field';\nimport { LogicalTable } from '../LogicalTable';\nimport { DataSourceService } from '../Services/DataSourceService';\nimport { GetDataService } from '../Services/GetDataService';\nimport { ApiServiceRegistry, ServiceNames } from '../Services/ServiceRegistry';\nimport { TableSummary } from '../TableSummary';\nimport { ErrorHelpers } from '../Utils/ErrorHelpers';\nimport { FieldImpl } from './FieldImpl';\n\nexport class DataSourceImpl {\n  private _fields: Array<Field>;\n\n  public constructor(private _dataSourceInfo: InternalContract.DataSource, private _registryId: number) {\n    this._fields = _dataSourceInfo.fields.map((fieldModel) => {\n      const fieldImpl = new FieldImpl(fieldModel, this);\n      return new Field(fieldImpl);\n    });\n  }\n\n  public get name(): string {\n    return this._dataSourceInfo.name;\n  }\n\n  public get id(): string {\n    return this._dataSourceInfo.id;\n  }\n\n  public get extractUpdateTime(): string | undefined {\n    return this._dataSourceInfo.extractUpdateTime;\n  }\n\n  public get fields(): Array<Contract.Field> {\n    return this._fields;\n  }\n\n  public get isExtract(): boolean {\n    return this._dataSourceInfo.isExtract;\n  }\n\n  public get isPublished(): boolean | undefined {\n    return this._dataSourceInfo.isPublished;\n  }\n\n  public publishedUrl(): string | undefined {\n    return this._dataSourceInfo.publishedUrl;\n  }\n\n  public getMaxPageRowLimit(): number {\n    return 10000;\n  }\n\n  public refreshAsync(): Promise<void> {\n    const dataSourceService = ApiServiceRegistry.get(this._registryId).getService<DataSourceService>(ServiceNames.DataSourceService);\n\n    return dataSourceService.refreshAsync(this._dataSourceInfo.id);\n  }\n\n  public getConnectionSummariesAsync(): Promise<Contract.ConnectionSummary[]> {\n    const dataSourceService = ApiServiceRegistry.get(this._registryId).getService<DataSourceService>(ServiceNames.DataSourceService);\n\n    return dataSourceService.getConnectionSummariesAsync(this._dataSourceInfo.id).then<Contract.ConnectionSummary[]>((summaries) => {\n      return summaries.map((summary) => new ConnectionSummary(summary));\n    });\n  }\n\n  public getActiveTablesAsync(): Promise<Array<Contract.TableSummary>> {\n    const dataSourceService = ApiServiceRegistry.get(this._registryId).getService<DataSourceService>(ServiceNames.DataSourceService);\n\n    return dataSourceService.getActiveTablesAsync(this._dataSourceInfo.id).then<Array<Contract.TableSummary>>((tableInfos) => {\n      return tableInfos.map((tableInfo) => new TableSummary(tableInfo));\n    });\n  }\n\n  public getUnderlyingDataAsync(options?: Contract.DataSourceUnderlyingDataOptions): Promise<Contract.DataTable> {\n    const getDataService = ApiServiceRegistry.get(this._registryId).getService<GetDataService>(ServiceNames.GetData);\n    options = options || {};\n\n    return getDataService.getDataSourceDataAsync(\n      this.id,\n      !!options.ignoreAliases,\n      options.maxRows || 0, // 0 and [] are defaults\n      options.columnsToInclude || [],\n      options.columnsToIncludeById || [],\n      options.includeDataValuesOption || IncludeDataValuesOption.AllValues,\n    );\n  }\n\n  public getLogicalTableDataAsync(logicalTableId: string, options?: Contract.DataSourceUnderlyingDataOptions): Promise<Contract.DataTable> {\n    const getDataService = ApiServiceRegistry.get(this._registryId).getService<GetDataService>(ServiceNames.GetData);\n    options = options || {};\n\n    return getDataService.getLogicalTableDataAsync(\n      this.id,\n      logicalTableId,\n      !!options.ignoreAliases,\n      options.maxRows || 0, // 0 and [] are defaults\n      options.columnsToInclude || [],\n      options.columnsToIncludeById || [],\n      options.includeDataValuesOption || IncludeDataValuesOption.AllValues,\n    );\n  }\n\n  public getLogicalTableDataReaderAsync(\n    logicalTableId: string,\n    pageRowCount?: number,\n    options?: Contract.DataSourceUnderlyingDataOptions,\n  ): Promise<Contract.DataTableReader> {\n    const getDataService = ApiServiceRegistry.get(this._registryId).getService<GetDataService>(ServiceNames.GetData);\n    options = options || {};\n\n    return getDataService.getLogicalTableDataReaderAsync(\n      this.id,\n      logicalTableId,\n      pageRowCount || this.getMaxPageRowLimit(),\n      !!options.ignoreAliases,\n      options.columnsToIncludeById || [],\n      options.includeDataValuesOption || IncludeDataValuesOption.AllValues,\n    );\n  }\n\n  public initializeWithPublicInterfaces(dataSource: Contract.DataSource): void {\n    ErrorHelpers.verifyInternalValue(dataSource, 'dataSource');\n\n    this._fields = this._dataSourceInfo.fields.map((fieldModel) => {\n      const fieldImpl = new FieldImpl(fieldModel, dataSource);\n      return new Field(fieldImpl);\n    });\n  }\n\n  public getLogicalTablesAsync(): Promise<Array<Contract.LogicalTable>> {\n    const dataSourceService = ApiServiceRegistry.get(this._registryId).getService<DataSourceService>(ServiceNames.DataSourceService);\n\n    return dataSourceService.getLogicalTablesAsync(this.id).then<Array<Contract.LogicalTable>>((logicalTableInfos) => {\n      return logicalTableInfos.map((logicalTableInfo) => new LogicalTable(logicalTableInfo));\n    });\n  }\n}\n"]}