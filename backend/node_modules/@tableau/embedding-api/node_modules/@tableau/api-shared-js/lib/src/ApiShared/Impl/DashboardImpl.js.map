{"version":3,"file":"DashboardImpl.js","sourceRoot":"","sources":["../../../../src/ApiShared/Impl/DashboardImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport {\n  DashboardLayoutChange,\n  DashboardLayoutChangeDetails,\n  ErrorCodes,\n  SharedErrorCodes,\n  SheetType,\n} from '@tableau/api-external-contract-js';\nimport { DashboardObjectType, DashboardZone, SheetPath, VisualId } from '@tableau/api-internal-contract-js';\nimport { InternalToExternalEnumMappings } from '../EnumMappings/InternalToExternalEnumMappings';\nimport { Point } from '../Point';\nimport { AnimationService } from '../Services/AnimationService';\nimport { FilterService } from '../Services/FilterService';\nimport { ApiServiceRegistry, ServiceNames } from '../Services/ServiceRegistry';\nimport { ZoneService } from '../Services/ZoneService';\nimport { TableauError } from '../TableauError';\nimport { ErrorHelpers } from '../Utils/ErrorHelpers';\nimport { DashboardObjectImpl } from './DashboardObjectImpl';\nimport { SheetImpl } from './SheetImpl';\nimport { SheetInfoImpl } from './SheetInfoImpl';\nimport { StoryPointImpl } from './StoryPointImpl';\nimport { WorksheetImpl } from './WorksheetImpl';\n\nexport class DashboardImpl extends SheetImpl {\n  private _worksheetsImpl: Array<WorksheetImpl>;\n  private _objects: Array<DashboardObjectImpl>;\n  private zoneMap: Map<number, DashboardObjectImpl>;\n\n  public constructor(\n    _sheetInfo: SheetInfoImpl,\n    private _zones: Array<DashboardZone>,\n    private _sheetPath: SheetPath,\n    _registryId: number,\n    private _parentStoryPointImpl: StoryPointImpl | null,\n    private _activeDashboardObjectId: number = 0,\n  ) {\n    super(_sheetInfo, _registryId);\n  }\n\n  public get worksheetsImpl(): Array<WorksheetImpl> {\n    return this._worksheetsImpl;\n  }\n\n  public get objects(): Array<DashboardObjectImpl> {\n    return this._objects;\n  }\n\n  public get parentStoryPoint(): StoryPointImpl | null {\n    return this._parentStoryPointImpl;\n  }\n\n  public get activeDashboardObjectId(): number {\n    return this._activeDashboardObjectId;\n  }\n\n  public get activeDashboardName(): string {\n    return this._sheetPath.sheetName;\n  }\n\n  public initializeWithPublicInterfaces(): void {\n    this._worksheetsImpl = new Array<WorksheetImpl>();\n    this._objects = new Array<DashboardObjectImpl>();\n    this.zoneMap = new Map<number, DashboardObjectImpl>();\n\n    // Process all the zones which are contained in this dashboard\n    for (const zone of this._zones) {\n      let worksheetImpl: WorksheetImpl | undefined = undefined;\n\n      const zoneSize: Contract.Size = { width: zone.width, height: zone.height };\n      // As the dashboard is active, all other zones in the dashboard are inactive.\n      const isActive = false;\n\n      if (zone.zoneType === DashboardObjectType.Worksheet || zone.zoneType === DashboardObjectType.QuickFilter) {\n        let worksheetName = '';\n        let worksheetUrl = '';\n        let isHidden = false;\n        if (zone.sheetInfo) {\n          // zone.sheetInfo was not initialized prior to internal-contract 1.6.0\n          worksheetName = zone.sheetInfo.name;\n\n          // worksheetUrl & isHidden is for Embedding only\n          worksheetUrl = zone.sheetInfo.url || '';\n          // If there's a url, then it's not hidden\n          isHidden = worksheetUrl === '';\n        } else {\n          worksheetName = zone.name;\n        }\n        // Indexes, isActive and some more properties in sheetInfoImpl are embedding specific.\n        // But we init them for both extensions and embedding as the Models will only use what is relevant.\n        const sheetInfoImpl = new SheetInfoImpl(\n          worksheetName,\n          SheetType.Worksheet,\n          zoneSize,\n          this._worksheetsImpl.length,\n          isActive,\n          isHidden,\n          worksheetUrl,\n        );\n\n        const vizId: VisualId = {\n          worksheet: worksheetName,\n          dashboard: this._sheetInfoImpl.name,\n          storyboard: this._sheetPath.storyboard,\n          flipboardZoneID: this._sheetPath.flipboardZoneID,\n          storyPointID: this._sheetPath.storyPointID,\n        };\n\n        worksheetImpl = new WorksheetImpl(sheetInfoImpl, this._registryId, vizId, this, this._parentStoryPointImpl);\n        if (zone.zoneType === DashboardObjectType.Worksheet) {\n          this._worksheetsImpl.push(worksheetImpl);\n        }\n      }\n\n      const zonePoint = new Point(zone.x, zone.y);\n\n      const dashboardObjectImpl = new DashboardObjectImpl(\n        this,\n        InternalToExternalEnumMappings.dashboardObjectType.convert(zone.zoneType),\n        zonePoint,\n        zoneSize,\n        worksheetImpl,\n        zone.name,\n        zone.isFloating !== undefined ? zone.isFloating : false, // before 1.6.0 we didn't have isFloating, so we assume false\n        zone.isVisible !== undefined ? zone.isVisible : true, // before 1.6.0 we didn't have isVisible, so we assume true\n        zone.zoneId,\n        zone.fieldId,\n      );\n\n      this._objects.push(dashboardObjectImpl);\n      this.zoneMap.set(zone.zoneId, dashboardObjectImpl);\n    }\n  }\n\n  public setDashboardObjectVisibilityAsync(dashboardObjectVisibilityMap: Contract.DashboardObjectVisibilityMap | object): Promise<void> {\n    const zoneService = ApiServiceRegistry.get(this._registryId).getService<ZoneService>(ServiceNames.Zone);\n\n    return zoneService.setVisibilityAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectVisibilityMap);\n  }\n\n  public getDashboardObjectById(dashboardObjectId: number): DashboardObjectImpl | undefined {\n    return this.zoneMap.get(dashboardObjectId);\n  }\n\n  public updateZones(newZones: Array<DashboardZone>, newActiveZoneId = 0, newActiveDashboardName = ''): DashboardLayoutChangeDetails {\n    // getting previous dashboard objects, active zone ID and active dashboard name\n    const oldDashboardObjects = this._objects;\n    const oldZoneMap = this.zoneMap;\n    const oldActiveZoneId = this._activeDashboardObjectId;\n    const oldActiveDashboardName = this._sheetPath.sheetName;\n    // updating zones and reinitializing instance variables\n    this._zones = newZones;\n    this._activeDashboardObjectId = newActiveZoneId;\n    if (newActiveDashboardName) {\n      this._sheetPath.sheetName = newActiveDashboardName;\n      this._sheetInfoImpl.name = newActiveDashboardName;\n    }\n    this.initializeWithPublicInterfaces();\n    // getting new dashboard objects\n    const newDashboardObjects = this._objects;\n    const newZoneMap = this.zoneMap;\n    // initializing map for changes\n    const zoneChanges: DashboardLayoutChangeDetails = new Map();\n\n    // comparing old dashboard objects with new ones\n    oldDashboardObjects.forEach((oldObject) => {\n      const oldId: number = oldObject.id;\n\n      // checking if zone was removed\n      if (!newZoneMap.has(oldId)) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.Removed);\n        return;\n      }\n\n      const newObject = newZoneMap.get(oldId);\n      if (oldObject.isFloating !== newObject!.isFloating) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.IsFloatingChanged);\n      }\n\n      if (oldObject.isVisible !== newObject!.isVisible) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.IsVisibleChanged);\n      }\n\n      if (oldObject.name !== newObject!.name) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.NameChanged);\n      }\n\n      if (oldObject.position.x !== newObject!.position.x || oldObject.position.y !== newObject!.position.y) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.PositionChanged);\n      }\n\n      if (oldObject.size.width !== newObject!.size.width || oldObject.size.height !== newObject!.size.height) {\n        this.addChange(oldId, zoneChanges, DashboardLayoutChange.SizeChanged);\n      }\n    });\n\n    // Checking for any added zones\n    newDashboardObjects.forEach((newObject) => {\n      if (!oldZoneMap.has(newObject.id)) {\n        this.addChange(newObject.id, zoneChanges, DashboardLayoutChange.Added);\n      }\n    });\n\n    // Checking if zone selection has changed\n    if (oldActiveZoneId !== newActiveZoneId) {\n      if (newActiveZoneId !== 0) {\n        this.addChange(newActiveZoneId, zoneChanges, DashboardLayoutChange.Selected);\n      }\n      if (oldActiveZoneId !== 0) {\n        this.addChange(oldActiveZoneId, zoneChanges, DashboardLayoutChange.Deselected);\n      }\n    }\n\n    // Checking if switched to another dashboard\n    if (newActiveDashboardName && oldActiveDashboardName !== newActiveDashboardName) {\n      this.addChange(0, zoneChanges, DashboardLayoutChange.DashboardChanged);\n    }\n\n    return zoneChanges;\n  }\n\n  private addChange(zoneId: number, zoneChanges: DashboardLayoutChangeDetails, change: DashboardLayoutChange): void {\n    if (!zoneChanges.has(zoneId)) {\n      zoneChanges.set(zoneId, []);\n    }\n\n    zoneChanges.get(zoneId)!.push(change);\n  }\n\n  public moveAndResizeDashboardObjectsAsync(\n    dashboardObjectPositionAndSizeUpdateArray: Contract.DashboardObjectPositionAndSizeUpdateArray,\n  ): Promise<void> {\n    const zoneService = ApiServiceRegistry.get(this._registryId).getService<ZoneService>(ServiceNames.Zone);\n\n    return zoneService.moveAndResizeAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectPositionAndSizeUpdateArray);\n  }\n\n  public replayAnimationAsync(replaySpeed: Contract.ReplaySpeedType): Promise<void> {\n    const animationService = ApiServiceRegistry.get(this._registryId).getService<AnimationService>(ServiceNames.Animation);\n\n    return animationService.replayAsync(replaySpeed);\n  }\n\n  public getFiltersAsync(): Promise<Array<Contract.Filter>> {\n    this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();\n\n    const service = ApiServiceRegistry.get(this._registryId).getService<FilterService>(ServiceNames.Filter);\n    return service.getDashboardFiltersAsync();\n  }\n\n  public applyFilterAsync(\n    fieldName: string,\n    values: Array<string>,\n    updateType: Contract.FilterUpdateType,\n    options: Contract.FilterOptions,\n  ): Promise<string> {\n    ErrorHelpers.verifyEnumValue<Contract.FilterUpdateType>(updateType, Contract.FilterUpdateType, 'FilterUpdateType');\n    ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');\n    if (!Array.isArray(values)) {\n      throw new TableauError(ErrorCodes.InvalidParameter, 'values parameter for applyDashboardFilterAsync must be an array');\n    }\n    this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();\n\n    const service = ApiServiceRegistry.get(this._registryId).getService<FilterService>(ServiceNames.Filter);\n    return service.applyDashboardFilterAsync(fieldName, values, updateType, options);\n  }\n\n  // @W-12986439: remove once initializeWithPublicInterfaces is moved to the constructor for this class\n  // This method only exists since worksheetsImpl can be undefined, but we need the worksheet names in the Export APIs\n  public getWorksheetNamesFromZones(): Array<string> {\n    const worksheetNames: string[] = [];\n    for (const zone of this._zones) {\n      if (zone.zoneType !== DashboardObjectType.Worksheet) {\n        continue;\n      }\n      // zone.sheetInfo was not initialized prior to internal-contract 1.6.0\n      const worksheetName = zone.sheetInfo ? zone.sheetInfo.name : zone.name;\n      worksheetNames.push(worksheetName);\n    }\n\n    return worksheetNames;\n  }\n\n  private verifyActiveSheetOrEmbeddedInActiveStoryPoint() {\n    const isRootAndActiveDashboard = this.active;\n    const isWithinActiveStoryPoint = this.parentStoryPoint != null && this.parentStoryPoint.active;\n    if (!isRootAndActiveDashboard && !isWithinActiveStoryPoint) {\n      throw new TableauError(SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');\n    }\n  }\n}\n"]}