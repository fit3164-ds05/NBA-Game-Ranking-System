{"version":3,"file":"CrossFrameBootstrap.js","sourceRoot":"","sources":["../../../../src/ApiShared/CrossFrame/CrossFrameBootstrap.ts"],"names":[],"mappings":";;AACA,8EAK2C;AAC3C,+DAA8D;AAE9D,qGAAqG;AACrG,SAAS,QAAQ,CAAC,UAAkB;IAClC,IAAI;QACF,OAAO,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,CAAC;KAC9C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,qBAAqB,CACnC,UAAkB,EAClB,uBAA+C,EAC/C,OAA8B;IAE9B,OAAO,IAAI,OAAO,CAAwC,UAAC,OAAO,EAAE,MAAM;QACxE,IAAI,MAAc,CAAC;QAEnB,uEAAuE;QACvE,iFAAiF;QACjF,0FAA0F;QAC1F,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACzB,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;SAC5B;aAAM;YACL,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;SAC5B;QAED,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,CAAC,kGAAkG,CAAC,CAAC;SAC5G;QAED,yFAAyF;QACzF,8FAA8F;QAC9F,uFAAuF;QACvF,IAAM,SAAS,GAAG,IAAI,8CAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAEnE,gEAAgE;QAChE,IAAM,qBAAqB,GAAG,SAAS,CAAC,4BAA4B,CAAC,uBAAuB,EAAE,4CAAmB,EAAE,OAAO,CAAC,CAAC;QAE5H,0GAA0G;QAC1G,gEAAgE;QAChE,SAAS,CAAC,gCAAgC,CAAC,UAAU,GAA2B;YAC9E,+DAA+D;YAC/D,IAAI,GAAG,CAAC,WAAW,KAAK,qBAAqB,CAAC,WAAW,EAAE;gBACzD,+EAA+E;gBAC/E,0EAA0E;gBAC1E,IAAM,iBAAiB,GAAG,cAAM,OAAA,IAAI,2CAAoB,CAAC,SAAS,CAAC,EAAnC,CAAmC,CAAC;gBACpE,OAAO,CAAC,iBAAiB,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;QAEH,uFAAuF;QACvF,SAAS,CAAC,cAAc,EAAE,CAAC;QAC3B,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AA7CD,sDA6CC","sourcesContent":["import * as Contract from '@tableau/api-internal-contract-js';\nimport {\n  CommandResponseMessage,\n  CrossFrameMessenger,\n  InitializationOptions,\n  MESSAGING_VERSION as ApiMessagingVersion,\n} from '@tableau/api-internal-contract-js';\nimport { CrossFrameDispatcher } from './CrossFrameDispatcher';\n\n// Checks to see if we are running in an iframe currently: https://stackoverflow.com/a/326076/8821153\nfunction inIframe(thisWindow: Window): boolean {\n  try {\n    return thisWindow.self !== thisWindow.parent;\n  } catch (e) {\n    return true;\n  }\n}\n\n/**\n * Attempts to bootstrap the extension with a cross-frame parent where Tableau is running\n *\n * @param thisWindow The window which we are running in (injected for unit testing purposes)\n * @param internalContractVersion The version number of the internal contract we are using\n * @returns A promise which is doing the actual bootstrapping\n */\nexport function doCrossFrameBootstrap(\n  thisWindow: Window,\n  internalContractVersion: Contract.VersionNumber,\n  options: InitializationOptions,\n): Promise<Contract.InternalApiDispatcherFactory> {\n  return new Promise<Contract.InternalApiDispatcherFactory>((resolve, reject) => {\n    let parent: Window;\n\n    // Normally, we are running inside an iframe.  The exception to this is\n    // when we are running as an extension inside a dialog as part of the UINamespace\n    // functionality.  In that case, we want the opener of this window rather than the parent.\n    if (!inIframe(thisWindow)) {\n      parent = thisWindow.opener;\n    } else {\n      parent = thisWindow.parent;\n    }\n\n    if (!parent) {\n      reject('This extension is not running inside an iframe, desktop, or popup window. Initialization failed.');\n    }\n\n    // Create the messenger which will do he communication between this window and our parent\n    // Since we don't know where we are running yet, we have to make this initial origin '*'. Once\n    // we have successfully initialized our extension, we will limit where we send messages\n    const messenger = new CrossFrameMessenger(thisWindow, parent, '*');\n\n    // Prepare to send an initialization message to the parent frame\n    const initializationMessage = messenger.prepareInitializationMessage(internalContractVersion, ApiMessagingVersion, options);\n\n    // When we receive a response back from the parent, we check to make sure the guids match and then we know\n    // that the parent is aware of us and we can start communicating\n    messenger.setCommandResponseMessageHandler(function (msg: CommandResponseMessage): void {\n      // Verify we are getting a response from our initialize message\n      if (msg.commandGuid === initializationMessage.messageGuid) {\n        // The versioning of the dispatcher happens on the other side of our frame, and\n        // in a wrapper on this side. This one doesn't have any version knowledge.\n        const dispatcherFactory = () => new CrossFrameDispatcher(messenger);\n        resolve(dispatcherFactory);\n      }\n    });\n\n    // Now that our handlers are ready, start listening and send our initialization message\n    messenger.startListening();\n    initializationMessage.send();\n  });\n}\n"]}