import * as Contract from '@tableau/api-external-contract-js';
import { FilterDomainType } from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { ApiService } from './ServiceRegistry';
/**
 * Service for implementing the logic for filter related APIs
 *
 * @interface FilterService
 * @extends {ApiService}
 */
export interface FilterService extends ApiService {
    /**
     * Applies a categorical filter
     *
     * @param {VisualId} visualid  The visual to apply filter
     * @param {string} fieldName  The field to apply the filter on
     * @param {Array<string>} values  the list of values to filter on
     * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)
     * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)
     *
     * @return the field that filter was applied on
     */
    applyFilterAsync(visualid: VisualId, fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    /**
     * Applies a range filter
     *
     * @param {VisualId} visualId the visual to apply filter
     * @param {string} fieldName the field to apply the filter
     * @param {RangeFilterOptions} filterOptions the range filter options (min, max, nullOptions)
     *
     * @return the field that the filter was applied on
     */
    applyRangeFilterAsync(visualId: VisualId, fieldName: string, filterOptions: Contract.RangeFilterOptions): Promise<string>;
    /**
     * Applies a hierarchical filter
     *
     * @param {VisualId} visualid  The visual to apply filter
     * @param {string} fieldName  The field to apply the filter on
     * @param {Array<string>| Contract.HierarchicalLevels} values  the list of values or levels to filter on
     * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)
     * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)
     *
     * @return the field that filter was applied on
     */
    applyHierarchicalFilterAsync(visualid: VisualId, fieldName: string, values: Array<string> | Contract.HierarchicalLevels, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    /**
     * Clears the filter for the provided field
     *
     * @param {VisualId} visualid  The visual to clear filter
     * @param {string} fieldName  The field to clear filter on
     *
     * @return the field that filter was cleared on
     */
    clearFilterAsync(visualId: VisualId, fieldName: string): Promise<string>;
    /**
     * Applies a range filter
     *
     * @param {VisualId} visualId the visual to apply filter
     * @param {string} fieldName the field to apply the filter
     * @param {RelativeDateFilterOptions} options the relative date filter options (anchorDate, periodType, rangeType, rangeN)
     *
     * @return the field that the filter was applied on
     */
    applyRelativeDateFilterAsync(visualId: VisualId, fieldName: string, options: Contract.RelativeDateFilterOptions): Promise<string>;
    /**
     * Gets a list of filters for the provided worksheet
     *
     * @param {VisualId} visualId the worksheet to get filters from
     */
    getFiltersAsync(visualId: VisualId): Promise<Array<Contract.Filter>>;
    /**
     * Gets the domain of a categorical filter
     *
     * @param {string} worksheetName the name of the worksheet
     * @param {fieldId} fieldId the id of the field of the filter
     */
    getCategoricalDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.CategoricalDomain>;
    /**
     * Gets the domain of a range filter
     *
     * @param {string} worksheetName the name of the worksheet
     * @param {string} fieldId the id of the field of the filter
     * @param {FilterDomainType} domainType the type of domain (relevant vs. database)
     */
    getRangeDomainAsync(worksheetName: string, fieldId: string, domainType: FilterDomainType): Promise<Contract.RangeDomain>;
    /**
     * Gets a list of filters for the provided dashboard
     */
    getDashboardFiltersAsync(): Promise<Array<Contract.Filter>>;
    /**
     * Applies a categorical filter on all the worksheets in a dashboard
     *
     * @param {string} fieldName  The field to apply the filter on
     * @param {Array<string>} values  the list of values to filter on
     * @param {Contract.FilterUpdateType} updateType  the filter update type (add, remove, replace, ...)
     * @param {filterOptions} filterOptions advanced options for filtering (isExcludeMode)
     *
     * @return the field that filter was applied on
     */
    applyDashboardFilterAsync(fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, filterOptions: Contract.FilterOptions): Promise<string>;
    /**
     * @param {string} worksheetName the name of the worksheet
     * @param {string} fieldId the id of the field of the filter
     *
     * @return {Array<string>} the list of worksheets that have the filter applied
     */
    getAppliedWorksheetsAsync(worksheetName: string, fieldId: string): Promise<Array<string>>;
    /**
     * @param {string} worksheetName the name of the worksheet
     * @param {string} fieldName the field name of the filter
     * @param {string} fieldId the id of the field of the filter
     * @param {Array<string>} applyToWorksheets list of worksheets to apply the filter on
     *
     * @return {Array<string>} the list of worksheets that have the filter applied
     */
    setAppliedWorksheetsAsync(worksheetName: string, fieldName: string, fieldId: string, applyToWorksheets: Array<string>): Promise<Array<string>>;
}
//# sourceMappingURL=FilterService.d.ts.map