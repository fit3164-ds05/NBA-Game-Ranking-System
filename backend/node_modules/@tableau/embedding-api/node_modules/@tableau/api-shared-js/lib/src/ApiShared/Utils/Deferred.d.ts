/**
 * A Promise wrapper class allowing for resolving/rejecting the Promise outside the context of its constructor.
 *
 * @export
 * @class Deferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 * @link https://stackoverflow.com/a/34637436
 */
export declare class Deferred<TResolve, TReject = any> {
    private _promise;
    private _resolve;
    private _reject;
    /**
     * Creates an instance of Deferred.
     */
    constructor();
    /**
     * Gets the Promise.
     *
     * @readonly
     * @type {Promise<TResolve>}
     */
    get promise(): Promise<TResolve>;
    /**
     * Resolves the wrapped Promise.
     *
     * @param {(TResolve | PromiseLike<TResolve>)} response The argument to be resolved by the Promise.
     * @returns {*}  {void}
     */
    resolve(response: TResolve | PromiseLike<TResolve>): void;
    /**
     *
     *
     * @param {TReject} [reason] The reason why the Promise rejected.
     * @returns {*}  {void}
     */
    reject(reason?: TReject): void;
}
export declare const UnregisterTimeoutInMilliseconds = 30000;
//# sourceMappingURL=Deferred.d.ts.map