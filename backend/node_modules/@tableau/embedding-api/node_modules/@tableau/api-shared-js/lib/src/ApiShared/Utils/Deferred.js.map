{"version":3,"file":"Deferred.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/Deferred.ts"],"names":[],"mappings":";;AAAA;;;;;;;;GAQG;AACH;IAKE;;OAEG;IACH;QAAA,iBAKC;QAJC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAW,UAAC,OAAO,EAAE,MAAM;YACpD,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAQD,sBAAI,6BAAO;QANX;;;;;WAKG;aACH;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IAED;;;;;OAKG;IACH,0BAAO,GAAP,UAAQ,QAA0C;QAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACH,yBAAM,GAAN,UAAO,MAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IACH,eAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,4BAAQ;AAsDR,QAAA,+BAA+B,GAAG,KAAK,CAAC","sourcesContent":["/**\n * A Promise wrapper class allowing for resolving/rejecting the Promise outside the context of its constructor.\n *\n * @export\n * @class Deferred\n * @template TResolve The type used to resolve the promise.\n * @template TReject The type used to reject the promise. Defaults to any.\n * @link https://stackoverflow.com/a/34637436\n */\nexport class Deferred<TResolve, TReject = any> {\n  private _promise: Promise<TResolve>;\n  private _resolve: (response: TResolve | PromiseLike<TResolve>) => void;\n  private _reject: (reason?: TReject) => void;\n\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    this._promise = new Promise<TResolve>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Gets the Promise.\n   *\n   * @readonly\n   * @type {Promise<TResolve>}\n   */\n  get promise(): Promise<TResolve> {\n    return this._promise;\n  }\n\n  /**\n   * Resolves the wrapped Promise.\n   *\n   * @param {(TResolve | PromiseLike<TResolve>)} response The argument to be resolved by the Promise.\n   * @returns {*}  {void}\n   */\n  resolve(response: TResolve | PromiseLike<TResolve>): void {\n    if (!this._resolve) {\n      return;\n    }\n\n    this._resolve(response);\n  }\n\n  /**\n   *\n   *\n   * @param {TReject} [reason] The reason why the Promise rejected.\n   * @returns {*}  {void}\n   */\n  reject(reason?: TReject): void {\n    if (!this._reject) {\n      return;\n    }\n\n    this._reject(reason);\n  }\n}\n\nexport const UnregisterTimeoutInMilliseconds = 30000;\n"]}