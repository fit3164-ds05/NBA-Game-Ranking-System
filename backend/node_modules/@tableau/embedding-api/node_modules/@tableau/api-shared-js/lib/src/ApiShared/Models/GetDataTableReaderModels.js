"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ServiceRegistry_1 = require("../Services/ServiceRegistry");
var ErrorHelpers_1 = require("../Utils/ErrorHelpers");
var DataTableReader = /** @class */ (function () {
    function DataTableReader(_id, _totalRowCount, _pageRowCount, _registryId) {
        this._id = _id;
        this._totalRowCount = _totalRowCount;
        this._pageRowCount = _pageRowCount;
        this._registryId = _registryId;
        this._pageCount = Math.ceil(_totalRowCount / _pageRowCount);
    }
    Object.defineProperty(DataTableReader.prototype, "totalRowCount", {
        get: function () {
            return this._totalRowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableReader.prototype, "pageCount", {
        get: function () {
            return this._pageCount;
        },
        enumerable: true,
        configurable: true
    });
    DataTableReader.prototype.getPageAsync = function (pageNumber) {
        ErrorHelpers_1.ErrorHelpers.verifyRange(pageNumber, 0, this._pageCount);
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getPageAsync(this._id, pageNumber, this._pageRowCount);
    };
    DataTableReader.prototype.getAllPagesAsync = function (maxRows) {
        return __awaiter(this, void 0, void 0, function () {
            var firstPage, rowsRequested, pagesRequested, pagesToFetch, isDataLimited, remainingData, i, page, fullData;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPageAsync(0)];
                    case 1:
                        firstPage = _b.sent();
                        maxRows = maxRows || this.totalRowCount;
                        rowsRequested = Math.min(maxRows, this.totalRowCount);
                        pagesRequested = Math.ceil(rowsRequested / this._pageRowCount);
                        pagesToFetch = Math.min(pagesRequested, 400);
                        isDataLimited = pagesToFetch < pagesRequested;
                        remainingData = [];
                        i = 1;
                        _b.label = 2;
                    case 2:
                        if (!(i < pagesToFetch)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getPageAsync(i)];
                    case 3:
                        page = _b.sent();
                        remainingData.push(page.data);
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        fullData = (_a = firstPage.data).concat.apply(_a, remainingData);
                        // This slices the array only if maxRows has been set and is less than totalRowCount
                        fullData.length = rowsRequested;
                        return [2 /*return*/, {
                                name: firstPage.name,
                                data: fullData,
                                columns: firstPage.columns,
                                totalRowCount: isDataLimited ? pagesToFetch * this._pageRowCount : rowsRequested,
                                isTotalRowCountLimited: isDataLimited,
                                isSummaryData: firstPage.isSummaryData,
                            }];
                }
            });
        });
    };
    DataTableReader.prototype.releaseAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.releaseAsync(this._id);
    };
    return DataTableReader;
}());
exports.DataTableReader = DataTableReader;
//# sourceMappingURL=GetDataTableReaderModels.js.map