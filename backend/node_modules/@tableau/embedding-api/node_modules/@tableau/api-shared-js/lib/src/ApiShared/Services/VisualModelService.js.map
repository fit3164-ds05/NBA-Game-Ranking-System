{"version":3,"file":"VisualModelService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/VisualModelService.ts"],"names":[],"mappings":"","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { VisualId } from '@tableau/api-internal-contract-js';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * Service for implementing the logic for visual model related calls\n *\n * @interface VisualModelService\n * @extends {ApiService}\n */\nexport interface VisualModelService extends ApiService {\n  /**\n   * Gets the visual specification for the current worksheet\n   *\n   * @param {VisualId} visualId  The visual id\n   * @returns {Promise<Contract.VisualSpecification>}  Visual specification for the current worksheet\n   */\n  getVisualSpecificationAsync(visualId: VisualId): Promise<Contract.VisualSpecification>;\n\n  /**\n   * Add fields to the current worksheet\n   *\n   * @param {VisualId} visualId  The visual id\n   * @param {MarksCardIndex} marksCardIndex Marks card index\n   * @param {EncodingType} EncodingType Encoding type\n   * @param {Columns} columns Columns to add\n   * @param {StartIndex} startIndex Where to insert\n   * @return  This function does not return anything.\n   */\n  addMarksCardFieldsAsync(\n    visualId: VisualId,\n    marksCardIndex: number,\n    encodingType: Contract.EncodingType,\n    columns: Array<Contract.Column>,\n    startIndex: number,\n  ): Promise<void>;\n\n  /**\n   * Move field on the current worksheet\n   *\n   * @param {VisualId} visualId  The visual id\n   * @param {FromIndex} fromIndex Move from here\n   * @param {ToIndex} toIndex Move to here\n   * @return  This function does not return anything.\n   */\n  moveMarksCardFieldAsync(\n    visualId: VisualId,\n    marksCardIndex: number,\n    fromIndex: number,\n    toIndex: number,\n    fieldCount: number,\n  ): Promise<void>;\n\n  /**\n   * Delete and add fields to the current worksheet\n   *\n   * @param {VisualId} visualId  The visual id\n   * @param {MarksCardIndex} marksCardIndex Marks card index\n   * @param {EncodingType} EncodingType Encoding type\n   * @param {StartIndex} startIndex Where to insert\n   * @param {DeleteCount} deleteCount How many to delete\n   * @param {Columns} columns Columns to add\n   * @return  This function does not return anything.\n   */\n  spliceMarksCardFieldsAsync(\n    visualId: VisualId,\n    marksCardIndex: number,\n    encodingType: Contract.EncodingType,\n    startIndex: number,\n    deleteCount: number,\n    columns: Array<Contract.Column>,\n  ): Promise<void>;\n\n  /**\n   * Opens a dialog to edit aliases for values of a particular field\n   *\n   * @param fieldName Name of the field that's getting aliases for its values\n   */\n  editAliasesDialogAsync(fieldName: string): Promise<void>;\n}\n"]}