{"version":3,"file":"VizService.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/VizService.ts"],"names":[],"mappings":"","sourcesContent":["import { CustomViewImpl } from '../Impl/CustomViewImpl';\nimport { ApiService } from './ServiceRegistry';\n\n/**\n * API Service for interacting with Viz images\n */\nexport interface VizService extends ApiService {\n  /**\n   * @param inputSpec the input json containing the embedded data and visual spec details\n   *\n   * @since 1.6.0\n   */\n  createVizImageAsync(inputSpec: object): Promise<string>;\n\n  /**\n   * @param name The name of the sheet to activae\n   *\n   * @since 3.2.0\n   *\n   * For embedding only\n   */\n  activateSheetAsync(name: string): Promise<void>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Gets the collection of CustomView objects associated with the workbook.\n   *\n   * For embedding only\n   */\n  getCustomViewsAsync(): Promise<Array<CustomViewImpl>>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Changes the visualization to show the named saved state.\n   * ```workbook.showCustomViewAsync(\"Awesome\" ).then(function() { // do something });```\n   * To reset a custom view to the original view, do not provide the customViewName parameter.\n   * ```workbook.showCustomViewAsync().then(function() { // do something });```\n   *\n   * For embedding only\n   */\n  showCustomViewAsync(customViewName?: string | null): Promise<CustomViewImpl | undefined>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Removes the named custom view.\n   *\n   * For embedding only\n   */\n  removeCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Saves the current state of the workbook by assigning a custom view name.\n   *\n   * For embedding only\n   */\n  saveCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Sets the active custom view as the default.\n   *\n   * For embedding only\n   */\n  setActiveCustomViewAsDefaultAsync(): Promise<void>;\n\n  /**\n   *\n   * @since 3.3.0\n   * Updates an existing custom view.\n   *\n   * For embedding only\n   */\n  saveAsync(customView: CustomViewImpl): Promise<CustomViewImpl>;\n\n  /**\n   * @since 3.3.0\n   * Gets the visualization's current URL.\n   */\n  getCurrentSrcAsync(): Promise<string>;\n}\n"]}