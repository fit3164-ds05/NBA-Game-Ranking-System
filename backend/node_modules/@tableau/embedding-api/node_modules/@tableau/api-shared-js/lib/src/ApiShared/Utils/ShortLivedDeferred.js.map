{"version":3,"file":"ShortLivedDeferred.js","sourceRoot":"","sources":["../../../../src/ApiShared/Utils/ShortLivedDeferred.ts"],"names":[],"mappings":";;AAAA,4DAA8D;AAC9D,gDAA+C;AAC/C,uCAAuE;AAEvE;;;;;;;;;;;;;GAaG;AACH;IAGE,4BAAoB,sBAAwD;QAAxD,uCAAA,EAAA,yBAAyB,0CAA+B;QAAxD,2BAAsB,GAAtB,sBAAsB,CAAkC;IAAG,CAAC;IAEzE,uDAA0B,GAAjC;QAAA,iBAeC;QAdC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,IAAI,2BAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,6DAA6D,CAAC,CAAC;SACpI;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAQ,EAAE,CAAC;QAEhC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC3B,IAAM,KAAK,GAAG,IAAI,2BAAY,CAC5B,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EACjC,+BAA6B,KAAI,CAAC,sBAAsB,GAAG,IAAI,aAAU,CAC1E,CAAC;YACF,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,CAAC;IAEM,oCAAO,GAAd,UAAe,QAA0C;QACvD,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;IACH,CAAC;IAEM,mCAAM,GAAb,UAAc,KAAU;QACtB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,gDAAkB","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { TableauError } from '../TableauError';\nimport { Deferred, UnregisterTimeoutInMilliseconds } from './Deferred';\n\n/**\n * A Deferred wrapper class adding functionality to reject unresponsive promises after timeout\n *\n * this class handles two things:\n\n *    1. Adds timeout logic for deferred\n *    2. It blocks multiple calls from executing at the same time.\n *\n * @export\n * @class ShortLivedDeferred\n * @template TResolve The type used to resolve the promise.\n * @template TReject The type used to reject the promise. Defaults to any.\n *\n */\nexport class ShortLivedDeferred<TResolve, TReject = any> {\n  private _deferred: Deferred<TResolve, TReject> | undefined;\n  private _timeoutId;\n  constructor(private _timeoutInMilliseconds = UnregisterTimeoutInMilliseconds) {}\n\n  public getNewPromiseOrThrowIfBusy(): Promise<TResolve> {\n    if (this._deferred) {\n      throw new TableauError(Contract.SharedErrorCodes.ApiExecutionError, 'This api cannot be executed till previous call is resolved.');\n    }\n    this._deferred = new Deferred();\n\n    this._timeoutId = setTimeout(() => {\n      const error = new TableauError(\n        Contract.SharedErrorCodes.Timeout,\n        `Api failed to complete in ${this._timeoutInMilliseconds / 1000} seconds`,\n      );\n      this.reject(error);\n    }, this._timeoutInMilliseconds);\n\n    return this._deferred.promise;\n  }\n\n  public resolve(response: TResolve | PromiseLike<TResolve>): void {\n    if (this._deferred) {\n      clearTimeout(this._timeoutId);\n      this._deferred.resolve(response);\n      this._deferred = undefined;\n    }\n  }\n\n  public reject(error: any): void {\n    if (this._deferred) {\n      clearTimeout(this._timeoutId);\n      this._deferred.reject(error);\n      this._deferred = undefined;\n    }\n  }\n}\n"]}