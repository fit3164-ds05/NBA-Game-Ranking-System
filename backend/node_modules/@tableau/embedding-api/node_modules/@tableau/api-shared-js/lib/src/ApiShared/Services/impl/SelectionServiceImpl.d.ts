import * as Contract from '@tableau/api-external-contract-js';
import { VisualId } from '@tableau/api-internal-contract-js';
import { SelectionService } from '../SelectionService';
import { ServiceImplBase } from './ServiceImplBase';
export declare class SelectionServiceImpl extends ServiceImplBase implements SelectionService {
    get serviceName(): string;
    /**
     * Method to clear all the selected marks for the given worksheet.
     *
     * @param visualId
     */
    clearSelectedMarksAsync(visualId: VisualId): Promise<void>;
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param selectionCriteria
     * @param selectionUpdateType
     */
    selectMarksByValueAsync(visualId: VisualId, selectionCriterias: Array<Contract.SelectionCriteria>, selectionUpdateType: Contract.SelectionUpdateType): Promise<void>;
    /**
     * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.
     * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.
     *
     * @param visualId
     * @param hoveredTuple
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    hoverTupleAsync(visualId: VisualId, hoveredTuple?: number, tooltip?: Contract.TooltipContext | null, allowHoverActions?: boolean): Promise<void>;
    /**
     * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.
     * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.
     *
     * @param visualId
     * @param selectedTuples
     * @param selectOption
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    selectTuplesAsync(visualId: VisualId, selectedTuples: Array<number>, selectOption: Contract.SelectOptions, tooltip?: Contract.TooltipContext): Promise<void>;
    private apiFilterHandlerCheckForCommandError;
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param MarkInfo
     * @param selectionUpdateType
     */
    selectMarksByIdAsync(visualId: VisualId, marks: Array<Contract.MarkInfo>, selectionUpdateType: Contract.SelectionUpdateType): Promise<void>;
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    private parseSelectionIds;
    /**
     * Method to prepare the pres models for selection by values.
     *
     * Supports 3 types for selection:
     * 1) Hierarchical value based selection
     * 2) Range value based selection
     * 3) Dimension value based selection
     *
     * @param marks
     */
    private parseSelectionMarks;
    /**
     * Method to transform the key value pair into value based pres model object.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    private addToParamsList;
    /**
     * Method to transform the key value pair into range based selection pres model.
     *
     * TODO: Need to handle the parsing of date type values.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    private addToRangeParamsList;
    /**
     * Method to validate the selection update type.
     *
     * @param selectionUpdateType
     */
    private validateSelectionUpdateType;
    /**
     * Method to validate the include type for range selection.
     *
     * @param nullOption
     */
    private validateNullOptionType;
    private ensureTupleIDIsNonNegative;
}
//# sourceMappingURL=SelectionServiceImpl.d.ts.map