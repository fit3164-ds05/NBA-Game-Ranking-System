{"version":3,"file":"ServiceRegistry.js","sourceRoot":"","sources":["../../../../src/ApiShared/Services/ServiceRegistry.ts"],"names":[],"mappings":";;AAAA,8EAA+D;AAC/D,gDAA+C;AA8C/C,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IACjC,MAAM,CAAC,2BAA2B,GAAG,MAAM,CAAC,2BAA2B,IAAI,EAAE,CAAC;CAC/E;AAsBD;IAGE;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,6CAAe,GAAtB,UAAuB,OAAmB;QACxC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;IAChD,CAAC;IAEM,wCAAU,GAAjB,UAAwC,WAAmB;QACzD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YAC/C,MAAM,IAAI,2BAAY,CAAC,qCAAU,CAAC,aAAa,EAAE,6BAA2B,WAAa,CAAC,CAAC;SAC5F;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAM,CAAC;IAC1C,CAAC;IACH,0BAAC;AAAD,CAAC,AAlBD,IAkBC;AAED;;;;;;;;;;GAUG;AACH;IAmCE,4CAA4C;IAC5C;IAAuB,CAAC;IAnCxB;;OAEG;IACW,sBAAG,GAAjB,UAAkB,UAAkB;QAClC,IAAI,CAAC,MAAM,CAAC,2BAA2B,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE;YAC1F,kBAAkB,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,mBAAmB,EAAE,CAAC,CAAC;SACvE;QAED,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE;YACnD,MAAM,IAAI,2BAAY,CAAC,qCAAU,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;SAC7E;QAED,OAAO,MAAM,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACW,8BAAW,GAAzB,UAA0B,UAAkB,EAAE,eAAgC;QAC5E,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE;YACvC,MAAM,CAAC,2BAA2B,GAAG,EAAE,CAAC;SACzC;QACD,MAAM,CAAC,2BAA2B,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC;IACnE,CAAC;IAED;;OAEG;IACW,gCAAa,GAA3B;QACE,MAAM,CAAC,2BAA2B,GAAG,EAAE,CAAC;IAC1C,CAAC;IAIH,yBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,gDAAkB","sourcesContent":["import { ErrorCodes } from '@tableau/api-external-contract-js';\nimport { TableauError } from '../TableauError';\n\n/**\n * Base interface for an api service\n */\nexport interface ApiService {\n  /**\n   * Gets the name for this service.\n   */\n  readonly serviceName: string;\n}\n\n/**\n * Collection of service name which will be registered in the api-shared project\n */\nexport const enum ServiceNames {\n  Accessibility = 'accessibility',\n  Authentication = 'authentication',\n  ClientInfo = 'client-info-service',\n  DataSourceService = 'data-source-service',\n  GetData = 'get-data-service',\n  Filter = 'filter-service',\n  Notification = 'notification-service',\n  Parameters = 'parameters-service',\n  Selection = 'selection-service',\n  Annotation = 'annotation-service',\n  Zone = 'zone-service',\n  Animation = 'animation-service',\n  Viz = 'viz-service',\n  ExternalContextMenu = 'external-context-menu-service',\n  Initialization = 'initialization-service',\n  StoryActivation = 'story-activation-service',\n  Size = 'size-service',\n  Export = 'export-service',\n  VisualModel = 'visual-model-service',\n}\n\n/**\n * Do some global declarations so we can create a singleton on the window object\n */\ndeclare global {\n  interface Window {\n    __tableauApiServiceRegistry: { [registryId: number]: ServiceRegistry };\n  }\n}\n\nif (typeof window !== 'undefined') {\n  window.__tableauApiServiceRegistry = window.__tableauApiServiceRegistry || {};\n}\n\nexport interface ServiceRegistry {\n  /**\n   * Registers a new service into the service registry. Any existing one will\n   * be overwritten. the service is registered under service.serviceName\n   *\n   * @param {ApiService} service The servive to register\n   */\n  registerService(service: ApiService): void;\n\n  /**\n   * Retrieves the given service from the registry. If there is not a\n   * service registered under that name, throws and error\n   *\n   * @template T The type of the service\n   * @param {string} serviceName The name of the service.\n   * @returns {T} The requested service\n   */\n  getService<T extends ApiService>(serviceName: string): T;\n}\n\nclass ServiceRegistryImpl implements ServiceRegistry {\n  private _services: { [serviceName: string]: ApiService };\n\n  public constructor() {\n    this._services = {};\n  }\n\n  public registerService(service: ApiService): void {\n    this._services[service.serviceName] = service;\n  }\n\n  public getService<T extends ApiService>(serviceName: string): T {\n    if (!this._services.hasOwnProperty(serviceName)) {\n      throw new TableauError(ErrorCodes.InternalError, `Service not registered: ${serviceName}`);\n    }\n\n    return this._services[serviceName] as T;\n  }\n}\n\n/**\n * Static class used for getting access to the single instance\n * of the ApiServiceRegistry associated with the registryId.\n *\n * Extensions by design don't need to store/access multiple service registries. Their single instance of ServiceRegistry is\n * stored/access with registryId = 0.\n *\n * Whereas Embedding needs to be aware of which ServiceRegistry to use when there are multiple vizzes embedded.\n * An example of how window.__tableauApiServiceRegistry will look when there are two vizzes: { 0 : ServiceRegistry, 1 : ServiceRegistry}\n * where registry ID of 0 & 1 refers to viz's internal identifier (which is generated by VizManager).\n */\nexport class ApiServiceRegistry {\n  /**\n   * Gets the singleton instance of the ServiceRegistry\n   */\n  public static get(registryId: number): ServiceRegistry {\n    if (!window.__tableauApiServiceRegistry || !window.__tableauApiServiceRegistry[registryId]) {\n      ApiServiceRegistry.setInstance(registryId, new ServiceRegistryImpl());\n    }\n\n    if (!window.__tableauApiServiceRegistry[registryId]) {\n      throw new TableauError(ErrorCodes.InternalError, 'Service registry failed');\n    }\n\n    return window.__tableauApiServiceRegistry[registryId];\n  }\n\n  /**\n   * Helper method that sets the service registry instance for the corresponding registryId. Can be used by unit tests\n   *\n   * @param {ServiceRegistry} serviceRegistry The new registry\n   */\n  public static setInstance(registryId: number, serviceRegistry: ServiceRegistry): void {\n    if (!window.__tableauApiServiceRegistry) {\n      window.__tableauApiServiceRegistry = {};\n    }\n    window.__tableauApiServiceRegistry[registryId] = serviceRegistry;\n  }\n\n  /**\n   * Only used by unit tests\n   */\n  public static clearRegistry(): void {\n    window.__tableauApiServiceRegistry = {};\n  }\n\n  // Private to avoid anyone constructing this\n  private constructor() {}\n}\n"]}