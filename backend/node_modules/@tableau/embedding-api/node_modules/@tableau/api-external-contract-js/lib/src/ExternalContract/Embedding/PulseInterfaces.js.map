{"version":3,"file":"PulseInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Embedding/PulseInterfaces.ts"],"names":[],"mappings":";;AAKA;;;GAGG;AACH,IAAY,eAYX;AAZD,WAAY,eAAe;IACzB,kEAA+C,CAAA;IAC/C,oCAAiB,CAAA;IACjB,4DAAyC,CAAA;IACzC,8EAA2D,CAAA;IAC3D,mDAAgC,CAAA;IAChC,kEAA+C,CAAA;IAC/C,wEAAqD,CAAA;IACrD,8EAA2D,CAAA;IAC3D,0DAAuC,CAAA;IACvC,mDAAgC,CAAA;IAChC,mDAAgC,CAAA;AAClC,CAAC,EAZW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAY1B;AAkGD;;GAEG;AACH,IAAY,kBAeX;AAfD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,kDAA4B,CAAA;IAE5B;;OAEG;IACH,wDAAkC,CAAA;IAElC;;OAEG;IACH,kDAA4B,CAAA;AAC9B,CAAC,EAfW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAe7B;AAsBD;;GAEG;AACH,IAAY,2BAKX;AALD,WAAY,2BAA2B;IACrC,4CAAa,CAAA;IACb,8CAAe,CAAA;IACf,8CAAe,CAAA;IACf,4CAAa,CAAA;AACf,CAAC,EALW,2BAA2B,GAA3B,mCAA2B,KAA3B,mCAA2B,QAKtC","sourcesContent":["import { FilterOptions } from '../Shared/FilterInterfaces';\nimport { FilterDomainType, FilterType, FilterUpdateType } from '../Shared/Namespaces/Tableau';\nimport { PulseLayout, PulseTimeDimension } from './Enums';\nimport { WebComponentLocalSettings } from './WebComponentInterfaces';\n\n/**\n * The names of the string constants you can use as HTML attributes for the <tableau-pulse> web component.\n * @ignore\n */\nexport enum PulseAttributes {\n  DisableExploreFilter = 'disable-explore-filter',\n  Layout = 'layout',\n  OnFirstInteractive = 'onFirstInteractive',\n  OnFirstPulseMetricSizeKnown = 'onFirstPulseMetricSizeKnown',\n  OnPulseUrlError = 'onPulseError',\n  OnPulseFiltersChanged = 'onPulseFiltersChanged',\n  OnPulseInsightDiscovered = 'onPulseInsightDiscovered',\n  OnPulseTimeDimensionChanged = 'onPulseTimeDimensionChanged',\n  OnPulseUrlChanged = 'onPulseUrlChanged',\n  TimeDimension = 'time-dimension',\n  TokenOptional = 'token-optional',\n}\n\nexport interface PulseSettings extends WebComponentLocalSettings {\n  /**\n   * Indicates whether the explore filter is hidden or visible.\n   * ```\n   * <tableau-pulse id=\"tableauPulse\" disable-explore-filter>\n   * ```\n   */\n  disableExploreFilter?: boolean;\n\n  /**\n   * Specifies the desired custom layout of the Pulse metric.\n   * ```\n   * <tableau-pulse id=\"tableauPulse\" layout=\"card\">\n   * ```\n   */\n  layout?: PulseLayout;\n\n  /**\n   * The token used for authorization\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" token=\"some-token-containing-clientId\" />\n   * <tableau-authoring-viz id=\"tableauViz\" token=\"some-token-containing-clientId\" />\n   * <tableau-pulse id=\"tableauPulse\" token=\"some-token-containing-clientId\" />\n   * ```\n   */\n  token?: string;\n\n  /**\n   * The value of the 'loading' attribute of the embedded iframe.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#loading\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" iframe-attr-loading=\"lazy\" />\n   * <tableau-authoring-viz id=\"tableauViz\" iframe-attr-loading=\"lazy\" />\n   * <tableau-pulse id=\"tableauPulse\" iframe-attr-loading=\"lazy\" />\n   * ```\n   */\n  iframeAttributeLoading?: string;\n\n  /**\n   * The value of the 'style' attribute of the embedded iframe.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" iframe-attr-style=\"border: 1px solid red\" />\n   * <tableau-authoring-viz id=\"tableauViz\" iframe-attr-style=\"border: 1px solid red\" />\n   * <tableau-pulse id=\"tableauPulse\" iframe-attr-style=\"border: 1px solid red\" />\n   * ```\n   */\n  iframeAttributeStyle?: string;\n\n  /**\n   * The value of the 'class' attribute of the embedded iframe providing access to any\n   * custom selectors defined in the `<iframe-style>` child tag.\n   *\n   * ```\n   * <tableau-pulse id=\"tableauViz\" iframe-attr-class=\"red-border\">\n   *   <iframe-style>\n   *     .red-border {\n   *       border: 1px solid red;\n   *     }\n   *   </iframe-style>\n   * </tableau-pulse>\n   * ```\n   */\n  iframeAttributeClass?: string;\n\n  /**\n   * The Base64-encoded string representation of the Pulse theme object.\n   *\n   */\n  theme?: string;\n\n  /**\n   * Specifies the desired time dimension to apply to the Pulse metric by default.\n   * ```\n   * <tableau-pulse id=\"tableauPulse\" time-dimension=\"MonthToDate\">\n   * ```\n   */\n  timeDimension?: PulseTimeDimension;\n\n  /**\n   * Indicates whether the token is optional.\n   * When true, the metric will attempt to load even without specifying a token.\n   * This was added specifically for the Mobile team who uses PKCE flow to initiate the session\n   * and should not be advertised to 3rd parties.\n   *\n   * @ignore\n   *\n   * ```\n   * <tableau-pulse id=\"tableauPulse\" token-optional>\n   * ```\n   */\n  isTokenOptional?: boolean;\n}\n\n/**\n * The names of the string constants you can use as child tags for TableauPulse custom element.\n */\nexport enum PulseChildElements {\n  /**\n   * Custom styles applicable to the embedded iframe element itself (not inside it).\n   */\n  IframeStyle = 'iframe-style',\n\n  /**\n   * A parameter to be used in the Pulse theme.\n   */\n  ThemeParameter = 'theme-parameter',\n\n  /**\n   * Contains a list of filter parameters.\n   */\n  PulseFilter = 'pulse-filter',\n}\n\n/**\n * The attributes of the <theme-parameter> child elements.\n */\nexport interface PulseThemeProperty {\n  /**\n   * Name of the theme parameter to be set.\n   */\n  name: string;\n\n  /**\n   * Value for the theme parameter being set.\n   */\n  value: string;\n\n  /**\n   * Optional type of theme parameter being set.\n   */\n  type: string | null;\n}\n\n/**\n * The attributes of the child elements of <tableau-pulse>.\n */\nexport enum PulseChildElementAttributes {\n  Name = 'name',\n  Field = 'field',\n  Value = 'value',\n  Type = 'type',\n}\n\n/**\n * The Pulse theme data structure.\n */\nexport type PulseTheme = Record<string, string | Record<string, string>>;\n\n/**\n * Actions related to events and state of the Pulse metric\n */\nexport interface PulseActions {\n  /**\n   * Applies the list of provided categorical filter values to the Pulse metric.\n   *\n   * @param fieldName      The name of the field to filter on.\n   * @param values         The list of values to filter on.\n   * @param updateType     The update type of this filter (add, all, remove, replace).\n   * @param filterOptions  Advanced filter options (isExcludeMode).\n   * @returns The field name that the filter is applied on.\n   */\n  applyFilterAsync(fieldName: string, values: PulseFieldValueArray, updateType: FilterUpdateType, options: FilterOptions): Promise<string>;\n\n  /**\n   * Applies at least one categorical filter value to the Pulse metric.\n   *\n   * @param {Array<{\n   *       fieldName: string;\n   *       values: PulseFieldValueArray;\n   *       updateType: FilterUpdateType;\n   *       options: FilterOptions;\n   *     }>} filters The set of filters to apply.\n   * @returns The field names that the filter was applied on.\n   */\n  applyFiltersAsync(\n    filters: Array<{\n      fieldName: string;\n      values: PulseFieldValueArray;\n      updateType: FilterUpdateType;\n      options: FilterOptions;\n    }>,\n  ): Promise<Array<string>>;\n\n  /**\n   * Gets the current time dimension applied to the Pulse metric.\n   *\n   * @returns The current time dimension.\n   */\n  getTimeDimensionAsync(): Promise<PulseTimeDimension>;\n\n  /**\n   * Applies the time dimension to the Pulse metric.\n   *\n   * @param {PulseTimeDimension} timeDimension The time dimension to apply\n   * @returns {Promise<void>}\n   */\n  applyTimeDimensionAsync(timeDimension: PulseTimeDimension): Promise<void>;\n\n  /**\n   * Gets a list of filters for the Pulse metric.\n   *\n   * @returns {Promise<Array<PulseFilter>>} The list of filters.\n   */\n  getFiltersAsync(): Promise<Array<PulseFilter>>;\n\n  /**\n   * Resets the existing filter for the given field on the Pulse metric.\n   *\n   * @param fieldName  The name of the field to clear filter on.\n   *\n   * @returns The field to clear filter on.\n   */\n  clearFilterAsync(fieldNames: string): Promise<string>;\n\n  /**\n   * Resets the existing filter for the given fields on the Pulse metric.\n   *\n   * @param {Array<string>} fieldNames The name of the fields to clear filter on.\n   * @returns The fields to clear filter on.\n   */\n  clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>>;\n\n  /**\n   * Resets all the existing filters on the Pulse metric.\n   */\n  clearAllFiltersAsync(): Promise<void>;\n\n  /**\n   * Use this method to filter the Pulse metric before initialization. If used after initialization, it will re-render the metric.\n   * For filtering after initialization, use the other filtering methods, such as `applyFilterAsync`.\n   *\n   * If you add the same filter fields using the `addFilter()` method and by using the `<pulse-filter>` element in the `<tableau-pulse>` web component,\n   * you might experience unexpected behavior.\n   *\n   * @param fieldName The name of the field to filter on.\n   * @param value Single value or a list of comma separated values to filter on.\n   *\n   * ```\n   * pulse.addFilter('Region', 'Central,West');\n   * ```\n   */\n  addFilter(fieldName: string, value: string): void;\n\n  /**\n   * Use this method to readjust the dimensions of the embedded Pulse metric in response to things like a window resize, device orientation change, or\n   * parent container resize.\n   *\n   * ```\n   * window.addEventListener('resize', () => pulse.resize());\n   *\n   * new ResizeObserver(() => pulse.resize()).observe(pulse.parentElement);\n   * ```\n   */\n  resize(): void;\n}\n\n/**\n * The interface for the top-level Pulse object.\n **/\nexport interface Pulse extends PulseSettings, PulseActions {}\n\n/**\n * A PulseFieldValueArray is an array that can contain strings, booleans, or nulls, but will never contain both strings and booleans at the same time.\n */\nexport type PulseFieldValueArray = Array<boolean | null> | Array<string | null>;\n\n/**\n *\n * An abstract base class for all of the Pulse filter types.\n */\nexport interface PulseFilter {\n  /**\n   * The name of the field being filtered.  Note that this is the caption\n   * as shown in the UI, and not the actual database field name.\n   */\n  fieldName: string;\n\n  /**\n   * The type of the filter.\n   */\n  filterType: FilterType;\n\n  /**\n   * The Pulse metric ID.\n   */\n  metricId: string;\n}\n\n/**\n * A Pulse Categorical Filter\n */\nexport interface CategoricalPulseFilter extends PulseFilter {\n  /**\n   * A list of values applied to this categorical filter. Notice that if the Pulse metric\n   * has a definition filter, the current relevant values can be fetched by calling\n   * `getDomainAsync(FilterDomainType.Relevant)`.\n   */\n  readonly appliedValues: PulseFieldValueArray;\n\n  /**\n   * True if this filter is an exclude filter, false if an include filter.\n   */\n  readonly isExcludeMode: boolean;\n\n  /**\n   * True if all the values are selected for this filter. When 'All' is selected,\n   * appliedValues returns an empty list.\n   */\n  readonly isAllSelected?: boolean;\n\n  /**\n   * Gets the domain of a categorical filter.\n   *\n   * @param {(string | undefined)} searchTerm The term to search for in the domain.\n   * @param {(number | undefined)} pageSize The maximum number of values to return. Ignored when nextPageToken is not provided.\n   * @param {(string | undefined)} nextPageToken The next page token returned by Pulse when additional values are available.\n   * @param {(FilterDomainType | undefined)} domainType The domain type of the filter.\n   * @returns {Promise<PulseCategoricalDomain>} A promise containing the categorical domain for the filter.\n   */\n  getDomainAsync: (\n    searchTerm?: string,\n    pageSize?: number,\n    nextPageToken?: string,\n    domainType?: FilterDomainType,\n  ) => Promise<PulseCategoricalDomain>;\n}\n\n/**\n * The domain of a Pulse categorical filter\n */\nexport interface PulseCategoricalDomain {\n  /**\n   * The domain type (relevant, database)\n   */\n  readonly type: FilterDomainType;\n  /**\n   * The list of values in the domain of the filter\n   */\n  readonly values: PulseFieldValueArray;\n  /**\n   * The total available number of values in the domain of the filter.\n   */\n  readonly totalAvailable: number;\n  /**\n   * The next page token returned by Pulse when additional values are available.\n   * Provide this token to getDomainAsync to get the next page of values.\n   */\n  readonly nextPageToken: string | undefined;\n}\n"]}