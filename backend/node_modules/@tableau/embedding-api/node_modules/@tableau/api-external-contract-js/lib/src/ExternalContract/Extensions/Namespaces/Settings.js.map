{"version":3,"file":"Settings.js","sourceRoot":"","sources":["../../../../../src/ExternalContract/Extensions/Namespaces/Settings.ts"],"names":[],"mappings":"","sourcesContent":["import { EventListenerManager } from '../EventInterface';\n\n/**\n * The settings namespace is used to get and set settings\n * values. You can use the settings to configure your extension.\n * The setting values are be persisted in a workbook.\n */\nexport interface Settings extends EventListenerManager {\n  /**\n   * Erases a settings key / value pair. If key isn't found, nothing happens.\n   *\n   * @param key  The key of the pair to erase.\n   */\n  erase(key: string): void;\n\n  /**\n   * Gets a settings value or undefined if the value does not exist.\n   *\n   * @param key  The key to retrieve.\n   * @returns    The value or undefined if it does not exist.\n   */\n  get(key: string): string | undefined;\n\n  /**\n   * Returns a copy of all the saved settings keys and values.\n   * Modifying this value will have no effect on the class.\n   *\n   * @returns  All the saved settings keys and values in a dictionary.\n   */\n  getAll(): { [key: string]: string };\n\n  /**\n   * Indicates whether or not the settings have been\n   * modified since the last call to saveAsync.\n   *\n   * @returns  True if settings have been modified, false otherwise.\n   */\n  readonly isModified: boolean;\n\n  /**\n   * Attempts to persist any currently modified settings key-value pairs. The `saveAsync()` method\n   * should only be called in authoring mode.\n   *\n   * @returns  Promise containing the newly saved settings values.\n   *\n   * ```\n   * tableau.extensions.settings.saveAsync().then(result => {\n   *    console.log('Settings saved.');\n   *    // ... process results\n   * }).catch((error) => {\n   *   // ...\n   *   // ... code for error handling\n   * });\n   *\n   * ```\n   *\n   */\n  saveAsync(): Promise<{ [key: string]: string }>;\n\n  /**\n   * Adds or updates a settings key / value pair.\n   *\n   * @param key    The key to save.\n   * @param value  The value to save.\n   */\n  set(key: string, value: string): void;\n}\n"]}