"use strict";
// All enum values made available to Embedding developers.
// Enums should be kept in alphabetical order.
// Most of them should match an enum on the server defined at
// workgroup/vqlweb/scriptsharp/src/ApiShared/PublicEnums.cs#L398:17
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Crosstab file formats available to use with {@link Viz.exportCrosstabAsync}
 */
var CrosstabFileFormat;
(function (CrosstabFileFormat) {
    CrosstabFileFormat["CSV"] = "csv";
    CrosstabFileFormat["Excel"] = "xlsx";
})(CrosstabFileFormat = exports.CrosstabFileFormat || (exports.CrosstabFileFormat = {}));
/**
 * Device types available to use with {@link Viz.device}
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["Default"] = "default";
    DeviceType["Desktop"] = "desktop";
    DeviceType["Tablet"] = "tablet";
    DeviceType["Phone"] = "phone";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
/**
 * All error codes used by the Embedding API.
 */
var EmbeddingErrorCodes;
(function (EmbeddingErrorCodes) {
    /**
     * Raised when a request to the auth endpoint fails.
     */
    EmbeddingErrorCodes["AuthFailed"] = "auth-failed";
    /**
     * The browser is not capable of supporting the Tableau Embedding API
     */
    EmbeddingErrorCodes["BrowserNotCapable"] = "browser-not-capable";
    /**
     * The permissions on a workbook or a view do not allow downloading the workbook.
     */
    EmbeddingErrorCodes["DownloadWorkbookNotAllowed"] = "download-workbook-not-allowed";
    /**
     * Thrown when an error occurs while attempting to perform a filter operation.
     */
    EmbeddingErrorCodes["FilterCannotBePerformed"] = "filter-cannot-be-performed";
    /**
     * Thrown when attempting to switch to a sheet by index that does not exist in the workbook.
     */
    EmbeddingErrorCodes["IndexOutOfRange"] = "index-out-of-range";
    /**
     * Thrown when an error occurs within the Tableau Embedding API. Contact Tableau Support.
     */
    EmbeddingErrorCodes["InternalError"] = "internal-error";
    /**
     * An operation was attempted on a custom view that does not exist.
     */
    EmbeddingErrorCodes["InvalidCustomViewName"] = "invalid-custom-view-name";
    /**
     * An invalid date was specified in a method that required a date parameter.
     */
    EmbeddingErrorCodes["InvalidDateParameter"] = "invalid-date-parameter";
    /**
     * Either a filter operation was attempted on a field that does not exist in the data source, or the value supplied
     * in the filter operation is the wrong data type or format.
     */
    EmbeddingErrorCodes["invalidFilterFieldNameOrValue"] = "invalid-filter-field-name";
    /**
     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message
     * field.
     */
    EmbeddingErrorCodes["InvalidParameter"] = "invalid-parameter";
    /**
     * The currently applied time dimension could not be determined or is invalid.
     */
    EmbeddingErrorCodes["InvalidTimeDimension"] = "invalid-time-dimension";
    /**
     * A negative size was specified or the maxSize value is less than minSize in Sheet.changeSizeAsync().
     */
    EmbeddingErrorCodes["InvalidSize"] = "invalid-size";
    /**
     * Attempted to get an authoring worksheet when the current sheet is not a worksheet.
     * @ignore
     */
    EmbeddingErrorCodes["InvalidSheetType"] = "invalid-sheet-type";
    /**
     * A behavior value was found that is not included in the SheetSizeBehavior enum.
     */
    EmbeddingErrorCodes["InvalidSizeBehavior"] = "invalid-size-behavior";
    /**
     * A behavior other than SheetSizeBehavior.Automatic was specified in Sheet.changeSizeAsync() when the sheet is a
     * Worksheet instance.
     */
    EmbeddingErrorCodes["InvalidSizeBehaviorOnWorksheet"] = "invalid-size-behavior-on-worksheet";
    /**
     * The URL specified in the Viz class constructor is not valid.
     */
    EmbeddingErrorCodes["InvalidUrl"] = "invalid-url";
    /**
     * The maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtMost.
     */
    EmbeddingErrorCodes["MissingMaxSize"] = "missing-max-size";
    /**
     * The minSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtLeast.
     */
    EmbeddingErrorCodes["MissingMinSize"] = "missing-min-size";
    /**
     * The minSize or maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.Range.
     */
    EmbeddingErrorCodes["MissingMinMaxSize"] = "missing-min-max-size";
    /**
     * Can occur if the embedding app interacts with a parameter that has been removed from the worksheet.
     */
    EmbeddingErrorCodes["MissingParameter"] = "missing-parameter";
    /**
     * The rangeN field is missing for a relative date filter of type LASTN or NEXTN.
     */
    EmbeddingErrorCodes["MissingRangeNForRelativeDateFilters"] = "missing-range-n-for-relative-date-filters";
    /**
     * An attempt was made to access Sheet.getUrl() on a hidden sheet. Hidden sheets do not have URLs.
     */
    EmbeddingErrorCodes["NoUrlForHiddenWorksheet"] = "no-url-for-hidden-worksheet";
    /**
     * One or both of the parentElement or the URL parameters is not specified in the Viz constructor.
     */
    EmbeddingErrorCodes["NoUrlOrParentElementNotFound"] = "no-url-or-parent-element-not-found";
    /**
     * An operation was attempted on a sheet that is not active or embedded within the active dashboard.
     */
    EmbeddingErrorCodes["NotActiveSheet"] = "not-active-sheet";
    /**
     * A required parameter was not specified, null, or an empty string/array.
     */
    EmbeddingErrorCodes["NullOrEmptyParameter"] = "null-or-empty-parameter";
    /**
     * An operation was attempted on a sheet that does not exist in the workbook.
     */
    EmbeddingErrorCodes["SheetNotInWorkbook"] = "sheet-not-in-workbook";
    /**
     * An operation is performed on a CustomView object that is no longer valid (it has been removed).
     */
    EmbeddingErrorCodes["StaleDataReference"] = "stale-data-reference";
    /**
     * Unknown error triggered during the auth flow.
     */
    EmbeddingErrorCodes["UnknownAuthError"] = "unknown-auth-error";
    /**
     * An unknown event name was specified in the call to Viz.addEventListener or Viz.removeEventListener.
     */
    EmbeddingErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
    /**
     * A Viz object has already been created as a child of the parentElement specified in the Viz constructor.
     */
    EmbeddingErrorCodes["VizAlreadyInManager"] = "viz-already-in-manager";
    /**
     * Function is not supported in the embedding api.
     */
    EmbeddingErrorCodes["ImplementationError"] = "wrong-implementation";
    /**
     * @NotImplemented
     */
    EmbeddingErrorCodes["NotImplemented"] = "not-implemented";
    /**
     * Unknown error during event initialization
     */
    EmbeddingErrorCodes["EventInitializationError"] = "event-initialization-error";
    /**
     * Version of the embedding api not supported by the version of tableau
     */
    EmbeddingErrorCodes["IncompatibleVersionError"] = "incompatible-version-error";
    /**
     * Unknown {@link TableauDialogType} passed in to Viz.displayDialogAsync.
     */
    EmbeddingErrorCodes["UnknownDialogType"] = "unknown-dialog-type";
    /**
     * Can occur if the API interacts with a filter that has been removed from the worksheet.
     * Can also occurs if a {@link FilterType} has not been implemented.
     */
    EmbeddingErrorCodes["FilterMissingOrNotImplemented"] = "filter-missing-not-implemented";
    /**
     * Can occur if story point ids no longer match.
     */
    EmbeddingErrorCodes["StoryPointIdMismatch"] = "storypoint-id-mismatch";
})(EmbeddingErrorCodes = exports.EmbeddingErrorCodes || (exports.EmbeddingErrorCodes = {}));
/**
 * Formats available to use with displayStaticImage in @VizInterfaces
 */
var FileFormats;
(function (FileFormats) {
    FileFormats["PDF"] = "pdf";
    FileFormats["PNG"] = "png";
})(FileFormats = exports.FileFormats || (exports.FileFormats = {}));
var PrintOrientation;
(function (PrintOrientation) {
    PrintOrientation["Portrait"] = "portrait";
    PrintOrientation["Landscape"] = "landscape";
})(PrintOrientation = exports.PrintOrientation || (exports.PrintOrientation = {}));
var PrintPageSize;
(function (PrintPageSize) {
    PrintPageSize["Letter"] = "letter";
    PrintPageSize["Legal"] = "legal";
    PrintPageSize["Note"] = "note";
    PrintPageSize["Folio"] = "folio";
    PrintPageSize["Tabloid"] = "tabloid";
    PrintPageSize["Ledger"] = "ledger";
    PrintPageSize["Statement"] = "statement";
    PrintPageSize["Executive"] = "executive";
    PrintPageSize["A3"] = "A3";
    PrintPageSize["A4"] = "A4";
    PrintPageSize["A5"] = "A5";
    PrintPageSize["B4"] = "B4";
    PrintPageSize["B5"] = "B5";
    PrintPageSize["Quarto"] = "quarto";
    PrintPageSize["Unspecified"] = "unspecified";
})(PrintPageSize = exports.PrintPageSize || (exports.PrintPageSize = {}));
var PrintScaling;
(function (PrintScaling) {
    PrintScaling["Automatic"] = "automatic";
    PrintScaling["Perc25"] = "25%";
    PrintScaling["Perc50"] = "50%";
    PrintScaling["Perc60"] = "60%";
    PrintScaling["Perc75"] = "75%";
    PrintScaling["Perc80"] = "80%";
    PrintScaling["Perc90"] = "90%";
    PrintScaling["Perc100"] = "100%";
    PrintScaling["Perc200"] = "200%";
    PrintScaling["Perc400"] = "400%";
    PrintScaling["AtMost1PageHigh"] = "at-most-1-page-high";
    PrintScaling["AtMost2PagesHigh"] = "at-most-2-pages-high";
    PrintScaling["AtMost1PageWide"] = "at-most-1-page-wide";
    PrintScaling["AtMost2PagesWide"] = "at-most-2-pages-wide";
})(PrintScaling = exports.PrintScaling || (exports.PrintScaling = {}));
var RevertVizSelection;
(function (RevertVizSelection) {
    RevertVizSelection["All"] = "all";
    RevertVizSelection["Axes"] = "axes";
    RevertVizSelection["Filters"] = "filters";
    RevertVizSelection["Sorts"] = "sorts";
    RevertVizSelection["Shelves"] = "shelves";
})(RevertVizSelection = exports.RevertVizSelection || (exports.RevertVizSelection = {}));
var ToolbarButtons;
(function (ToolbarButtons) {
    ToolbarButtons["Alerts"] = "alerts";
    ToolbarButtons["AskData"] = "askData";
    ToolbarButtons["CustomViews"] = "customViews";
    ToolbarButtons["DataDetails"] = "dataDetails";
    ToolbarButtons["Share"] = "share";
    ToolbarButtons["Subscribe"] = "subscribe";
})(ToolbarButtons = exports.ToolbarButtons || (exports.ToolbarButtons = {}));
var Toolbar;
(function (Toolbar) {
    Toolbar["Top"] = "top";
    Toolbar["Bottom"] = "bottom";
    Toolbar["Hidden"] = "hidden";
})(Toolbar = exports.Toolbar || (exports.Toolbar = {}));
var SheetSizeBehavior;
(function (SheetSizeBehavior) {
    SheetSizeBehavior["Automatic"] = "automatic";
    SheetSizeBehavior["Exactly"] = "exactly";
    SheetSizeBehavior["Range"] = "range";
    SheetSizeBehavior["AtLeast"] = "atleast";
    SheetSizeBehavior["AtMost"] = "atmost";
})(SheetSizeBehavior = exports.SheetSizeBehavior || (exports.SheetSizeBehavior = {}));
var PulseLayout;
(function (PulseLayout) {
    PulseLayout["Default"] = "default";
    PulseLayout["Card"] = "card";
    PulseLayout["Ban"] = "ban";
})(PulseLayout = exports.PulseLayout || (exports.PulseLayout = {}));
var PulseTimeDimension;
(function (PulseTimeDimension) {
    PulseTimeDimension["Today"] = "Today";
    PulseTimeDimension["Yesterday"] = "Yesterday";
    PulseTimeDimension["WeekToDate"] = "WeekToDate";
    PulseTimeDimension["LastWeek"] = "LastWeek";
    PulseTimeDimension["MonthToDate"] = "MonthToDate";
    PulseTimeDimension["LastMonth"] = "LastMonth";
    PulseTimeDimension["QuarterToDate"] = "QuarterToDate";
    PulseTimeDimension["LastQuarter"] = "LastQuarter";
    PulseTimeDimension["YearToDate"] = "YearToDate";
    PulseTimeDimension["LastYear"] = "LastYear";
})(PulseTimeDimension = exports.PulseTimeDimension || (exports.PulseTimeDimension = {}));
var PulseErrorMessageVisibility;
(function (PulseErrorMessageVisibility) {
    PulseErrorMessageVisibility["Visible"] = "visible";
    PulseErrorMessageVisibility["Hidden"] = "hidden";
    PulseErrorMessageVisibility["Suppressed"] = "suppressed";
})(PulseErrorMessageVisibility = exports.PulseErrorMessageVisibility || (exports.PulseErrorMessageVisibility = {}));
/**
 * Be careful when adding new event types. Extensions and embedding follow two different patterns on how events are named.
 * Events should be all lower case and without hyphens or underscores.
 */
/**
 * Represents the type of tableau embedding event that can be listened for.
 */
var TableauEventType;
(function (TableauEventType) {
    /**
     * Raised when a custom view has finished loading. This event is raised after the callback function for {@link FirstInteractive} (if any) has been called.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewLoaded"] = "customviewloaded";
    /**
     * Raised when a custom view has been removed.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewRemoved"] = "customviewremoved";
    /**
     * Raised when a custom view has been saved (newly created or updated).
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSaved"] = "customviewsaved";
    /**
     * Raised when a custom view has been set as the default view for a workbook.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSetDefault"] = "customviewsetdefault";
    /** Raised when the user clicks on the Edit Button.
     *
     * @category Viewing
     */
    TableauEventType["EditButtonClicked"] = "editbuttonclicked";
    /** Raised when the user clicks on the Edit In Desktop Button.
     *
     * @category Authoring, Viewing
     */
    TableauEventType["EditInDesktopButtonClicked"] = "editindesktopbuttonclicked";
    /** Raised when any filter has changed state. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["FilterChanged"] = "filterchanged";
    /** Fired when viz size is known
     *
     * @category Authoring, Viewing
     */
    TableauEventType["FirstVizSizeKnown"] = "firstvizsizeknown";
    /** Fired when a viz first becomes interactive
     *
     * @category Authoring, Viewing, Pulse
     */
    TableauEventType["FirstInteractive"] = "firstinteractive";
    /** Raised when a custom mark context menu is clicked.
     *
     * @category Viewing
     */
    TableauEventType["CustomMarkContextMenuEvent"] = "custommarkcontextmenu";
    /** The selected marks on a visualization have changed. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["MarkSelectionChanged"] = "markselectionchanged";
    /** A parameter has had its value modified. You can use this event type with [[Parameter]] objects.
     *
     * @category Viewing
     */
    TableauEventType["ParameterChanged"] = "parameterchanged";
    /** Raised when a toolbar button or control becomes available or becomes unavailable.
     *
     * @category Viewing
     */
    TableauEventType["ToolbarStateChanged"] = "toolbarstatechanged";
    /** Raised when the workbook is ready to close. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookReadyToClose"] = "workbookreadytoclose";
    /** Raised when the workbook has been published. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublished"] = "workbookpublished";
    /** Raised when "publish as" is successful. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublishedAs"] = "workbookpublishedas";
    /**
     * Raised when a URL action occurs. See the {@link UrlActionEvent} class.
     *
     * @category Viewing
     */
    TableauEventType["UrlAction"] = "urlaction";
    /**
     * Raised after a tab switch occurs (the active sheet has changed). Guarantees the viz object will be interactive after this.
     *
     * @category Viewing
     */
    TableauEventType["TabSwitched"] = "tabswitched";
    /**
     *
     * Raised after a new story point becomes active.
     *
     * @category Viewing
     */
    TableauEventType["StoryPointSwitched"] = "storypointswitched";
    /**
     *
     * Raised when an error occurs while loading the contents of the webcomponent.
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["VizLoadError"] = "vizloaderror";
    /**
     * Raised after the iframe src attribute has been updated
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["IframeSrcUpdated"] = "iframesrcupdated";
    /**
     * Raised when changes are made to summary data.
     *
     * @category Viewing
     */
    TableauEventType["SummaryDataChanged"] = "summarydatachanged";
    /**
     * Raised when tableau (viz-client) is ready to receive an auth token.
     * Used for authentication in salesforce native mode.
     *
     * @hidden
     * @category Authoring, Viewing,
     */
    TableauEventType["ReadyToReceiveAuthToken"] = "readytoreceiveauthtoken";
    /**
     * Fired when the Pulse metric size is known
     *
     * @category Pulse
     */
    TableauEventType["FirstPulseMetricSizeKnown"] = "firstpulsemetricsizeknown";
    /**
     * Fired when an internal Pulse error is encountered.
     *
     * @category Pulse
     */
    TableauEventType["PulseError"] = "pulseerror";
    /**
     * Fired when the Pulse filters change
     *
     * @category Pulse
     */
    TableauEventType["PulseFiltersChanged"] = "pulsefilterschanged";
    /**
     * Fired when a Pulse insight is discovered
     *
     * @category Pulse
     */
    TableauEventType["PulseInsightDiscovered"] = "pulseinsightdiscovered";
    /**
     * Fired when the Pulse metric time dimension changes
     *
     * @category Pulse
     */
    TableauEventType["PulseTimeDimensionChanged"] = "pulsetimedimensionchanged";
    /**
     * Fired when the Pulse URL changes
     *
     * @category Pulse
     */
    TableauEventType["PulseUrlChanged"] = "pulseurlchanged";
})(TableauEventType = exports.TableauEventType || (exports.TableauEventType = {}));
/**
 * Represents the location of a context menu where users can add external menu items.
 */
var ApiMenuType;
(function (ApiMenuType) {
    /** External menu item will be injected in ubertip dialog */
    ApiMenuType["Ubertip"] = "ubertip";
})(ApiMenuType = exports.ApiMenuType || (exports.ApiMenuType = {}));
/** You can use this type with a {@link Viz} object. */
var TableauDialogType;
(function (TableauDialogType) {
    /**
     * Used to display the download PDF dialog.
     */
    TableauDialogType["ExportPDF"] = "export-pdf";
    /**
     * Used to display the download PowerPoint dialog.
     */
    TableauDialogType["ExportPowerPoint"] = "export-powerpoint";
    /**
     * Used to display the download Data dialog.
     */
    TableauDialogType["ExportData"] = "export-data";
    /**
     * Used to display the download CrossTab dialog.
     */
    TableauDialogType["ExportCrossTab"] = "export-cross-tab";
    /**
     * Used to display the download Workbook dialog.
     */
    TableauDialogType["ExportWorkbook"] = "export-workbook";
    /**
     * Used to display the Share dialog.
     */
    TableauDialogType["Share"] = "share";
})(TableauDialogType = exports.TableauDialogType || (exports.TableauDialogType = {}));
//# sourceMappingURL=Enums.js.map