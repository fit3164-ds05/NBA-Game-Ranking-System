{"version":3,"file":"VizInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Embedding/VizInterfaces.ts"],"names":[],"mappings":";;AAcA;;;GAGG;AACH,IAAY,mBAQX;AARD,WAAY,mBAAmB;IAC7B,uDAAgC,CAAA;IAChC,8EAAuD,CAAA;IACvD,qFAA8D,CAAA;IAC9D,oEAA6C,CAAA;IAC7C,oFAA6D,CAAA;IAC7D,kEAA2C,CAAA;IAC3C,gEAAyC,CAAA;AAC3C,CAAC,EARW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAQ9B;AAED;;;GAGG;AACH,IAAY,aAsBX;AAtBD,WAAY,aAAa;IACvB,gEAA+C,CAAA;IAC/C,uCAAsB,CAAA;IACtB,oCAAmB,CAAA;IACnB,2DAA0C,CAAA;IAC1C,kCAAiB,CAAA;IACjB,oDAAmC,CAAA;IACnC,4DAA2C,CAAA;IAC3C,oDAAmC,CAAA;IACnC,8EAA6D,CAAA;IAC7D,kEAAiD,CAAA;IACjD,0DAAyC,CAAA;IACzC,gEAA+C,CAAA;IAC/C,4CAA2B,CAAA;IAC3B,gDAA+B,CAAA;IAC/B,0DAAyC,CAAA;IACzC,4DAA2C,CAAA;IAC3C,wDAAuC,CAAA;IACvC,kEAAiD,CAAA;IACjD,8DAA6C,CAAA;IAC7C,8DAA6C,CAAA;IAC7C,wEAAuD,CAAA;AACzD,CAAC,EAtBW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAsBxB;AAED;;;GAGG;AACH,IAAY,sBAKX;AALD,WAAY,sBAAsB;IAChC,qEAA2C,CAAA;IAC3C,yEAA+C,CAAA;IAC/C,2EAAiD,CAAA;IACjD,+DAAqC,CAAA;AACvC,CAAC,EALW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAKjC;AAED;;GAEG;AACH,IAAY,gBAoBX;AApBD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,4CAAwB,CAAA;IAExB;;OAEG;IACH,kDAA8B,CAAA;IAE9B;;OAEG;IACH,wDAAoC,CAAA;IAEpC;;OAEG;IACH,gDAA4B,CAAA;AAC9B,CAAC,EApBW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAoB3B;AAED,IAAY,yBAIX;AAJD,WAAY,yBAAyB;IACnC,4CAAe,CAAA;IACf,4CAAe,CAAA;IACf,0CAAa,CAAA;AACf,CAAC,EAJW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAIpC","sourcesContent":["import {\n  CrosstabFileFormat,\n  DeviceType,\n  PrintOrientation,\n  PrintPageSize,\n  PrintScaling,\n  TableauDialogType,\n  TableauEventType,\n  Toolbar,\n} from './Enums';\nimport { SheetSize } from './SheetInterfaces';\nimport { WebComponentLocalSettings, WebComponentSettingsShared } from './WebComponentInterfaces';\nimport { Workbook } from './WorkbookInterface';\n\n/**\n * The shared string constants you can use as HTML attributes for the <tableau-viz> and <tableau-authoring-viz> web component.\n * @ignore\n */\nexport enum VizSharedAttributes {\n  TouchOptimize = 'touch-optimize',\n  HideEditInDesktopButton = 'hide-edit-in-desktop-button',\n  SuppressDefaultEditBehavior = 'suppress-default-edit-behavior',\n  DisableVersionCheck = 'disable-version-check',\n  OnEditInDesktopButtonClicked = 'onEditInDesktopButtonClicked',\n  OnFirstVizSizeKnown = 'onFirstVizSizeKnown',\n  OnFirstInteractive = 'onFirstInteractive',\n}\n\n/**\n * The names of the string constants you can use as HTML attributes for the <tableau-viz> web component.\n * @ignore\n */\nexport enum VizAttributes {\n  DisableUrlActionsPopups = 'disable-url-actions',\n  HideTabs = 'hide-tabs',\n  Toolbar = 'toolbar',\n  InstanceIdToClone = 'instance-id-to-clone',\n  Device = 'device',\n  HideEditButton = 'hide-edit-button',\n  OnEditButtonClicked = 'onEditButtonClicked',\n  OnFilterChanged = 'onFilterChanged',\n  OnCustomMarkContextMenuEvent = 'onCustomMarkContextMenuEvent',\n  OnMarkSelectionChanged = 'onMarkSelectionChanged',\n  OnParameterChanged = 'onParameterChanged',\n  OnToolbarStateChanged = 'onToolbarStateChanged',\n  OnUrlAction = 'onUrlAction',\n  OnTabSwitched = 'onTabSwitched',\n  OnCustomViewLoaded = 'onCustomViewLoaded',\n  OnCustomViewRemoved = 'onCustomViewRemoved',\n  OnCustomViewSaved = 'onCustomViewSaved',\n  OnCustomViewSetDefault = 'onCustomViewSetDefault',\n  OnStoryPointSwitched = 'onStoryPointSwitched',\n  OnSummaryDataChanged = 'onSummaryDataChanged',\n  OnReadyToReceiveAuthToken = 'onReadyToReceiveAuthToken',\n}\n\n/**\n * The names of the string constants you can use as HTML attributes for the <tableau-authoring-viz> web component.\n * @ignore\n */\nexport enum VizAuthoringAttributes {\n  OnWorkbookPublished = 'onWorkbookPublished',\n  OnWorkbookPublishedAs = 'onWorkbookPublishedAs',\n  OnWorkbookReadyToClose = 'onWorkbookReadyToClose',\n  HideCloseButton = 'hide-close-button',\n}\n\n/**\n * The names of the string constants you can use as child tags for TableauViz and TableauAuthoringViz custom elements.\n */\nexport enum VizChildElements {\n  /**\n   * Contains a list of filter parameters. Available only in viewing mode.\n   */\n  VizFilter = 'viz-filter',\n\n  /**\n   * Contains a name and value for a parameter. Available only in viewing mode.\n   */\n  VizParameter = 'viz-parameter',\n\n  /**\n   * Contains a list of custom parameters.  Available in both viewing and authoring modes.\n   */\n  CustomParameter = 'custom-parameter',\n\n  /**\n   * Custom styles applicable to the embedded iframe element itself (not inside it). Available in both viewing and authoring modes.\n   */\n  IframeStyle = 'iframe-style',\n}\n\nexport enum VizChildElementAttributes {\n  Field = 'field',\n  Value = 'value',\n  Name = 'name',\n}\n\n/**\n * The interface for the top level Viz object.\n **/\nexport interface Viz extends VizSettings, WebComponentLocalSettings, VizActions {\n  /**\n   * One Workbook is supported per visualization.\n   */\n  readonly workbook?: Workbook;\n\n  /**\n   * Provide an auth token for salesforce native mode\n   * @param token\n   */\n  setAuthToken(token: string): void;\n}\n\n/**\n * The interface for the top level Authoring Viz object.\n */\nexport interface AuthoringViz extends VizAuthoringSettings, WebComponentLocalSettings {\n  /**\n   * Gets the visualization's current URL.\n   */\n  getCurrentSrcAsync(): Promise<string>;\n\n  /**\n   * Provide an auth token for salesforce native mode\n   * @param token\n   */\n  setAuthToken(token: string): void;\n\n  /**\n   * Use this method to readjust the dimensions of the embedded viz in response to things like a window resize, device orientation change, or\n   * parent container resize.\n   *\n   * ```\n   * window.addEventListener('resize', () => viz.resize());\n   *\n   * new ResizeObserver(() => viz.resize()).observe(viz.parentElement);\n   * ```\n   */\n  resize(): void;\n}\n\n/**\n * Partially implemented - Actions related to events and state of the viz\n */\nexport interface VizActions {\n  /**\n   * Indicates whether automatic updates are currently paused.\n   */\n  readonly automaticUpdatesArePaused: boolean;\n\n  /**\n   * Pause layout updates. This is useful if you are resizing the visualization or performing multiple calls that could affect the layout.\n   */\n  pauseAutomaticUpdatesAsync(): Promise<void>;\n\n  /**\n   * Resume layout updates.\n   */\n  resumeAutomaticUpdatesAsync(): Promise<void>;\n\n  /**\n   * Toggle layout updates.\n   */\n  toggleAutomaticUpdatesAsync(): Promise<void>;\n\n  /**\n   * Equivalent to clicking on the Revert All toolbar button, which restores the workbook to its starting state.\n   */\n  revertAllAsync(): Promise<void>;\n\n  /**\n   * Equivalent to clicking on the Refresh Data toolbar button.\n   */\n  refreshDataAsync(): Promise<void>;\n\n  /**\n   * Equivalent to clicking on Download > Image from the toolbar, which creates a PNG file of the current visualization.\n   */\n  exportImageAsync(): Promise<void>;\n\n  /**\n   * Exports the crosstab of any given worksheet within the current view to a\n   * specified format (CrosstabFileFormat.Excel, CrosstabFileFormat.CSV).\n   * Throws an error if the sheet name does not match any worksheets within the active sheet.\n   * Throws an error if the crosstab file failed to be created.\n   * Note: exportCrosstabAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   *\n   * ```\n   * let viz = document.getElementById('tableauViz');\n   * viz.exportCrosstabAsync('Sales by Segment', CrosstabFileFormat.CSV);\n   * ```\n   */\n  exportCrosstabAsync(sheetName: string, format: CrosstabFileFormat): Promise<void>;\n\n  /**\n   * Exports the summary data shown in the View Data window\n   * (shown when you click Download > Data from the toolbar for any given worksheet within the current view).\n   * The current file format is CSV. There is no limitation on the amount of summary data you can export.\n   * Throws an error if the sheet name does not match any worksheets within the active sheet.\n   * Throws an error if the CSV file failed to be created.\n   * Note: exportDataAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   *\n   * ```\n   * let viz = document.getElementById('tableauViz');\n   * const activeSheet = viz.workbook.activeSheet;\n   * if (activeSheet.sheetType === SheetType.Worksheet) {\n   *   const columns = await activeSheet.getSummaryColumnsInfoAsync();\n   *   // Getting fieldId's for Latitude and Longitude columns\n   *   const columnsToIncludeById = columns.map((column) => {\n   *     if (column.fieldName === 'Latitude' || column.fieldName === 'Longitude') {\n   *       return column.fieldId;\n   *     }\n   *   });\n   *   await viz.exportDataAsync(activeSheet.name, { columnsToIncludeById });\n   * }\n   * else if (activeSheet.sheetType === SheetType.Dashboard) {\n   *   // Exporting the summary data for each worksheet in the dashboard while also ignoring aliases\n   *   for (const worksheet of activeSheet.worksheets) {\n   *     await viz.exportDataAsync(worksheet.name, { ignoreAliases: true });\n   *   }\n   * }\n   * else\n   * {\n   *   // activeSheet is a Story and we want to export worksheets within the current view\n   *   const containedSheet = activeSheet.activeStoryPoint.containedSheet;\n   *   if (containedSheet !== undefined && containedSheet.sheetType === SheetType.Worksheet) {\n   *     // Exporting summary data of a worksheet within the active story point\n   *     await viz.exportDataAsync(containedSheet.name);\n   *   } else if (containedSheet !== undefined && containedSheet.sheetType === SheetType.Dashboard) {\n   *     // Exporting the summary data for each worksheet within the active story point\n   *     for (const worksheet of containedSheet.worksheets) {\n   *       await viz.exportDataAsync(worksheet.name);\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  exportDataAsync(sheetName: string, options?: ExportDataOptions): Promise<void>;\n\n  /**\n   * Exports the list of sheets to a PowerPoint file. If no sheets are specified, the current sheet is exported.\n   * The order the sheets appear in the list is the order the sheets appear in the PowerPoint file.\n   * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.\n   *\n   * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.\n   * Throws an error if the PowerPoint file fails to be created.\n   *\n   * Note: exportPowerPointAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   *\n   * ```\n   * let viz = document.getElementById('tableauViz');\n   * const workbook = viz.workbook;\n   * const activeSheet = workbook.activeSheet;\n   * if (activeSheet.sheetType === SheetType.Worksheet || activeSheet.sheetType === SheetType.Story) {\n   *   await viz.exportPowerPointAsync();\n   * } else if (activeSheet.sheetType ===  SheetType.Dashboard) {\n   *   const worksheetNames = activeSheet.worksheets.map((worksheet) => worksheet.name);\n   *   await viz.exportPowerPointAsync(worksheetNames);\n   * }\n   * // exporting all sheets within the workbook to PowerPoint\n   * const publishedSheetNames = workbook.publishedSheetsInfo.map((publishedSheetInfo) => publishedSheetInfo.name);\n   * await viz.exportPowerPointAsync(publishedSheetNames);\n   * ```\n   */\n  exportPowerPointAsync(sheetNames?: Array<string>): Promise<void>;\n\n  /**\n   * Exports the list of sheets with the given {@link ExportPDFOptions} options. If no sheets are specified, the current sheet is exported.\n   * The list of sheets can either exclusively include the worksheets within a dashboard or exclusively include the published sheets from the workbook.\n   * If no ExportPDFOptions are specified, the default settings are: Scaling = Automatic, PageSize = Letter, and Orientation = Portrait.\n   *\n   * Throws an error if the list of sheets contains both worksheets within a dashboard and published sheets from the workbook.\n   * Throws an error if the PDF file fails to be created.\n   *\n   * Note: exportPDFAsync resolves when a download is initiated. It does not indicate that a download was successful or if the download was complete.\n   *\n   * ```\n   * let viz = document.getElementById('tableauViz');\n   * const workbook = viz.workbook;\n   * const activeSheet = workbook.activeSheet;\n   * if (activeSheet.sheetType === SheetType.Worksheet || activeSheet.sheetType === SheetType.Story) {\n   *   await viz.exportPDFAsync();\n   * } else if (activeSheet.sheetType ===  SheetType.Dashboard) {\n   *   const worksheetNames = activeSheet.worksheets.map((worksheet) => worksheet.name);\n   *   await viz.exportPDFAsync(worksheetNames);\n   * }\n   * // exporting all sheets within the workbook to PDF\n   * const publishedSheetNames = workbook.publishedSheetsInfo.map((publishedSheetInfo) => publishedSheetInfo.name);\n   * await viz.exportPDFAsync(publishedSheetNames);\n   * ```\n   */\n  exportPDFAsync(sheetNames?: Array<string>, options?: ExportPDFOptions): Promise<void>;\n\n  /**\n   * Display one of the export dialogs based on the dialogType parameter\n   *\n   * Throws an error if dialogType is invalid\n   */\n  displayDialogAsync(dialogType: TableauDialogType): Promise<void>;\n\n  /**\n   * Gets the visualization's current URL.\n   */\n  getCurrentSrcAsync(): Promise<string>;\n\n  /**\n   * Redoes the last action performed on a sheet.\n   */\n  redoAsync(): Promise<void>;\n\n  /**\n   * Undoes the last action performed on a sheet.\n   */\n  undoAsync(): Promise<void>;\n\n  /**\n   * Adds an event listener to the specified event.\n   *\n   * ```\n   * async function getSelectedMarks(event) {\n   *     const marksSelected = await event.detail.getMarksAsync();\n   *     const numMarks = marksSelected.data[0].data.length;\n   *     console.log(`${numMarks} marks Selected`);\n   * }\n   *\n   * let viz = document.getElementById('tableauViz');\n   * viz.addEventListener(\"markselectionchanged\", getSelectedMarks);\n   * ```\n   */\n  addEventListener(type: TableauEventType, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\n  /**\n   * Removes an event listener from the specified event.\n   *\n   * ```\n   * let viz = document.getElementById('tableauViz');\n   * viz.removeEventListener(\"markselectionchanged\", getSelectedMarks);\n   * ```\n   */\n  removeEventListener(type: TableauEventType, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n\n  /**\n   * Use this method to filter the viz before initialization. If used after initialization, it will re-render the viz.\n   * For filtering after initialization, use the other filtering methods, such as `applyFilterAsync`.\n   *\n   * If you add the same filter fields using the `addFilter()` method and by using the `<viz-filter>` element in the `<tableau-viz>` web component,\n   * you might experience unexpected behavior.\n   *\n   * @param fieldName The name of the field to filter on.\n   * @param value Single value or a list of comma separated values to filter on.\n   *\n   * ```\n   * viz.addFilter('Region', 'Central,West');\n   * ```\n   */\n  addFilter(fieldName: string, value: string): void;\n\n  /**\n   * Use this method to readjust the dimensions of the embedded viz in response to things like a window resize, device orientation change, or\n   * parent container resize.\n   *\n   * ```\n   * window.addEventListener('resize', () => viz.resize());\n   *\n   * new ResizeObserver(() => viz.resize()).observe(viz.parentElement);\n   * ```\n   */\n  resize(): void;\n}\n\nexport interface VizSize {\n  /**\n   * Gets the sheetSize record for the current sheet\n   */\n  readonly sheetSize: SheetSize;\n\n  /**\n   * Gets the height of the Tableau UI elements (the chrome) surrounding the view.\n   */\n  readonly chromeHeight: number;\n}\n\n/**\n * This interface represents all of the options for configuring a viz that are common between\n * viewing and authoring mode.\n */\ninterface VizSettingsShared extends WebComponentSettingsShared {\n  /**\n   * Indicates whether to touch optimize viz controls.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" touch-optimize />\n   * <tableau-authoring-viz id=\"tableauViz\" touch-optimize />\n   * ```\n   */\n  touchOptimize?: boolean;\n\n  /**\n   * Indicates whether the Edit in Desktop button is hidden or visible.\n   * If not specified, defaults to false, meaning that the Edit in Desktop button is visible.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" hide-edit-in-desktop-button>\n   * <tableau-authoring-viz id=\"tableauViz\" hide-edit-in-desktop-button>\n   * ```\n   */\n  hideEditInDesktopButton?: boolean;\n\n  /**\n   * Indicates whether the default edit behavior is suppressed.\n   * If not specified, defaults to false, meaning that the default edit behavior is not suppressed.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" suppress-default-edit-behavior>\n   * <tableau-authoring-viz id=\"tableauViz\" suppress-default-edit-behavior>\n   * ```\n   */\n  suppressDefaultEditBehavior?: boolean;\n\n  /**\n   * An event raised when the user clicks on the Edit In Desktop Button. You can use this event type with TableauViz objects.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onEditInDesktopButtonClicked=\"onEditInDesktopButtonClickedHandler\" />\n   * <tableau-authoring-viz id=\"tableauViz\" onEditInDesktopButtonClicked=\"onEditInDesktopButtonClickedHandler\" />\n   * ```\n   */\n  onEditInDesktopButtonClicked?: string;\n\n  /**\n   * An event raised when the size of the viz is known. You can use this event to perform tasks such as resizing\n   * the elements surrounding the Viz object once the object's size has been established.\n   * ```\n   * <tableau-viz id=\"tableauViz\" \"onFirstVizSizeKnown\"=\"onFirstVizSizeKnownHandler\" />\n   * <tableau-authoring-viz id=\"tableauViz\" onFirstVizSizeKnown=\"onFirstVizSizeKnownHandler\" />\n   * ```\n   */\n  onFirstVizSizeKnown?: string;\n\n  /**\n   * An event raised when the Viz object first becomes interactive. This is only raised once.\n   * ```\n   * <tableau-viz id=\"tableauViz\" \"onFirstInteractive\"=\"onFirstInteractiveHandler\" />\n   * <tableau-authoring-viz id=\"tableauViz\" onFirstInteractive=\"onFirstInteractiveHandler\" />\n   * ```\n   */\n  onFirstInteractive?: string;\n}\n\n/**\n * The options for configuring a viz in view mode.\n */\nexport interface VizSettings extends VizSettingsShared {\n  /**\n   * Indicates whether to suppress the execution of URL actions. This option does not prevent the URL action\n   * event from being raised. You can use this option to change what happens when a URL action occurs. If set\n   * to true and you create an event listener for the URL_ACTION event, you can use an event listener\n   * handler to customize the actions.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\" disable-url-actions />\n   * ```\n   */\n  disableUrlActionsPopups?: boolean;\n\n  /**\n   * Indicates whether tabs are hidden or shown.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\"  hide-tabs />\n   * ```\n   */\n  hideTabs?: boolean;\n\n  /**\n   * Specifies the position of the toolbar, if it is shown. The values can be Toolbar.Top,\n   * Toolbar.Bottom or Toolbar.Hidden.\n   * If not specified, defaults to Toolbar.Bottom.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\"  toolbar=\"hidden\" />\n   * ```\n   */\n  toolbar?: Toolbar;\n\n  /**\n   * Specifies a device layout for a dashboard, if it exists.\n   * Values can be default, desktop, tablet, or phone.\n   * If not specified, defaults to loading a layout based on the\n   * smallest dimension of the hosting iframe element.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\"  device=\"desktop\" />\n   * ```\n   */\n  device?: DeviceType;\n\n  /**\n   * Specifies the ID of an existing instance to make a copy (clone) of.\n   * This is useful if the user wants to continue analysis of an existing visualization\n   * without losing the state of the original. If the ID does not refer to an existing visualization,\n   * the cloned version is derived from the original visualization.\n   *\n   * ```\n   * <tableau-viz id=\"tableauViz\"  instance-id-to-clone=\"id1\" />\n   * ```\n   */\n  instanceIdToClone?: string;\n\n  /**\n   * Indicates whether the Edit button is hidden or visible.\n   * If not set, defaults to false, meaning that the Edit button is visible.\n   * ```\n   * <tableau-viz id=\"tableauViz\" hide-edit-button>\n   * ```\n   */\n  hideEditButton?: boolean;\n\n  /**\n   * An event raised when the user clicks on the Edit Button.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onEditButtonClicked=\"onEditButtonClickedHandler\" />\n   * ```\n   */\n  onEditButtonClicked?: string;\n\n  /**\n   * An event raised when any filter has changed state. You can use this event type with TableauViz objects.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onFilterChanged=\"onFilterChangedHandler\" />\n   * ```\n   */\n  onFilterChanged?: string;\n\n  /**\n   * An event raised when a custom mark context menu is clicked.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onCustomMarkContextMenuEvent=\"onCustomMarkContextMenuEventHandler\" />\n   * ```\n   */\n  onCustomMarkContextMenuEvent?: string;\n\n  /**\n   * An event raised when the selected marks on a visualization have changed. You can use this event type with TableauViz objects.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onMarkSelectionChanged=\"onMarkSelectionChangedHandler\" />\n   * ```\n   */\n  onMarkSelectionChanged?: string;\n\n  /**\n   * An event raised when a parameter has had its value modified. You can use this event type with [[Parameter]] objects.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onParameterChanged=\"onParameterChangedHandler\" />\n   * ```\n   */\n  onParameterChanged?: string;\n\n  /**\n   * An event raised when a toolbar button or control becomes available or becomes unavailable.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onToolbarStateChanged=\"onToolbarStateChangedHandler\" />\n   * ```\n   */\n  onToolbarStateChanged?: string;\n\n  /**\n   * An event raised when a URL action occurs. See the {@link UrlActionEvent} class.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onUrlAction=\"onUrlActionHandler\" />\n   * ```\n   */\n  onUrlAction?: string;\n\n  /**\n   * An event raised after a tab switch occurs (the active sheet has changed). Guarantees the viz object will be interactive after this.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onTabSwitched=\"onTabSwitchedHandler\" />\n   * ```\n   */\n  onTabSwitched?: string;\n\n  /**\n   * An event raised when a custom view has finished loading. This event is raised after the callback\n   * function for {@link FirstInteractive} (if any) has been called.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onCustomViewLoaded=\"onCustomViewLoadedHandler\" />\n   * ```\n   */\n  onCustomViewLoaded?: string;\n\n  /**\n   * An event raised when a custom view has been removed.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onCustomViewRemoved=\"onCustomViewRemovedHandler\" />\n   * ```\n   */\n  onCustomViewRemoved?: string;\n\n  /**\n   * An event raised when a custom view has been saved (newly created or updated).\n   * ```\n   * <tableau-viz id=\"tableauViz\" onCustomViewSaved=\"onCustomViewSavedHandler\" />\n   * ```\n   */\n  onCustomViewSaved?: string;\n\n  /**\n   * An event raised when a custom view has been set as the default view for a workbook.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onCustomViewSetDefault=\"onCustomViewSetDefaultHandler\" />\n   * ```\n   */\n  onCustomViewSetDefault?: string;\n\n  /**\n   * An event raised after a new story point becomes active.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onStoryPointSwitched=\"onStoryPointSwitchedHandler\" />\n   * ```\n   */\n  onStoryPointSwitched?: string;\n\n  /**\n   * An event raised when the summary data on a visualization have changed. You can use this event type with TableauViz objects.\n   * ```\n   * <tableau-viz id=\"tableauViz\" onSummaryDataChanged=\"onSummaryDataChangedHandler\" />\n   * ```\n   */\n  onSummaryDataChanged?: string;\n}\n\n/**\n * (Beta) Represents the options for configuring a viz in authoring mode.\n */\nexport interface VizAuthoringSettings extends VizSettingsShared {\n  /**\n   * Indicates whether the Close button is hidden or visible.\n   * If not set, defaults to false, meaning that the Close button is visible.\n   * ```\n   * <tableau-authoring-viz id=\"tableauViz\" hide-close-button />\n   * ```\n   */\n  hideCloseButton?: boolean;\n\n  /**\n   * An event raised when the workbook has been published. This notification is sent when using embedded web authoring functionality.\n   * ```\n   * <tableau-authoring-viz id=\"tableauViz\" onWorkbookPublished=\"onWorkbookPublishedHandler\" />\n   * ```\n   */\n  onWorkbookPublished?: string;\n\n  /**\n   * An event raised when \"publish as\" is successful. This notification is sent when using embedded web authoring functionality.\n   * ```\n   * <tableau-authoring-viz id=\"tableauViz\" onWorkbookPublishedAs=\"onWorkbookPublishedAsHandler\" />\n   * ```\n   */\n  onWorkbookPublishedAs?: string;\n\n  /**\n   * An event raised when the workbook is ready to close. This notification is sent when using embedded web authoring functionality.\n   * ```\n   * <tableau-authoring-viz id=\"tableauViz\" onWorkbookReadyToClose=\"onWorkbookReadyToCloseHandler\" />\n   * ```\n   */\n  onWorkbookReadyToClose?: string;\n}\n\nexport interface FilterParameters {\n  field: string;\n  value: string;\n}\n\n/**\n * VizParameters are used to set Parameter values on the viz.\n *\n * * ```\n * <tableau-viz id=\"tableauViz\">\n *  <viz-parameter name=\"parameter-name\" value=\"parameter-value\"></viz-parameter>\n * </tableau-viz>\n * ```\n *\n */\nexport interface VizParameter {\n  /**\n   * Name of the parameter to be set.\n   */\n  name: string;\n\n  /**\n   * Valid value for the parameter being set.\n   */\n  value: string;\n}\n\n/**\n * CustomParameters are used to pass along settings, information, etc., that aren't exposed on the\n * tableau-viz element. CustomParameters will override attributes, or filters, set on the tableau-viz element.\n *\n * * ```\n * <tableau-viz id=\"tableauViz\">\n *  <custom-parameter name=\"parameter-name\" value=\"parameter-value\"></custom-parameter>\n * </tableau-viz>\n * ```\n *\n */\nexport interface CustomParameter {\n  /**\n   * Name of the parameter to be set.\n   */\n  name: string;\n\n  /**\n   * Valid value for the parameter being set.\n   */\n  value: string;\n}\n\n/**\n * Configuration object for exporting data.\n */\nexport interface ExportDataOptions {\n  /**\n   * Do not use aliases specified in the data source in Tableau. Default is false.\n   */\n  ignoreAliases?: boolean;\n  /**\n   * The columns to include specified by field id, includes all by default.\n   * The order of the column ids in the array determines the column order shown in the summary data table.\n   */\n  columnsToIncludeById?: Array<string>;\n}\n\nexport interface ExportPDFOptions {\n  scaling: PrintScaling;\n  pageSize: PrintPageSize;\n  orientation: PrintOrientation;\n}\n\nexport interface ExportScenariosForPDFAndPowerPoint {\n  currentSheetName: string;\n  exportableSheetNamesFromDashboard: Array<string>;\n  exportableSheetNamesFromWorkbook: Array<string>;\n}\n"]}