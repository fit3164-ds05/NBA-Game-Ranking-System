{"version":3,"file":"EventInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Embedding/EventInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { VizSize } from '../Embedding/VizInterfaces';\nimport { Filter } from '../Shared/FilterInterfaces';\nimport { MarksCollection } from '../Shared/SelectionInterfaces';\nimport { EmbeddingErrorCodes, PulseErrorMessageVisibility, PulseTimeDimension } from './Enums';\nimport { Parameter } from './ParameterInterfaces';\nimport { PulseFilter } from './PulseInterfaces';\nimport { Sheet, Worksheet } from './SheetInterfaces';\nimport { StoryPoint, StoryPointInfo } from './StoryInterfaces';\nimport { CustomView } from './WorkbookInterface';\n\n/**\n * Initial event which is triggered as soon as the viz size is known\n */\nexport interface FirstVizSizeKnownEvent {\n  readonly vizSize: VizSize;\n}\n\n/**\n * Initial event which is triggered as soon as the Pulse Metric size is known\n */\nexport interface FirstPulseMetricSizeKnownEvent {\n  /**\n   * The width in pixels of the Pulse Metric.\n   */\n  readonly width: number;\n\n  /**\n   * The height in pixels of the Pulse Metric.\n   */\n  readonly height: number;\n}\n\n/**\n * An event which is related to a particular Sheet (worksheet, dashboard, story) in the workbook.\n */\nexport interface TableauSheetEvent {\n  /**\n   * @returns  The sheet which was the source of this event.\n   */\n  readonly sheet: Sheet;\n}\n\n/**\n * An event which is related to a particular Worksheet in the workbook.\n */\nexport interface TableauWorksheetEvent extends TableauSheetEvent {\n  /**\n   * @returns  The worksheet which was the source of this event.\n   */\n  readonly worksheet: Worksheet;\n}\n\n/**\n * An event which is raised when marks are selected on a worksheet.\n */\nexport interface MarksSelectedEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  The collection of Marks that were selected.\n   */\n  getMarksAsync(): Promise<MarksCollection>;\n}\n\n/**\n * An event which is raised when summary data is changed for a worksheet or when a worksheet's data source is refreshed.\n *\n * @experimental\n */\nexport interface SummaryDataChangedEvent extends TableauWorksheetEvent {}\n\n/**\n * An event which is raised when an embedded custom context menu item is clicked.\n */\nexport interface CustomMarkContextMenuEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  Id of clicked embedded menu item.\n   */\n  getContextMenuId(): string;\n  /**\n   * @returns  The collection of Marks that were selected.\n   */\n  getSelectedMarksAsync(): Promise<MarksCollection>;\n}\n\nexport interface FilterChangedEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  The name of the field being filtered.\n   */\n  readonly fieldName: string;\n\n  /**\n   * @returns  The Filter object associated with the event.\n   */\n  getFilterAsync(): Promise<Filter>;\n}\n\n/**\n * An event which is raised when the value of a parameter changes.\n */\nexport interface ParameterChangedEvent {\n  /**\n   * @returns  The parameter that was changed.\n   */\n  getParameterAsync(): Promise<Parameter>;\n}\n\n/**\n * An event which is raised when a toolbar button or control becomes available or becomes unavailable.\n */\nexport interface ToolbarStateChangedEvent {\n  /**\n   * Gets the staus of Redo button in the toolbar.\n   */\n  readonly canRedo: boolean;\n\n  /**\n   * Gets the staus of Undo button in the toolbar.\n   */\n  readonly canUndo: boolean;\n}\n\n/**\n * An event which is raised when the workbook is published using embedded web authoring.\n *\n * @category Authoring\n */\nexport interface WorkbookPublishedAsEvent {\n  /**\n   * @returns  The URL of the newly saved workbook.\n   */\n  readonly newUrl: string;\n}\n\n/**\n * An event that can signal when a URL action occurs.\n *\n * ```\n * function urlActionEventHandler(event) {\n *     console.log('URL: ' + event.detail.url);\n *     console.log('Target: ' + event.detail.target);\n * }\n *\n * let viz = document.getElementById('tableauViz');\n * viz.addEventListener(TableauEventType.UrlAction, urlActionEventHandler);\n * ```\n */\nexport interface UrlActionEvent {\n  /**\n   * @returns The URL associated with the event.\n   */\n  readonly url: string;\n\n  /**\n   * @returns The target attribute associated with URL (for example, the identifier associated with a browser tab).\n   */\n  readonly target: string;\n}\n\n/**\n * An event that signals when a user selects a different tab in a workbook.\n */\nexport interface TabSwitchedEvent {\n  /**\n   * @returns The name of the sheet that was active before the tab switch event occurred.\n   */\n  readonly oldSheetName: string;\n\n  /**\n   * @returns The name of the sheet that is active after the tab switch event.\n   */\n  readonly newSheetName: string;\n}\n\n/**\n * An event which is raised when there are changes to a custom view.\n */\nexport interface CustomViewEvent {\n  /**\n   * @returns The {@link CustomView} object associated with the event.\n   */\n  readonly customView: CustomView;\n}\n\n/**\n * An event that signals when a different story point is selected in a story.\n */\nexport interface StoryPointSwitchedEvent {\n  /**\n   * @return The {@link StoryPointInfo} that was active before the story point switch event occurred. The returned object reflects the state of the story point before the switch occurred.\n   */\n  readonly oldStoryPointInfo: StoryPointInfo;\n\n  /**\n   * @return The {@link StoryPoint} that is currently active.\n   */\n  readonly newStoryPoint: StoryPoint;\n}\n\n/**\n * An event that signals an error while loading the webcomponent.\n */\nexport interface VizLoadErrorEvent {\n  /**\n   * @return The error message\n   */\n  readonly message: string;\n\n  /**\n   * @return The error code\n   */\n  readonly errorCode: EmbeddingErrorCodes;\n}\n\n/**\n * Event which is triggered when the Pulse filters change\n */\nexport interface PulseFiltersChangedEvent {\n  /**\n   * The names of the fields being filtered\n   */\n  readonly fieldNames: Array<string>;\n\n  /**\n   * @returns The PulseFilter array associated with the event containing the filters that were changed\n   */\n  getFiltersAsync(): Promise<Array<PulseFilter>>;\n}\n\n/**\n * Event which is triggered when a Pulse Insight is discovered\n */\nexport interface PulseInsightDiscoveredEvent {\n  /**\n   * The insight id\n   */\n  readonly id: string;\n\n  /**\n   * The insight characterization\n   */\n  readonly characterization: string;\n\n  /**\n   * The HTML markup for the insight\n   */\n  readonly markup: string;\n\n  /**\n   * The insight question asked\n   */\n  readonly question: string;\n\n  /**\n   * The insight score\n   */\n  readonly score: number;\n\n  /**\n   * The insight type\n   */\n  readonly type: string;\n\n  /**\n   * The insight version\n   */\n  readonly version: number;\n}\n\n/**\n * Event which is triggered when the Pulse metric time dimension changes\n */\nexport interface PulseTimeDimensionChangedEvent {\n  readonly timeDimension: PulseTimeDimension;\n}\n\n/**\n * Event which is triggered when Pulse navigates to a new URL inside the embedded iframe\n */\nexport interface PulseUrlChangedEvent {\n  /**\n   * The old URL before it changed.\n   */\n  readonly oldUrl: string;\n\n  /**\n   * The new URL after it changed.\n   */\n  readonly newUrl: string;\n\n  /**\n   * Additional context that describes why the URL changed e.g. 'session-expired'\n   */\n  readonly context: string | undefined;\n}\n\n/**\n * Event which is triggered when an internal Pulse error is encountered.\n */\nexport interface PulseErrorEvent {\n  /**\n   * The error message.\n   * If the error popup is visible, this is the message it shows.\n   * If the error popup is hidden, this is the message it would have shown.\n   * If the error popup is suppressed, this message would not have been shown to the user at all.\n   */\n  readonly message: string;\n\n  /**\n   * The HTTP status code of the failing API call that caused the error.\n   */\n  readonly httpStatus: number;\n\n  /**\n   * The visibility state of the error message popup.\n   * If the error popup was shown to the user, the value is 'visible'.\n   * If the error popup was hidden by the page embedding the metric, the value is 'hidden'.\n   * If the error popup was hidden by Pulse due to the error not needing to be shown to the user, the value is 'suppressed'.\n   */\n  readonly messageVisibility: PulseErrorMessageVisibility;\n}\n"]}