{"version":3,"file":"Extensions.js","sourceRoot":"","sources":["../../../../../src/ExternalContract/Extensions/Namespaces/Extensions.ts"],"names":[],"mappings":"","sourcesContent":["import { Workbook } from '../WorkbookInterfaces';\nimport { DashboardContent } from './DashboardContent';\nimport { Environment } from './Environment';\nimport { Settings } from './Settings';\nimport { UI } from './UI';\nimport { WorksheetContent } from './WorksheetContent';\n\n/**\n * The extension namespace contains all functionality available to\n * Extensions in Tableau.\n */\nexport interface Extensions {\n  /**\n   * This is the entry point for an Extension.  This function must first be called\n   * in order to interact with any of the other Extension APIs.\n   *\n   * @param    contextMenuCallbacks This optional object maps the ids of context menu items to the function\n   *                                to be triggered when that context menu item is selected. The keys listed\n   *                                must matched the keys registered in the `context-menu` element of the manifest.\n   *                                Currently, only a single context menu item is available (`'configure'`)\n   *                                that creates the **Configure...** menu item), so this object will only contain a single entry.\n   *                                In this example, the `'configure'` key is mapped to a function of the same name,\n   *                                which you would define in your JavaScript code.\n   *\n   *  ```\n   *   $(document).ready(function () {\n   *     tableau.extensions.initializeAsync({'configure': configure}).then(function() {\n   *     // When the user clicks the Configure... context menu item,\n   *     // the configure function specified as the argument here\n   *     // is executed.\n   *     //\n   *    });\n   *   });\n   *  ```\n   *\n   * @returns  A promise that when resolved, the other Extension APIs will be available to use.\n   */\n  initializeAsync(contextMenuCallbacks?: { [key: string]: () => {} }): Promise<void>;\n\n  /**\n   * The `initializeDialogAsync` function is the entry point for an extension that runs inside a dialog box (or popup window)\n   * created by the UI namespace. A call to `tableau.extensions.ui.displayDialogAsync(payload)` creates the dialog box.\n   * When the extension running in the dialog box loads, the extension must first call the `initializeDialogAsync` function\n   * to use the rest of the Extension API. The `initializeDialogAsync` function should only be called by extensions\n   * that are displayed in a dialog box. You use the `initializeAsync` function\n   * to initialize the main extension, that is, the parent of the extension in the dialog box.\n   *\n   * @returns  A promise that when resolved the other Extension APIs will be available to use.\n   *           Contains a string that is the initial payload for the dialog as sent by the\n   *           parent extension via `tableau.extensions.ui.displayDialogAsync(payload)`.\n   *           See [displayDialogAsync](./ui.html#displaydialogasync) for more information.\n   */\n  initializeDialogAsync(): Promise<string>;\n\n  /**\n   * The `dashboardContent` namespace provides access to the dashboard object when the extension is a dashboard extension.\n   * When you have the dashboard object, you have access to all elements in the [dashboard](./dashboard.html)\n   * including the [worksheets](./dashboard.html#worksheets), [marks](./markscollection.html),\n   * [filters](./filter.html), [parameters](./parameter.html), and [data sources](./datasource.html).\n   * To access the objects in this name space, specify `tableau.extensions.dashboardContent`.\n   * @category Dashboard Extensions\n   */\n  dashboardContent?: DashboardContent;\n\n  /**\n   * The `worksheetContent` namespace provides access to the worksheet when the extension is a worksheet extension.\n   * When you have the worksheet object, you have access to all elements in the [worksheet](./worksheet.html)\n   * To access the objects in this name space, specify `tableau.extensions.worksheetContent`.\n   * @category Viz Extensions\n   * @since 1.12.0 and Tableau 2024.2\n   */\n  worksheetContent?: WorksheetContent;\n\n  /**\n   * The `environment` namespace provides methods to programmatically gather information about the environment\n   * in which the extension is running. To access the objects in this name space, specify\n   * `tableau.extensions.environment`.\n   */\n  environment: Environment;\n\n  /**\n   * The `settings` namespace provides methods to get and set values which will be persisted in a workbook.\n   * You can use the settings to configure an extension. To access the objects in this name space, specify\n   * `tableau.extensions.settings`.\n   */\n  settings: Settings;\n\n  /**\n   * The `ui` namespace  provides methods for an extension to display a popup dialog window.\n   * To access the objects in this name space, specify `tableau.extensions.ui`.\n   */\n  ui: UI;\n\n  /**\n   * The currently opened workbook.\n   * @since 1.6.0 and Tableau 2021.3\n   */\n  workbook: Workbook;\n\n  /**\n   * The dashboard object id for the extension that is running.\n   * @since 1.7.0\n   * @category Dashboard Extensions\n   */\n  dashboardObjectId: number;\n\n  /**\n   * @param inputSpec the object containing the embedded data and visual spec details\n   *\n   * ```\n   *    tableau.extensions.createVizImageAsync(myInputSpec));\n   * ```\n   *\n   * The following is an example of an input spec object.\n   * ```\n   * var myInputSpec = {\n   *       description: 'A simple bar chart with embedded data.',\n   *       data: {\n   *           values: [\n   *               { Category: 'A', Measure: 28, Weather: 10 },\n   *               { Category: 'B', Measure: 55, Weather: 9 },\n   *               { Category: 'C', Measure: 43, Weather: 8 },\n   *           ]\n   *       },\n   *       mark: tableau.MarkType.Bar,\n   *       encoding: {\n   *           columns: { field: 'Category', type: tableau.VizImageEncodingType.Discrete },\n   *           rows: { field: 'Measure', type: tableau.VizImageEncodingType.Continuous },\n   *           sort: { field: 'Category', 'sortby': 'Weather', direction: tableau.VizImageSortDirectionType.Ascending }\n   *       }\n   *  };\n   * ```\n   *  @returns  A promise that when resolved, returns the viz as an svg.\n   *\n   *  Supports sorting by field.\n   *  @since 1.8.0 and Tableau 2021.4\n   *\n   * For additional information on using the `createVizImageAsync` method,\n   * see [Add Tableau Viz to Your Dashboard Extensions](https://tableau.github.io/extensions-api/docs/trex_tableau_viz.html).\n   *\n   * For additional information about setting options in the `inputSpec` object,\n   * see [Tableau Viz Reference](https://tableau.github.io/extensions-api/docs/trex_tableau_viz_ref.html).\n   */\n  createVizImageAsync(inputSpec: object): Promise<string>;\n\n  /**\n   * This method allows for clicks to pass through the extension window on Tableau Server.\n   *\n   * @param clickThroughEnabled A boolean which represents if clicks should pass through the extension window\n   * @since 1.7.0 and Tableau 2021.4\n   *\n   * @returns A promise that resolves when the click through property has been set.\n   *\n   * The following example shows a call made to setClickThroughAsync.\n   *\n   * ```\n   *    // disabling pointer events on the extension window\n   *    tableau.extensions.setClickThroughAsync(true).then(() => {\n   *     console.log('Successfully enabled extension window click through');\n   *    }).catch((error) => {\n   *     // Can throw an error if called from a dialog or on Tableau Desktop\n   *       console.error(error.message);\n   *     });\n   * ```\n   * @category Dashboard Extensions\n   */\n  setClickThroughAsync(clickThroughEnabled: boolean): Promise<void>;\n}\n"]}