{"version":3,"file":"EventInterface.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Extensions/EventInterface.ts"],"names":[],"mappings":"","sourcesContent":["import { Filter } from '../Shared/FilterInterfaces';\nimport { DashboardLayoutChange } from '../Shared/Namespaces/Tableau';\nimport { MarksCollection } from '../Shared/SelectionInterfaces';\nimport { WorkbookFormatting, WorksheetFormatting } from '../Shared/WorkbookFormattingInterfaces';\nimport { TableauEventType } from './Namespaces/Tableau';\nimport { Parameter } from './ParameterInterfaces';\nimport { Sheet, Worksheet } from './SheetInterfaces';\n\n/**\n * An event which is related to a particular Worksheet in the workbook.\n */\nexport interface TableauWorksheetEvent extends TableauSheetEvent {\n  /**\n   * @returns  The worksheet which was the source of this event.\n   */\n  readonly worksheet: Worksheet;\n}\n\n/**\n * An event which is raised when marks are selected on a worksheet.\n */\nexport interface MarksSelectedEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  The collection of Marks that were selected.\n   */\n  getMarksAsync(): Promise<MarksCollection>;\n}\n\n/**\n * An event which is raised when summary data is changed for a worksheet or when a worksheet's data source is refreshed\n *\n * @since 1.11.0 and Tableau 2024.1\n */\nexport interface SummaryDataChangedEvent extends TableauWorksheetEvent {}\n\n/**\n * An event which is related to a particular Sheet (worksheet, dashboard, story) in the workbook.\n */\nexport interface TableauSheetEvent extends TableauEvent {\n  /**\n   * @returns  The sheet which was the source of this event.\n   */\n  readonly sheet: Sheet;\n}\n\nexport interface FilterChangedEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  The name of the field being filtered.\n   */\n  readonly fieldName: string;\n\n  /**\n   * @returns  The Filter object associated with the event.\n   */\n  getFilterAsync(): Promise<Filter>;\n}\n\n/**\n * An event which is related to a workbook's formatting (worksheet, dashboard, story) in the workbook.\n */\nexport interface WorkbookFormattingChangedEvent extends TableauEvent {\n  /**\n   * @returns  The new extension formatting\n   */\n  readonly formatting: WorkbookFormatting;\n}\n\n/**\n * An event raised when the worksheet's formatting changes.\n * Note that this event is also raised when the workbook's formatting changes.\n * @since 1.13 and Tableau 2025.1\n */\nexport interface WorksheetFormattingChangedEvent extends TableauWorksheetEvent {\n  /**\n   * @returns  The new formatting\n   */\n  readonly formatting: WorksheetFormatting;\n}\n\n/** An event object represents a notification that some sort of state has changed.\n * This is the base event interface. All events will inherit this type.\n */\nexport interface TableauEvent {\n  /**\n   * @returns  The type of event which this class is representing.\n   */\n  readonly type: TableauEventType;\n}\n\n/**\n * An event which is raised when the value of a parameter changes.\n */\nexport interface ParameterChangedEvent extends TableauEvent {\n  /**\n   * @returns  The parameter that was changed.\n   */\n  getParameterAsync(): Promise<Parameter>;\n}\n\n/**\n * An event which is raised when the settings of an extension are updated.\n * Should be listened for directly from the `tableau.extensions.settings` object.\n */\nexport interface SettingsChangedEvent extends TableauEvent {\n  /**\n   * @returns the new settings that were recently saved.\n   */\n  readonly newSettings: { [key: string]: string };\n}\n\n/**\n * An event which is raised when the dashboard objects are modified.\n * Should be listened for directly from the `tableau.extensions.dashboardContent.dashboard` object.\n *\n * @since 1.7.0 and Tableau 2021.4\n * @category Dashboard Extensions\n */\nexport interface DashboardLayoutChangedEvent extends TableauEvent {\n  /**\n   * @returns a map of dashboard object id's to an array of dashboard object layout changes\n   */\n  readonly dashboardLayoutChangeDetails: DashboardLayoutChangeDetails;\n}\n\n/**\n * Map object that is used for the DashboardLayoutChangedEvent.\n * @category Dashboard Extensions\n */\nexport declare type DashboardLayoutChangeDetails = Map<number, Array<DashboardLayoutChange>>;\n\n/**\n * Callback function which will be invoked when an event notification is emitted.\n *\n * @param event  Class representing the event which occurred.\n */\nexport type TableauEventHandlerFn = (event: TableauEvent) => void;\n\n/**\n * Function which can be invoked to remove an event handler registration. This will be\n * returned when registering an event and makes unregistering simpler.\n *\n * @returns  Whether or not the unregistration was successful.\n */\nexport type TableauEventUnregisterFn = () => boolean;\n\n/**\n * Interface for handling registering and unregistering event listeners. Different objects will implement\n * this interface to manage their event handling.\n */\nexport interface EventListenerManager {\n  /**\n   * Adds a new event listener to the object. If this object does not support the specified `eventType`,\n   * the method throws an exception.\n   * The following table shows the event types supported by objects.\n   *\n   * | object | eventType |\n   * | ------  | ----- |\n   * | [Worksheet](worksheet.html) | `FilterChanged` , `MarkSelectionChanged`, `SummaryDataChanged`, `WorksheetFormattingChanged` |\n   * | [[Parameter]] | `ParameterChanged` |\n   * | [[Settings]]  |  `SettingsChanged` |\n   * | [Dashboard](dashboard.html) |  `DashboardLayoutChanged`, `WorkbookFormattingChanged` |\n   *\n   * @param eventType  The type of event to register for. The type of event is a `TableauEventType` enumeration.\n   * @param handler    The function which will be called when an event happens.\n   * @returns          A helper function which can be called to remove this registration.\n   *\n   * The following example sets up a listener in a worksheet for a mark selection event (`MarkSelectionChanged`).\n   * When the event occurs, the data is reloaded. The `addEventListener` method returns a function that un-registers\n   * the event handler. Call that function, in this case, `unregisterEventHandlerFunction()` to remove the registration.\n   *\n   * ```\n   * // Add an event listener for the selection changed event on this sheet.\n   * // Assigning the event to a variable just to make the example fit on the page here.\n    const markSelection = tableau.TableauEventType.MarkSelectionChanged;\n     //\n    unregisterEventHandlerFunction = worksheet.addEventListener(markSelection, function (selectionEvent) {\n    // When the selection changes, reload the data\n        loadSelectedMarks(worksheetName);\n    });\n   *\n   * // remove the event listener when done\n   *  unregisterEventHandlerFunction();\n   *\n   * ```\n   *\n   */\n  addEventListener(eventType: TableauEventType, handler: TableauEventHandlerFn): TableauEventUnregisterFn;\n\n  /**\n   * Removes an event listener if a matching one is found. If no matching listener exists, the method does nothing.\n   * The handler function must the handler function specified in the call to the `addEventListener` method. Alternatively, use the function\n   * returned from the call to `addEventListener` to unregister the event listener.\n   * For more information, see [Events and Event Handling](../trex_events.html).\n   *\n   * @returns  Whether or not an event listener was removed.\n   */\n  removeEventListener(eventType: TableauEventType, handler: TableauEventHandlerFn): boolean;\n}\n"]}