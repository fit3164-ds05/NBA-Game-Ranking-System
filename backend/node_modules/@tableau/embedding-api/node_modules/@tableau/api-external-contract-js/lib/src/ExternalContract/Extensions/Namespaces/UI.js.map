{"version":3,"file":"UI.js","sourceRoot":"","sources":["../../../../../src/ExternalContract/Extensions/Namespaces/UI.ts"],"names":[],"mappings":"","sourcesContent":["import { DialogStyle } from '../../Shared/Namespaces/Tableau';\n\n/**\n * The UI namespace contains methods that allow an extension to display a popup\n * dialog window. A modal dialog can be useful in authentication or configuration scenarios,\n * or when extra situational UI space is needed. Only one dialog can be displayed at a time per extension.\n * Inside the popup dialog window, another extension can be loaded and run. This *dialog extension* will have full access\n * to the functions provided by the Extensions API. One difference between the extension running in the popup dialog window\n * and an extension running in the dashboard is that the popup dialog window must call\n * the `initializeDialogAsync()` method instead of `initializeAsync()` to initialize the extension.\n *\n * **Note** If you want to use a popup dialog window on Tableau Server, you need to let users know that their browser must be\n *  configured to allow popups.\n */\nexport interface UI {\n  /**\n   * @param url           The url of the 'dialog extension' to navigate to in the dialog. The url must\n   *                      belong to the same domain as the parent extension.\n   * @since 1.3.0         A relative path may be used beginning with Tableau 2019.3 and version 1.3.0 of the Extensions API library.\n   *                      The relative path must resolve to the directory, or a child directory, of the extension.\n   *                      Root-relative paths are not allowed. For example, `./config.html` or `config.html` are allowed,\n   *                      but not the root-relative path `/config.html`.\n   *                      **Note** If your extension is meant for use in versions of Tableau prior to 2019.3,\n   *                      you should use an absolute url.\n   * @param payload       The `payload` is optional, and is used to provide data to the popup dialog window\n   *                      at startup. The `payload` will be returned to the dialog extension as the return\n   *                      value of the call to the `tableau.extensions.ui.initializeDialogAsync` function.\n   *                      If no `payload` is provided, you must indicate this with an empty string `\" \"`.\n   * @param dialogOptions Specifies the options for the popup dialog window.\n   *                      The `dialogOptions` has properties for width and height (in pixels) and a property for the dialog's style.\n   *                      The dialog style can be a window, a modal dialog, or a modeless dialog. If style is not specified, window will be used.\n   *                      You pass these properties to the `displayDialogAsync` function, as follows:\n   *                      `{width:` *number*`, height:` *number*`, dialogStyle:` *DialogStyle*`}`\n   *\n   *\n   * @returns A promise that resolves when the dialog has been closed. It will contain a\n   *          payload as a string provided by the dialog extension. The promise is rejected if\n   *          the user manually closes the dialog window (for example, by clicking the 'X' in window).\n   *          It is good practice to handle this error condition with a catch block, as in the following example.\n   *\n   *  ```\n   *   tableau.extensions.ui.displayDialogAsync(popupUrl, defaultPayload, { width: 500, height: 500 }).then((closePayload) => {\n   *     //\n   *     // The promise is resolved when the dialog has been closed as expected, meaning that\n   *     // the popup extension has called tableau.extensions.ui.closeDialog() method.\n   *     // The close payload (closePayload) is returned from the popup extension\n   *     // via the closeDialog() method.\n   *     //\n   *    }).catch((error) => {\n   *     // One expected error condition is when the popup is closed by the user (meaning the user\n   *     // clicks the 'X' in the top right of the dialog). This can be checked for like so:\n   *       switch(error.errorCode) {\n   *         case tableau.ErrorCodes.DialogClosedByUser:\n   *           console.log(\"Dialog was closed by user\");\n   *           break;\n   *         default:\n   *       console.error(error.message);\n   *       }\n   *     });\n   *  ```\n   *\n   */\n  displayDialogAsync(url: string, payload?: string, dialogOptions?: DialogOptions): Promise<string>;\n\n  /**\n   * The `closeDialog` method must be called from extension running in the popup dialog window.\n   *\n   * @param payload The `payload` is optional, and if specified, it is made available to parent extension when\n   *                this popup dialog closes. If the extension running in the popup dialog window does not return\n   *                a payload, you must still provide an empty string `\" \"` as a return value.\n   *\n   * ```\n   *    tableau.extensions.ui.closeDialog('myPayload string');\n   *\n   * ```\n   * The following example shows a call to the closeDialog method when the dialog extension does not return a payload.\n   *\n   * ```\n   *    // specify an empty string if no payload is returned\n   *    tableau.extensions.ui.closeDialog('');\n   * ```\n   *\n   */\n  closeDialog(payload?: string): void;\n}\n\nexport interface DialogOptions {\n  /** Specifies the suggested width (in pixels) of dialog to display.  Not guaranteed to be exactly that width. */\n  readonly width?: number;\n  /** Specifies the suggested height (in pixels) of the popup dialog.  Not guaranteed to be exactly that height. */\n  readonly height?: number;\n  /**\n   * Specifies the style for the popup dialog.\n   * @since 1.10.0 and Tableau 2022.4\n   */\n  readonly dialogStyle?: DialogStyle;\n}\n"]}