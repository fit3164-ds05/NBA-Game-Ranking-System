import { VizSize } from '../Embedding/VizInterfaces';
import { Filter } from '../Shared/FilterInterfaces';
import { MarksCollection } from '../Shared/SelectionInterfaces';
import { EmbeddingErrorCodes, PulseErrorMessageVisibility, PulseTimeDimension } from './Enums';
import { Parameter } from './ParameterInterfaces';
import { PulseFilter } from './PulseInterfaces';
import { Sheet, Worksheet } from './SheetInterfaces';
import { StoryPoint, StoryPointInfo } from './StoryInterfaces';
import { CustomView } from './WorkbookInterface';
/**
 * Initial event which is triggered as soon as the viz size is known
 */
export interface FirstVizSizeKnownEvent {
    readonly vizSize: VizSize;
}
/**
 * Initial event which is triggered as soon as the Pulse Metric size is known
 */
export interface FirstPulseMetricSizeKnownEvent {
    /**
     * The width in pixels of the Pulse Metric.
     */
    readonly width: number;
    /**
     * The height in pixels of the Pulse Metric.
     */
    readonly height: number;
}
/**
 * An event which is related to a particular Sheet (worksheet, dashboard, story) in the workbook.
 */
export interface TableauSheetEvent {
    /**
     * @returns  The sheet which was the source of this event.
     */
    readonly sheet: Sheet;
}
/**
 * An event which is related to a particular Worksheet in the workbook.
 */
export interface TableauWorksheetEvent extends TableauSheetEvent {
    /**
     * @returns  The worksheet which was the source of this event.
     */
    readonly worksheet: Worksheet;
}
/**
 * An event which is raised when marks are selected on a worksheet.
 */
export interface MarksSelectedEvent extends TableauWorksheetEvent {
    /**
     * @returns  The collection of Marks that were selected.
     */
    getMarksAsync(): Promise<MarksCollection>;
}
/**
 * An event which is raised when summary data is changed for a worksheet or when a worksheet's data source is refreshed.
 *
 * @experimental
 */
export interface SummaryDataChangedEvent extends TableauWorksheetEvent {
}
/**
 * An event which is raised when an embedded custom context menu item is clicked.
 */
export interface CustomMarkContextMenuEvent extends TableauWorksheetEvent {
    /**
     * @returns  Id of clicked embedded menu item.
     */
    getContextMenuId(): string;
    /**
     * @returns  The collection of Marks that were selected.
     */
    getSelectedMarksAsync(): Promise<MarksCollection>;
}
export interface FilterChangedEvent extends TableauWorksheetEvent {
    /**
     * @returns  The name of the field being filtered.
     */
    readonly fieldName: string;
    /**
     * @returns  The Filter object associated with the event.
     */
    getFilterAsync(): Promise<Filter>;
}
/**
 * An event which is raised when the value of a parameter changes.
 */
export interface ParameterChangedEvent {
    /**
     * @returns  The parameter that was changed.
     */
    getParameterAsync(): Promise<Parameter>;
}
/**
 * An event which is raised when a toolbar button or control becomes available or becomes unavailable.
 */
export interface ToolbarStateChangedEvent {
    /**
     * Gets the staus of Redo button in the toolbar.
     */
    readonly canRedo: boolean;
    /**
     * Gets the staus of Undo button in the toolbar.
     */
    readonly canUndo: boolean;
}
/**
 * An event which is raised when the workbook is published using embedded web authoring.
 *
 * @category Authoring
 */
export interface WorkbookPublishedAsEvent {
    /**
     * @returns  The URL of the newly saved workbook.
     */
    readonly newUrl: string;
}
/**
 * An event that can signal when a URL action occurs.
 *
 * ```
 * function urlActionEventHandler(event) {
 *     console.log('URL: ' + event.detail.url);
 *     console.log('Target: ' + event.detail.target);
 * }
 *
 * let viz = document.getElementById('tableauViz');
 * viz.addEventListener(TableauEventType.UrlAction, urlActionEventHandler);
 * ```
 */
export interface UrlActionEvent {
    /**
     * @returns The URL associated with the event.
     */
    readonly url: string;
    /**
     * @returns The target attribute associated with URL (for example, the identifier associated with a browser tab).
     */
    readonly target: string;
}
/**
 * An event that signals when a user selects a different tab in a workbook.
 */
export interface TabSwitchedEvent {
    /**
     * @returns The name of the sheet that was active before the tab switch event occurred.
     */
    readonly oldSheetName: string;
    /**
     * @returns The name of the sheet that is active after the tab switch event.
     */
    readonly newSheetName: string;
}
/**
 * An event which is raised when there are changes to a custom view.
 */
export interface CustomViewEvent {
    /**
     * @returns The {@link CustomView} object associated with the event.
     */
    readonly customView: CustomView;
}
/**
 * An event that signals when a different story point is selected in a story.
 */
export interface StoryPointSwitchedEvent {
    /**
     * @return The {@link StoryPointInfo} that was active before the story point switch event occurred. The returned object reflects the state of the story point before the switch occurred.
     */
    readonly oldStoryPointInfo: StoryPointInfo;
    /**
     * @return The {@link StoryPoint} that is currently active.
     */
    readonly newStoryPoint: StoryPoint;
}
/**
 * An event that signals an error while loading the webcomponent.
 */
export interface VizLoadErrorEvent {
    /**
     * @return The error message
     */
    readonly message: string;
    /**
     * @return The error code
     */
    readonly errorCode: EmbeddingErrorCodes;
}
/**
 * Event which is triggered when the Pulse filters change
 */
export interface PulseFiltersChangedEvent {
    /**
     * The names of the fields being filtered
     */
    readonly fieldNames: Array<string>;
    /**
     * @returns The PulseFilter array associated with the event containing the filters that were changed
     */
    getFiltersAsync(): Promise<Array<PulseFilter>>;
}
/**
 * Event which is triggered when a Pulse Insight is discovered
 */
export interface PulseInsightDiscoveredEvent {
    /**
     * The insight id
     */
    readonly id: string;
    /**
     * The insight characterization
     */
    readonly characterization: string;
    /**
     * The HTML markup for the insight
     */
    readonly markup: string;
    /**
     * The insight question asked
     */
    readonly question: string;
    /**
     * The insight score
     */
    readonly score: number;
    /**
     * The insight type
     */
    readonly type: string;
    /**
     * The insight version
     */
    readonly version: number;
}
/**
 * Event which is triggered when the Pulse metric time dimension changes
 */
export interface PulseTimeDimensionChangedEvent {
    readonly timeDimension: PulseTimeDimension;
}
/**
 * Event which is triggered when Pulse navigates to a new URL inside the embedded iframe
 */
export interface PulseUrlChangedEvent {
    /**
     * The old URL before it changed.
     */
    readonly oldUrl: string;
    /**
     * The new URL after it changed.
     */
    readonly newUrl: string;
    /**
     * Additional context that describes why the URL changed e.g. 'session-expired'
     */
    readonly context: string | undefined;
}
/**
 * Event which is triggered when an internal Pulse error is encountered.
 */
export interface PulseErrorEvent {
    /**
     * The error message.
     * If the error popup is visible, this is the message it shows.
     * If the error popup is hidden, this is the message it would have shown.
     * If the error popup is suppressed, this message would not have been shown to the user at all.
     */
    readonly message: string;
    /**
     * The HTTP status code of the failing API call that caused the error.
     */
    readonly httpStatus: number;
    /**
     * The visibility state of the error message popup.
     * If the error popup was shown to the user, the value is 'visible'.
     * If the error popup was hidden by the page embedding the metric, the value is 'hidden'.
     * If the error popup was hidden by Pulse due to the error not needing to be shown to the user, the value is 'suppressed'.
     */
    readonly messageVisibility: PulseErrorMessageVisibility;
}
//# sourceMappingURL=EventInterfaces.d.ts.map