import { Parameter } from './ParameterInterfaces';
import { AuthoringWorksheet, Sheet, SheetInfo } from './SheetInterfaces';
export interface Workbook {
    /**
     * Gets the name of the workbook saved to the server. Note that this is not necessarily the file name.
     */
    readonly name: string;
    /**
     * Gets the currently active sheet (the active tab).
     */
    readonly activeSheet: Sheet;
    /**
     * Note that this is synchronous, meaning that all of the sheets are expected when loaded.
     */
    readonly publishedSheetsInfo: Array<SheetInfo>;
    /**
     * Gets the currently active custom view, or undefined if no custom view is active.
     */
    readonly activeCustomView: CustomView | undefined;
    /**
     * Activates the sheet, either by name or index, and returns a promise of the sheet that was activated.
     */
    activateSheetAsync(sheetNameOrIndex: string | number): Promise<Sheet>;
    /**
     * Reverts the workbook to its last saved state.
     */
    revertAllAsync(): Promise<void>;
    /**
     * Gets the collection of CustomView objects associated with the workbook.
     */
    getCustomViewsAsync(): Promise<Array<CustomView>>;
    /**
     * Changes the visualization to show the named saved state.
     * ```workbook.showCustomViewAsync("Awesome" ).then(function() { // do something });```
     * To reset a custom view to the original view, do not provide the customViewName parameter.
     * ```workbook.showCustomViewAsync().then(function() { // do something });```
     */
    showCustomViewAsync(customViewName?: string | null): Promise<CustomView | undefined>;
    /**
     * Removes the named custom view.
     */
    removeCustomViewAsync(customViewName: string): Promise<CustomView>;
    /**
     * Saves the current state of the workbook by assigning a custom view name.
     */
    saveCustomViewAsync(customViewName: string): Promise<CustomView>;
    /**
     * Sets the active custom view as the default. If there is no active custom view, the default view is the original view.
     */
    setActiveCustomViewAsDefaultAsync(): Promise<void>;
    /**
     * @returns  A collection of all the Tableau parameters that are used in this workbook.
     */
    getParametersAsync(): Promise<Array<Parameter>>;
    /**
     * Modifies the given parameter and assigns it a new value. The new value must fall within
     * the domain restrictions defined by `allowableValues`. If the domain restriction is `ParameterValueType.Range`,
     * be sure to check the `allowableValues` before assigning a new value. If the new value is out of range, the
     * updated value will be set to either the `minValue` or the `maxValue` of the allowable range. If a step size is also specified
     * and the new value does not fall on the step intervals, the updated value will be set to the closest, lower step,
     * or closest, earlier date. If the domain restriction is type `ParameterValueType.List`, and there are aliases defined for the list,
     * the aliased value should be passed to the method.
     *
     * @param name  The name of the parameter
     * @param value  The new value to assign to this parameter.
     * *Note:* For changing `Date` parameters, UTC Date objects are expected.
     * @returns         The updated `Parameter`. The promise is rejected if `name` or `value` is invalid. However, if the domain restriction
     * is type `AllowableValuesType.Range`, and the `value` is out of the range bounds, the parameter gets set to the `minValue`
     * or the `maxValue` of the range (whichever is closer). If the range has a `stepSize` or `dateStepPeriod`, the parameter gets set
     * to the closest, lower step, or the closest, earlier date.
     *
     */
    changeParameterValueAsync(name: string, value: string | number | boolean | Date): Promise<Parameter>;
}
/**
 * A workbook for use with Tableau Pulse.
 * @ignore
 */
export interface AuthoringWorkbook {
    /**
     * @returns the currently active sheet (the active tab).
     */
    readonly activeSheet: AuthoringWorksheet;
}
/**
 * A named snapshot of the workbook at a specific moment.
 */
export interface CustomView {
    /**
     * Gets or sets the user-friendly name for the custom view
     */
    name: string;
    /**
     * Gets or sets whether the custom view is public or private.
     */
    shared: boolean;
    /**
     * Gets or sets whether this is the default custom view.
     */
    default: boolean;
    /**
     * Gets the user that created the custom view.
     */
    readonly ownerName: string;
    /**
     * Unique URL to load this view again.
     */
    readonly url: string;
    /**
     * Gets the {@link Workbook} to which this {@link CustomView} belongs.
     */
    readonly workbook: Workbook;
    /**
     * Updates an existing custom view
     */
    saveAsync(): Promise<CustomView>;
}
//# sourceMappingURL=WorkbookInterface.d.ts.map