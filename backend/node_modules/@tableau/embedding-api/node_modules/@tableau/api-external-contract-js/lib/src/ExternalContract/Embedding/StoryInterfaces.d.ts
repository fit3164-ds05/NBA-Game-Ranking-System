import { Sheet } from './SheetInterfaces';
export interface Story extends Sheet {
    /**
     * @returns The currently active story point.
     */
    readonly activeStoryPoint: StoryPoint;
    /**
     * @returns An array of StoryPointInfo objects.
     */
    readonly storyPointsInfo: Array<StoryPointInfo>;
    /**
     * Activates the next story point if there is one. If the current story point is the last one, then it stays active.
     * @returns A promise that resolves to the active {@link StoryPoint}.
     */
    activateNextStoryPointAsync(): Promise<StoryPoint>;
    /**
     * Activates the previous story point if there is one. If the current story point is the first one, then it stays active.
     * @returns A promise that resolves to the active {@link StoryPoint}.
     */
    activatePreviousStoryPointAsync(): Promise<StoryPoint>;
    /**
     * Activates the story point at the specified index and returns a promise of the activated StoryPoint.
     * Throws a {@link EmbeddingErrorCodes.IndexOutOfRange} error if the index is less than zero or greater than or
     * equal to the number of story points in the array.
     * @returns A promise that resolves to the active {@link StoryPoint}.
     */
    activateStoryPointAsync(index: number): Promise<StoryPoint>;
    /**
     * Reverts the story point at the specified index and returns a promise of the reverted StoryPointInfo.
     * Throws a {@link EmbeddingErrorCodes.IndexOutOfRange} error if the index is less than zero or greater than or
     * equal to the number of story points in the array.
     * @returns A promise that resolves to the reverted {@link StoryPointInfo}.
     */
    revertStoryPointAsync(index: number): Promise<StoryPointInfo>;
}
export interface StoryPoint {
    /**
     * @returns The zero-based index of this story point within the parent {@link Story}.
     */
    readonly index: number;
    /**
     * @returns The content of the textual description for this story point.
     */
    readonly caption: string;
    /**
     * @returns The value indicating whether the story point is the currently active point in the story.
     */
    readonly active: boolean;
    /**
     * @returns A boolean value indicating whether the story point is updated. If the value is false that means there are no changes from the last time the story point was “captured”.
     */
    readonly updated: boolean;
    /**
     * @returns The {@link Sheet} that this story point contains. This will be undefined if the story point does not have a contained sheet.
     */
    readonly containedSheet: Sheet | undefined;
    /**
     * @returns The {@link Story} object that contains this story point.
     */
    readonly parentStory: Story;
}
export interface StoryPointInfo {
    /**
     * @returns The zero-based index of this story point within the parent {@link Story}.
     */
    readonly index: number;
    /**
     * @returns The content of the textual description for this story point.
     */
    readonly caption: string;
    /**
     * @returns The value indicating whether the story point is the currently active point in the story.
     */
    readonly active: boolean;
    /**
     * @returns A boolean value indicating whether the story point is updated. If the value is false that means there are no changes from the last time the story point was “captured”.
     */
    readonly updated: boolean;
    /**
     * @returns The {@link Story} object that contains this story point.
     */
    readonly parentStory: Story;
}
//# sourceMappingURL=StoryInterfaces.d.ts.map