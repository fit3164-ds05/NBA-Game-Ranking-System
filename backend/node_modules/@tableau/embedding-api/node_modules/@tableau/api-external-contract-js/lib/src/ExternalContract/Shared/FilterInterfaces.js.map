{"version":3,"file":"FilterInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Shared/FilterInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Field } from './DataSourceInterfaces';\nimport { DataValue } from './DataTableInterfaces';\nimport {\n  DateRangeType,\n  FilterDomainType,\n  FilterNullOption,\n  FilterType,\n  HierarchicalLevelSelectionState,\n  PeriodType,\n} from './Namespaces/Tableau';\n\n/**\n *\n * An abstract base class for all of the filter types.\n */\nexport interface Filter {\n  /**\n   * @returns  The parent worksheet.\n   */\n  readonly worksheetName: string;\n\n  /**\n   * @returns  The type of the filter.\n   */\n  readonly filterType: FilterType;\n\n  /**\n   * @returns  The name of the field being filtered.  Note that this is the caption\n   *           as shown in the UI, and not the actual database field name.\n   */\n  readonly fieldName: string;\n\n  /**\n   * @returns  The id of the field being filtered.\n   */\n\n  readonly fieldId: string;\n\n  /**\n   * @returns a promise containing the field for the filter.\n   * @since 1.5.0 Fixed to properly return the field. Also requires Tableau 2019.2+.\n   */\n  getFieldAsync(): Promise<Field>;\n\n  /**\n   * @returns the list of worksheet names that have the filter applied.\n   * @since 1.9.0 and Tableau 2022.2\n   */\n  getAppliedWorksheetsAsync(): Promise<Array<string>>;\n\n  /**\n   * Applies the filter to the specified list of worksheets.\n   * If the worksheet(s) do not exist or do not contain the field in their data sources, an exception is thrown.\n   *\n   * @param applyToWorksheets list of worksheets to apply the filter on\n   * @returns the list of worksheet names that have the filter applied\n   * @since 1.9.0 and Tableau 2022.2\n   */\n  setAppliedWorksheetsAsync(applyToWorksheets: Array<string>): Promise<Array<string>>;\n}\n\n/**\n * A Categorical Filter\n */\nexport interface CategoricalFilter extends Filter {\n  /**\n   * @returns True if all the values are selected for this filter. When 'All' is selected,\n   * appliedValues returns an empty list.\n   *\n   * This field is available in Tableau 2019.2 or later\n   */\n  readonly isAllSelected?: boolean;\n  /**\n   * @returns  A list of values applied to this categorical filter. Notice that if this is a\n   * dependent filter, the current relavent values can be fetched by calling\n   * `getDomainAsync(tableau.FilterDomainType.Relevant)`.\n   */\n  readonly appliedValues: Array<DataValue>;\n\n  /**\n   * @returns  True if this filter is an exclude filter, false if an include filter.\n   */\n  readonly isExcludeMode: boolean;\n\n  /**\n   * @returns a promise containing the categorical domain for the filter. Note if a filter contains\n   * multiple fields (such as a filter action with multiple fields), the values array in the returned\n   * CategoricalDomain ({@link CategoricalDomain.values}) will be empty. If there are multiple fields\n   * in the filter, the results need to be represented by a table, which is not currently supported.\n   */\n  getDomainAsync(domainType?: FilterDomainType): Promise<CategoricalDomain>;\n}\n\n/**\n * A Hierarchical Filter\n * Hierarchical Filters are used when a hierarchical field is used as a filter on a cube database.\n * As an example, assume a hierarchical field in Product, named ByCategory.\n * ByCategory has the following five levels: Family, Category, Subcategory, Brand, Sku.\n * @since Extensions 1.10.0 and Tableau version 2022.3\n */\nexport interface HierarchicalFilter extends Filter {\n  /**\n   * @returns The dimension name associated with the filter. In the ByCategory filter example, this would be 'Product'\n   */\n  readonly dimensionName: string;\n\n  /**\n   * @returns The hierarchy caption associated with the filter. In the ByCategory filter example, this would be '[Product].[ByCategory]'\n   */\n  readonly hierarchyCaption: string;\n\n  /**\n   * @returns The number of levels in the hierarchical filter. In the ByCategory filter example, this would be 5\n   */\n  readonly numberOfLevels: number;\n\n  /**\n   * @returns Details about each level in the hierarchical filter.\n   */\n  readonly levelDetails: Array<HierarchicalLevelDetail>;\n\n  /**\n   * @returns True if all the values are selected for this filter. When 'All' is selected,\n   * appliedValues returns an empty list.\n   */\n  readonly isAllSelected: boolean;\n\n  /**\n   * @returns  A list of values applied to this hierarchical filter.\n   */\n  readonly appliedValues: Array<HierarchicalFilterDataValue>;\n}\n\n/**\n * A Range Filter\n */\nexport interface RangeFilter extends Filter {\n  /**\n   * @returns  Minimum value, inclusive, applied to the filter.\n   */\n  readonly minValue: DataValue;\n\n  /**\n   * @returns  Maximum value, inclusive, applied to the filter.\n   */\n  readonly maxValue: DataValue;\n\n  /**\n   * @returns  True if null values are included in the filter, false otherwise.\n   */\n  readonly includeNullValues: boolean;\n\n  /**\n   * @param domainType the domain type, defaults to relevant\n   * @returns a promise containing the domain for the range filter\n   */\n  getDomainAsync(domainType?: FilterDomainType): Promise<RangeDomain>;\n}\n\nexport interface RelativeDateFilter extends Filter {\n  /**\n   * @returns the anchor date of the filter\n   */\n  readonly anchorDate: DataValue;\n\n  /**\n   * @returns The date period of the filter.\n   */\n  readonly periodType: PeriodType;\n\n  /**\n   * @returns The range of the date filter (years, months, etc.).\n   */\n  readonly rangeType: DateRangeType;\n\n  /**\n   * @returns When getRange returns LASTN or NEXTN, this is the N value (how many years, months, etc.).\n   */\n  readonly rangeN: number;\n}\n\n/** *\n * Passed into the applyFilter methods to control advanced filtering options.\n */\nexport interface FilterOptions {\n  /**\n   * Determines whether the filter will apply in exclude mode or include mode.\n   * The default is include, which means that you use the fields as part of a filter.\n   * Exclude mode means that you include everything else except the specified fields.\n   */\n  readonly isExcludeMode: boolean;\n}\n\n/**\n * Options for Range Filter\n */\nexport interface RangeFilterOptions {\n  readonly min?: number | Date;\n  readonly max?: number | Date;\n  readonly nullOption?: FilterNullOption;\n}\n\n/**\n * Options for Relative Date Filter\n * @since version 1.9.0 and Tableau 2022.2\n */\nexport interface RelativeDateFilterOptions {\n  /**\n   * @returns the anchor date of the filter\n   */\n  readonly anchorDate?: Date;\n\n  /**\n   * @returns The date period of the filter (years, months, etc.).\n   */\n  readonly periodType: PeriodType;\n\n  /**\n   * @returns The range of the date filter.\n   */\n  readonly rangeType: DateRangeType;\n\n  /**\n   * @returns When getRange returns LASTN or NEXTN, this is the N value (how many years, months, etc.).\n   */\n  readonly rangeN?: number;\n}\n\n/**\n * The domain of range filter\n */\nexport interface RangeDomain {\n  /**\n   * @returns the domain type (relevant, all)\n   */\n  readonly type: FilterDomainType;\n  /**\n   * @returns  Minimum value as specified in the domain.\n   */\n  readonly min: DataValue;\n  /**\n   * @returns  Maximum value as specified in the domain.\n   */\n  readonly max: DataValue;\n}\n\n/**\n * The domain of a categorical filter\n */\nexport interface CategoricalDomain {\n  /**\n   * @returns the domain type (relevant, all)\n   */\n  readonly type: FilterDomainType;\n  /**\n   * @returns the list of values in the domain of the filter\n   */\n  readonly values: Array<DataValue>;\n}\n\n/**\n * A selected value in a hierarchical filter\n */\nexport interface HierarchicalFilterDataValue {\n  /**\n   * @returns the DataValue of the seleted item\n   */\n  value: DataValue;\n  /**\n   * @returns the path to this selected item. In the ByCategory example, the hierarchicalPath for a level 2 item could be\n   * '[Outdoor & Sporting].[Bikes].[Kids' Bikes]'.\n   */\n  readonly hierarchicalPath: string;\n  /**\n   * @returns the level of this selected item. In the ByCategory example, the level could be 0-4.\n   * For '[Outdoor & Sporting].[Bikes].[Kids' Bikes]', the level is 2.\n   */\n  level: number;\n}\n\n/**\n * Details about each level in a hierarchical filter\n */\nexport interface HierarchicalLevelDetail {\n  /**\n   * @returns the level name. In the ByCategory example, the name could be 'Family', 'Category', 'Subcategory', 'Brand', or 'Sku'.\n   */\n  name: string;\n\n  /**\n   * @returns the level selection state\n   */\n  levelSelectionState: HierarchicalLevelSelectionState;\n}\n"]}