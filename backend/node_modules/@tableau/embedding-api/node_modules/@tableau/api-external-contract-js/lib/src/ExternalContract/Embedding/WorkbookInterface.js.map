{"version":3,"file":"WorkbookInterface.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Embedding/WorkbookInterface.ts"],"names":[],"mappings":"","sourcesContent":["import { Parameter } from './ParameterInterfaces';\nimport { AuthoringWorksheet, Sheet, SheetInfo } from './SheetInterfaces';\n\nexport interface Workbook {\n  /**\n   * Gets the name of the workbook saved to the server. Note that this is not necessarily the file name.\n   */\n  readonly name: string;\n\n  /**\n   * Gets the currently active sheet (the active tab).\n   */\n  readonly activeSheet: Sheet;\n\n  /**\n   * Note that this is synchronous, meaning that all of the sheets are expected when loaded.\n   */\n  readonly publishedSheetsInfo: Array<SheetInfo>;\n\n  /**\n   * Gets the currently active custom view, or undefined if no custom view is active.\n   */\n  readonly activeCustomView: CustomView | undefined;\n\n  /**\n   * Activates the sheet, either by name or index, and returns a promise of the sheet that was activated.\n   */\n  activateSheetAsync(sheetNameOrIndex: string | number): Promise<Sheet>;\n\n  /**\n   * Reverts the workbook to its last saved state.\n   */\n  revertAllAsync(): Promise<void>;\n\n  /**\n   * Gets the collection of CustomView objects associated with the workbook.\n   */\n  getCustomViewsAsync(): Promise<Array<CustomView>>;\n\n  /**\n   * Changes the visualization to show the named saved state.\n   * ```workbook.showCustomViewAsync(\"Awesome\" ).then(function() { // do something });```\n   * To reset a custom view to the original view, do not provide the customViewName parameter.\n   * ```workbook.showCustomViewAsync().then(function() { // do something });```\n   */\n  showCustomViewAsync(customViewName?: string | null): Promise<CustomView | undefined>;\n\n  /**\n   * Removes the named custom view.\n   */\n  removeCustomViewAsync(customViewName: string): Promise<CustomView>;\n\n  /**\n   * Saves the current state of the workbook by assigning a custom view name.\n   */\n  saveCustomViewAsync(customViewName: string): Promise<CustomView>;\n\n  /**\n   * Sets the active custom view as the default. If there is no active custom view, the default view is the original view.\n   */\n  setActiveCustomViewAsDefaultAsync(): Promise<void>;\n\n  /**\n   * @returns  A collection of all the Tableau parameters that are used in this workbook.\n   */\n  getParametersAsync(): Promise<Array<Parameter>>;\n\n  /**\n   * Modifies the given parameter and assigns it a new value. The new value must fall within\n   * the domain restrictions defined by `allowableValues`. If the domain restriction is `ParameterValueType.Range`,\n   * be sure to check the `allowableValues` before assigning a new value. If the new value is out of range, the\n   * updated value will be set to either the `minValue` or the `maxValue` of the allowable range. If a step size is also specified\n   * and the new value does not fall on the step intervals, the updated value will be set to the closest, lower step,\n   * or closest, earlier date. If the domain restriction is type `ParameterValueType.List`, and there are aliases defined for the list,\n   * the aliased value should be passed to the method.\n   *\n   * @param name  The name of the parameter\n   * @param value  The new value to assign to this parameter.\n   * *Note:* For changing `Date` parameters, UTC Date objects are expected.\n   * @returns         The updated `Parameter`. The promise is rejected if `name` or `value` is invalid. However, if the domain restriction\n   * is type `AllowableValuesType.Range`, and the `value` is out of the range bounds, the parameter gets set to the `minValue`\n   * or the `maxValue` of the range (whichever is closer). If the range has a `stepSize` or `dateStepPeriod`, the parameter gets set\n   * to the closest, lower step, or the closest, earlier date.\n   *\n   */\n  changeParameterValueAsync(name: string, value: string | number | boolean | Date): Promise<Parameter>;\n}\n\n/**\n * A workbook for use with Tableau Pulse.\n * @ignore\n */\nexport interface AuthoringWorkbook {\n  /**\n   * @returns the currently active sheet (the active tab).\n   */\n  readonly activeSheet: AuthoringWorksheet;\n}\n\n/**\n * A named snapshot of the workbook at a specific moment.\n */\nexport interface CustomView {\n  /**\n   * Gets or sets the user-friendly name for the custom view\n   */\n  name: string;\n\n  /**\n   * Gets or sets whether the custom view is public or private.\n   */\n  shared: boolean;\n\n  /**\n   * Gets or sets whether this is the default custom view.\n   */\n  default: boolean;\n\n  /**\n   * Gets the user that created the custom view.\n   */\n  readonly ownerName: string;\n\n  /**\n   * Unique URL to load this view again.\n   */\n  readonly url: string;\n\n  /**\n   * Gets the {@link Workbook} to which this {@link CustomView} belongs.\n   */\n  readonly workbook: Workbook;\n\n  /**\n   * Updates an existing custom view\n   */\n  saveAsync(): Promise<CustomView>;\n}\n"]}