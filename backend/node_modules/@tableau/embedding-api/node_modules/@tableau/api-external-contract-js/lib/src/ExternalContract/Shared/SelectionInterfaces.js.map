{"version":3,"file":"SelectionInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Shared/SelectionInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Point } from '../Extensions/SheetInterfaces';\nimport { DataTable } from './DataTableInterfaces';\nimport { FilterNullOption, MarkType } from './Namespaces/Tableau';\n\n/**\n * Represents a collection of marks on a viz. This collection could be\n * marks that are either selected or highlighted.\n */\nexport interface MarksCollection {\n  /**\n   * @returns  A collection of data tables. Each row in each data table represents a single\n   *           mark on the viz. Since marks can contain columns different than the columns of another mark,\n   *           for example, a dual axis chart, each table represents one specific schema of a mark.\n   */\n  readonly data: Array<DataTable>;\n}\n\n/**\n * Represents a mark in a worksheet.\n */\nexport interface MarkInfo {\n  /**\n   * @NotImplemented\n   * @returns  The type of this mark.\n   */\n  readonly type: MarkType;\n\n  /**\n   * @NotImplemented\n   * @returns  The RGBA value of this mark.\n   */\n  readonly color: string;\n\n  /**\n   * @returns  Unique tuple representing this mark in a drawn visualization.\n   */\n  tupleId?: number;\n}\n\n/**\n * SelectionCriteria interface is used to specify to the fieldName to values for Hierarchical, Categorical and Range based selections.\n */\nexport interface SelectionCriteria {\n  /**\n   * @hidden\n   * tupleIds are of number type.\n   */\n  readonly tupleId?: number;\n  /**\n   * Fieldname of the mark that is intended to be selected.\n   * Hierarchical fields follow the convention of \"[{parentField}].[{selectingField}]\"\n   */\n  readonly fieldName: string;\n  /* tslint:disable:no-any */\n  /**\n   * Value that is intended to be selected. This can be specified as the list of values or a single value.\n   * Range-based selections need to provide the value in the format of RangeValue interface.\n   * To select a single quantitative value, use the RangeValue interface where both max and min are the value you want to select.\n   */\n  readonly value: CategoricalValue | RangeValue;\n}\n\n/**\n * Categorical values for selection.\n */\nexport type CategoricalValue = string | Array<string>;\n\n/**\n * RangeValue interface to provide selection value for range based selections.\n * The associated field should be a quantitative field.\n * For Date Values, UTC Date objects are expected. (i.e., `var min = new Date(Date.UTC(1999, 0, 1))`).\n * While date string inputs work, UTC date inputs are officially supported going forward for RangeValue.\n */\nexport interface RangeValue {\n  /**\n   * min range value for the range based selection\n   */\n  readonly min: number | Date;\n  /**\n   * max range value for the range based selection\n   */\n  readonly max: number | Date;\n  /**\n   * Including nulloptions parameter.\n   */\n  readonly nullOption?: FilterNullOption;\n}\n\n/**\n * Provides the necessary information for how to display a Tableau tooltip.\n * @since 1.12.0 and Tableau 2024.2\n * @category Viz Extensions\n */\nexport interface TooltipContext {\n  /**\n   * Indicates where the tooltip should be displayed relative to the top left of the visualization.\n   */\n  readonly tooltipAnchorPoint: Point;\n}\n"]}