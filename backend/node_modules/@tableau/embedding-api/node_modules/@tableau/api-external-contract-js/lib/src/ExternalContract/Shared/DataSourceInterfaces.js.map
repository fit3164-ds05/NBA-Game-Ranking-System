{"version":3,"file":"DataSourceInterfaces.js","sourceRoot":"","sources":["../../../../src/ExternalContract/Shared/DataSourceInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { DataTable, DataTableReader } from './DataTableInterfaces';\nimport { ColumnType, DataType, FieldAggregationType, FieldRoleType, IncludeDataValuesOption } from './Namespaces/Tableau';\n\n/**\n * Represents the data source used by a Worksheet.\n */\nexport interface DataSource {\n  /**\n   * @returns The user friendly name of the data source as seen in the UI.\n   */\n  readonly name: string;\n\n  /**\n   * @returns Unique string representing this data source.\n   */\n  readonly id: string;\n\n  /**\n   * @returns An array of fields associated with this data source.\n   */\n  readonly fields: Array<Field>;\n\n  /**\n   * @returns Last update time of the data source's extract, or undefined if this data source is live.\n   */\n  readonly extractUpdateTime: string | undefined;\n\n  /**\n   * @returns True if this data source is an extract, false otherwise.\n   */\n  readonly isExtract: boolean;\n\n  /**\n   * @returns True if this data source is published to server, false otherwise. Always undefined prior to Tableau 2021.4.\n   * @since 1.7.0 and Tableau 2021.4\n   */\n  readonly isPublished: boolean | undefined;\n\n  /**\n   * @returns URL of data source if published to server, undefined otherwise. Always undefined prior to Tableau 2021.4.\n   * @since 1.7.0 and Tableau 2021.4\n   * @hidden For first class extensions only\n   */\n  publishedUrl(): string | undefined;\n\n  /**\n   * This call has the same functionality as clicking the Refresh option on a data source in\n   * Tableau.  This does not refresh an extract.\n   *\n   * **Note:** The `refreshAsync()` method is intended to be used in scenarios where manual\n   * interaction causes a need to refresh the data in the Tableau visualization. The method is not,\n   * as currently designed, meant to support or emulate streaming or *live* visualizations.\n   * Extensions that use the method to refresh aggressively or automatically\n   * can cause issues on Tableau Server and Tableau Online and are subject to being blocked\n   * by the Tableau Online administrator.\n   *\n   * This call does not currently support refreshing live Google Sheet data sources.\n   *\n   * @returns Promise that resolves when the data source has finished refreshing.\n   */\n  refreshAsync(): Promise<void>;\n\n  /**\n   * @returns An array of table summary objects that are currently used in the data source.\n   *\n   * @throws  UnsupportedMethodForDataSourceType error if this method is called on a Cube DataSource or GA.\n   *\n   * @deprecated since version 1.4.0.  Use DataSource.getLogicalTablesAsync.\n   */\n  getActiveTablesAsync(): Promise<Array<TableSummary>>;\n\n  /**\n   * @returns An array of descriptions of the connections within this data source.\n   */\n  getConnectionSummariesAsync(): Promise<Array<ConnectionSummary>>;\n\n  /**\n   * @param options  Collection of options to change the behavior of the call.\n   * @returns        Returns a promise containing a page of data from the underlying data of the data source.\n   *\n   * The following example shows use of the `getUnderlyingDataAsync()` method to get the underlying data from a specific data source.\n   * The example uses the JavaScript `find()` method to select the workbook and data source.\n   *\n   * ```\n   * const dataSources = await worksheet.getDataSourcesAsync();\n   * const dataSource = dataSources.find(datasource => datasource.name === \"Sample - Superstore\");\n   * const dataTable = await dataSource.getUnderlyingDataAsync();\n   * let field = dataTable.columns.find(column => column.fieldName === \"Sub-Category\");\n   * let list = [];\n   * for (let row of dataTable.data) {\n   *     list.push(row[field.index].value);\n   * }\n   * let values = list.filter((el, i, arr) => arr.indexOf(el) === i);\n   * console.log(values);\n   *\n   * ```\n   * @deprecated Use DataSource.getLogicalTableDataReaderAsync or DataSource.getLogicalTableDataAsync.\n   */\n  getUnderlyingDataAsync(options?: DataSourceUnderlyingDataOptions): Promise<DataTable>;\n\n  /**\n   *\n   * Gets the underlying logical tables used in the data source.\n   *\n   * @since 1.4.0\n   * @returns An array of logical tables that are currently used in the data source.\n   *\n   * The following example uses the `getLogicalTablesAsync` method to print the names of the\n   * the logical tables to the console.\n   *\n   * ```\n   * dataSource.getLogicalTablesAsync().then(function (logicalTables) {\n   *   // Loop through each table that was used in creating this data source\n   *   logicalTables.forEach(function (table) {\n   *      console.log(table.caption);\n   *   });\n   * });\n   * ```\n   */\n  getLogicalTablesAsync(): Promise<Array<LogicalTable>>;\n\n  /**\n   * Gets the underlying data table for the given logical table id.\n   *\n   * @param options  Collection of options to change the behavior of the call.\n   * @returns A data table containing the underlying data of the data source.\n   * @see getLogicalTableDataReaderAsync to read more than 10,000 rows.\n   *\n   * You can use the `getUnderlyingDataOptions.maxRows` property to request the number of rows of data to return.\n   * If unspecified (maxRows == '0'), the call to `getLogicalTableDataAsync` requests all rows in the logical table.\n   * Note that the maximum number of rows returned from the `getLogicalTableDataAsync()` method is limited\n   * to 10,000 rows. You can use the `DataTable` property, `isTotalRowCountLimited`, to test whether there is\n   * more data. A value of true indicates that the calling function requested more rows than the limit (10,000) and the\n   * underlying data source contains more rows than can be returned.\n   *\n   * The following example shows use of the getLogicalTableDataAsync() method to get the data from a specific logical table in a data source.\n   * The example uses the JavaScript find() method to select the workbook, and uses the getLogicalTablesAsync method to identify the logical table id.\n   * ```\n   * const dataSources = await worksheet.getDataSourcesAsync();\n   * const dataSource = dataSources.find(datasource => datasource.name === \"Sample - Superstore\");\n   * const logicalTables = await dataSource.getLogicalTablesAsync()\n   * const dataTable = await dataSource.getLogicalTableDataAsync(logicalTables[0].id);\n   * console.log(dataTable);\n   * ```\n   */\n\n  getLogicalTableDataAsync(logicalTableId: string, options?: DataSourceUnderlyingDataOptions): Promise<DataTable>;\n\n  /**\n   * Gets the underlying data table reader for the given logical table id.\n   * Only one active DataTableReader per logical table id is supported.\n   *\n   * @param logicalTableId logical table id.\n   * @param pageRowCount The number of rows per page. The default and maximum is 10,000 rows.\n   * @param options  Collection of options to change the behavior of the reader.\n   * @returns        A data table reader to access the logical table data in the data source.\n   * @hidden\n   * `getLogicalTableDataReaderAsync` attempts to prepare all the rows of the table to be read as pages.\n   * There is a limit to the number of rows that can be prepared. The default limit is about 1 million\n   * rows of data. However, if the data source has many columns, this number will be adjusted downward.\n   * You can change the default limit with the Tableau Server (Cloud) or Tableau Desktop option: ExtensionsAndEmbeddingReaderCellLimit.\n   * If the data source has many columns, `getLogicalTableDataReaderAsync` can be sped up by only requesting\n   * native data values in the `DataSourceUnderlyingDataOptions`.\n   *\n   * The following example shows use of the `getLogicalTableDataReaderAsync` and `getAllPagesAsync` to\n   * prepare pages of 10,000 rows each, and then to get a maximum of 150,000 rows of native data from\n   * a specific logical table in a data source.\n   *\n   * ```\n   * const dataSources = await worksheet.getDataSourcesAsync();\n   * const dataSource = dataSources.find(datasource => datasource.name === \"Sample - Superstore\");\n   * const logicalTables = await dataSource.getLogicalTablesAsync()\n   * const dataTableReader = await dataSource.getLogicalTableDataReaderAsync(logicalTables[0].id, 10000,\n   *     { includeDataValuesOption: tableau.IncludeDataValuesOption.OnlyNativeValues });\n   * const dataTable = await dataTableReader.getAllPagesAsync(150000);\n   * console.log(dataTable);\n   * await dataTableReader.releaseAsync();\n   * ```\n   */\n  getLogicalTableDataReaderAsync(\n    logicalTableId: string,\n    pageRowCount?: number,\n    options?: DataSourceUnderlyingDataOptions,\n  ): Promise<DataTableReader>;\n}\n\n/**\n * Basic properties of a field\n * @hidden\n */\nexport interface FieldBase {\n  /**\n   * @returns  The name of the field (i.e. the caption).\n   */\n  readonly name: string;\n\n  /**\n   * @returns  User description of field, undefined if there is none.\n   */\n  readonly description: string | undefined;\n\n  /**\n   * @returns The data type of the field\n   */\n  readonly dataType: DataType | undefined;\n\n  /**\n   * @returns  The role of this field.\n   */\n  readonly role: FieldRoleType;\n\n  /**\n   * @returns  The type of aggregation for this field.\n   */\n  readonly aggregation: FieldAggregationType;\n\n  /**\n   * @returns  The type of the column, either discrete or continuous. Could hold value 'Unknown'.\n   */\n  readonly columnType: ColumnType;\n\n  /**\n   * @returns  True if this field is a table calculation.\n   */\n  readonly isCalculatedField: boolean;\n\n  /**\n   * @returns  True if this field is a combination of multiple fields, false otherwise.\n   */\n  readonly isCombinedField: boolean;\n\n  /**\n   * @returns  True if this field is generated by Tableau, false otherwise.\n   *           Tableau generates a number of fields for a data source, such as Number\n   *           of Records, or Measure Values.  This property can be used to\n   *           distinguish between those fields and fields that come from the underlying\n   *           data connection, or were created by a user.\n   */\n  readonly isGenerated: boolean;\n\n  /**\n   * @returns True if this role has a semantic type of geospatial: e.g latitude, longitude, zipcode, City name...\n   */\n  readonly isGeospatial: boolean;\n\n  /**\n   * @returns  True if this field is hidden, false otherwise.\n   */\n  readonly isHidden: boolean;\n\n  /**\n   * @returns  True if this field comes from the published datasource. False if it was created in Tableau (as a calculated field, for example).\n   */\n  readonly isPresentOnPublishedDatasource: boolean;\n}\n\n/**\n * A field contains information about what data source it belongs to,\n * its role, and the ability to fetch the domain values.\n */\nexport interface Field extends FieldBase {\n  /**\n   * @returns  Unique string representing this field in this datasource.\n   */\n  readonly id: string;\n\n  /**\n   * @returns  The data source to which this field belongs.\n   */\n  readonly dataSource: DataSource;\n}\n\n/**\n * Represents a connection within a datasource (ex: A SQL Server connection).\n * A data source can be composed of one or more connections.\n */\nexport interface ConnectionSummary {\n  /**\n   * @returns The name of the connection (i.e. the caption).\n   */\n  readonly name: string;\n\n  /**\n   * @returns Unique string representing this connection.\n   */\n  readonly id: string;\n\n  /**\n   * @returns The type of the connection (i.e. SQL Server, web data connector).\n   */\n  readonly type: string;\n\n  /**\n   * @returns The URI to which the connection is pointing, if applicable.\n   *          If a data source is a published data source, the URI is returned\n   *          as `localhost`.\n   */\n  readonly serverURI: string | undefined;\n}\n\n/**\n * Represents a table of data in a data source.\n */\nexport interface TableSummary {\n  /**\n   * @returns The name of the table (i.e. the caption).\n   */\n  readonly name: string;\n\n  /**\n   * @returns Unique string representing this table.\n   */\n  readonly id: string;\n\n  /**\n   * @returns the ID of the connection that this table belongs to.\n   */\n  readonly connectionId: string;\n\n  /**\n   * @returns the custom SQL used to create this table if it was created with Custom SQL, undefined otherwise.\n   */\n  readonly customSQL: string | undefined;\n}\n\n/**\n *\n * Configuration object for fetching data from an data source object.\n */\nexport interface DataSourceUnderlyingDataOptions {\n  /**\n   * Do not use aliases specified in the data source in Tableau. Default is false.\n   */\n  ignoreAliases?: boolean;\n\n  /**\n   * The columns to return specified by field name, returns all by default.\n   */\n  columnsToInclude?: Array<string>;\n\n  /**\n   * The columns to return specified by field id, returns all by default.\n   * Since 1.5.0, fieldId is a property of the Column object.\n   *\n   * @since 1.5.0\n   */\n  columnsToIncludeById?: Array<string>;\n\n  /**\n   * The maximum number of rows to return. 10,000 by default\n   * @since 1.10.0 and Tableau 2022.4 Consider using a DataTableReader returned by one of the get...DataReaderAsync methods\n   * to avoid the 10,000 row limit.\n   */\n  maxRows?: number;\n\n  /**\n   * Specify which properties to return in DataValues. The default is `IncludeDataValuesOption.AllValues`.\n   * All properties not requested will be `undefined` in the DataValue results.\n   * This is a performance optimization only, and will be ignored in Tableau versions prior to 2021.2.\n   *\n   * @since 1.5.0\n   */\n  includeDataValuesOption?: IncludeDataValuesOption;\n}\n\n/**\n * @since 1.4.0\n * Represents a logical table in a data source or a logical table used in a worksheet\n */\nexport interface LogicalTable {\n  readonly id: string;\n\n  readonly caption: string;\n}\n"]}